{"version":3,"file":"index.esm.js","sources":["../../libs/Opcodes.ts","../../libs/AnnotationVisitor.ts","../../libs/ByteVector.ts","../../libs/utils.ts","../../libs/Attribute.ts","../../libs/Type.ts","../../libs/AnnotationWriter.ts","../../libs/ClassVisitor.ts","../../libs/FieldVisitor.ts","../../libs/FieldWriter.ts","../../../node_modules/long/dist/long.js","../../libs/bits.ts","../../libs/Item.ts","../../libs/MethodVisitor.ts","../../libs/Frame.ts","../../libs/Edge.ts","../../libs/Label.ts","../../libs/CurrentFrame.ts","../../libs/MethodWriter.ts","../../libs/ClassWriter.ts","../../libs/Context.ts","../../libs/Handle.ts","../../libs/TypePath.ts","../../libs/ClassReader.ts","../../libs/TypeReference.ts"],"sourcesContent":["/*\n * ASM: a very small and fast Java bytecode manipulation framework\n * Copyright (c) 2000-2011 INRIA, France Telecom\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n * 3. Neither the name of the copyright holders nor the names of its\n *    contributors may be used to endorse or promote products derived from\n *    this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\n * THE POSSIBILITY OF SUCH DAMAGE.\n */\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\n/**\n * Defines the JVM opcodes, access flags and array type codes. This interface\n * does not define all the JVM opcodes because some opcodes are automatically\n * handled. For example, the xLOAD and xSTORE opcodes are automatically replaced\n * by xLOAD_n and xSTORE_n opcodes when possible. The xLOAD_n and xSTORE_n\n * opcodes are therefore not defined in this interface. Likewise for LDC,\n * automatically replaced by LDC_W or LDC2_W when necessary, WIDE, GOTO_W and\n * JSR_W.\n *\n * @author Eric Bruneton\n * @author Eugene Kuleshov\n */\nexport namespace Opcodes {\n\n    export const ASM4 : number = 4 << 16 | 0 << 8 | 0;\n\n    export const ASM5 : number = 5 << 16 | 0 << 8 | 0;\n\n    export const V1_1 : number = 3 << 16 | 45;\n\n    export const V1_2 : number = 0 << 16 | 46;\n\n    export const V1_3 : number = 0 << 16 | 47;\n\n    export const V1_4 : number = 0 << 16 | 48;\n\n    export const V1_5 : number = 0 << 16 | 49;\n\n    export const V1_6 : number = 0 << 16 | 50;\n\n    export const V1_7 : number = 0 << 16 | 51;\n\n    export const V1_8 : number = 0 << 16 | 52;\n\n    export const ACC_PUBLIC : number = 1;\n\n    export const ACC_PRIVATE : number = 2;\n\n    export const ACC_PROTECTED : number = 4;\n\n    export const ACC_STATIC : number = 8;\n\n    export const ACC_FINAL : number = 16;\n\n    export const ACC_SUPER : number = 32;\n\n    export const ACC_SYNCHRONIZED : number = 32;\n\n    export const ACC_VOLATILE : number = 64;\n\n    export const ACC_BRIDGE : number = 64;\n\n    export const ACC_VARARGS : number = 128;\n\n    export const ACC_TRANSIENT : number = 128;\n\n    export const ACC_NATIVE : number = 256;\n\n    export const ACC_INTERFACE : number = 512;\n\n    export const ACC_ABSTRACT : number = 1024;\n\n    export const ACC_STRICT : number = 2048;\n\n    export const ACC_SYNTHETIC : number = 4096;\n\n    export const ACC_ANNOTATION : number = 8192;\n\n    export const ACC_ENUM : number = 16384;\n\n    export const ACC_MANDATED : number = 32768;\n\n    export const ACC_DEPRECATED : number = 131072;\n\n    export const T_BOOLEAN : number = 4;\n\n    export const T_CHAR : number = 5;\n\n    export const T_FLOAT : number = 6;\n\n    export const T_DOUBLE : number = 7;\n\n    export const T_BYTE : number = 8;\n\n    export const T_SHORT : number = 9;\n\n    export const T_INT : number = 10;\n\n    export const T_LONG : number = 11;\n\n    export const H_GETFIELD : number = 1;\n\n    export const H_GETSTATIC : number = 2;\n\n    export const H_PUTFIELD : number = 3;\n\n    export const H_PUTSTATIC : number = 4;\n\n    export const H_INVOKEVIRTUAL : number = 5;\n\n    export const H_INVOKESTATIC : number = 6;\n\n    export const H_INVOKESPECIAL : number = 7;\n\n    export const H_NEWINVOKESPECIAL : number = 8;\n\n    export const H_INVOKEINTERFACE : number = 9;\n\n    /**\n     * Represents an expanded frame. See {@link ClassReader#EXPAND_FRAMES}.\n     */\n    export const F_NEW : number = -1;\n\n    /**\n     * Represents a compressed frame with compexport conste frame data.\n     */\n    export const F_FULL : number = 0;\n\n    /**\n     * Represents a compressed frame where locals are the same as the locals in\n     * the previous frame, except that additional 1-3 locals are defined, and\n     * with an empty stack.\n     */\n    export const F_APPEND : number = 1;\n\n    /**\n     * Represents a compressed frame where locals are the same as the locals in\n     * the previous frame, except that the last 1-3 locals are absent and with\n     * an empty stack.\n     */\n    export const F_CHOP : number = 2;\n\n    /**\n     * Represents a compressed frame with exactly the same locals as the\n     * previous frame and with an empty stack.\n     */\n    export const F_SAME : number = 3;\n\n    /**\n     * Represents a compressed frame with exactly the same locals as the\n     * previous frame and with a single value on the stack.\n     */\n    export const F_SAME1 : number = 4;\n\n    export const TOP : number = <number>new Number(0);\n\n    export const INTEGER : number = <number>new Number(1);\n\n    export const FLOAT : number = <number>new Number(2);\n\n    export const DOUBLE : number = <number>new Number(3);\n\n    export const LONG : number = <number>new Number(4);\n\n    export const NULL : number = <number>new Number(5);\n\n    export const UNINITIALIZED_THIS : number = <number>new Number(6);\n\n    export const NOP : number = 0;\n\n    export const ACONST_NULL : number = 1;\n\n    export const ICONST_M1 : number = 2;\n\n    export const ICONST_0 : number = 3;\n\n    export const ICONST_1 : number = 4;\n\n    export const ICONST_2 : number = 5;\n\n    export const ICONST_3 : number = 6;\n\n    export const ICONST_4 : number = 7;\n\n    export const ICONST_5 : number = 8;\n\n    export const LCONST_0 : number = 9;\n\n    export const LCONST_1 : number = 10;\n\n    export const FCONST_0 : number = 11;\n\n    export const FCONST_1 : number = 12;\n\n    export const FCONST_2 : number = 13;\n\n    export const DCONST_0 : number = 14;\n\n    export const DCONST_1 : number = 15;\n\n    export const BIPUSH : number = 16;\n\n    export const SIPUSH : number = 17;\n\n    export const LDC : number = 18;\n\n    export const ILOAD : number = 21;\n\n    export const LLOAD : number = 22;\n\n    export const FLOAD : number = 23;\n\n    export const DLOAD : number = 24;\n\n    export const ALOAD : number = 25;\n\n    export const IALOAD : number = 46;\n\n    export const LALOAD : number = 47;\n\n    export const FALOAD : number = 48;\n\n    export const DALOAD : number = 49;\n\n    export const AALOAD : number = 50;\n\n    export const BALOAD : number = 51;\n\n    export const CALOAD : number = 52;\n\n    export const SALOAD : number = 53;\n\n    export const ISTORE : number = 54;\n\n    export const LSTORE : number = 55;\n\n    export const FSTORE : number = 56;\n\n    export const DSTORE : number = 57;\n\n    export const ASTORE : number = 58;\n\n    export const IASTORE : number = 79;\n\n    export const LASTORE : number = 80;\n\n    export const FASTORE : number = 81;\n\n    export const DASTORE : number = 82;\n\n    export const AASTORE : number = 83;\n\n    export const BASTORE : number = 84;\n\n    export const CASTORE : number = 85;\n\n    export const SASTORE : number = 86;\n\n    export const POP : number = 87;\n\n    export const POP2 : number = 88;\n\n    export const DUP : number = 89;\n\n    export const DUP_X1 : number = 90;\n\n    export const DUP_X2 : number = 91;\n\n    export const DUP2 : number = 92;\n\n    export const DUP2_X1 : number = 93;\n\n    export const DUP2_X2 : number = 94;\n\n    export const SWAP : number = 95;\n\n    export const IADD : number = 96;\n\n    export const LADD : number = 97;\n\n    export const FADD : number = 98;\n\n    export const DADD : number = 99;\n\n    export const ISUB : number = 100;\n\n    export const LSUB : number = 101;\n\n    export const FSUB : number = 102;\n\n    export const DSUB : number = 103;\n\n    export const IMUL : number = 104;\n\n    export const LMUL : number = 105;\n\n    export const FMUL : number = 106;\n\n    export const DMUL : number = 107;\n\n    export const IDIV : number = 108;\n\n    export const LDIV : number = 109;\n\n    export const FDIV : number = 110;\n\n    export const DDIV : number = 111;\n\n    export const IREM : number = 112;\n\n    export const LREM : number = 113;\n\n    export const FREM : number = 114;\n\n    export const DREM : number = 115;\n\n    export const INEG : number = 116;\n\n    export const LNEG : number = 117;\n\n    export const FNEG : number = 118;\n\n    export const DNEG : number = 119;\n\n    export const ISHL : number = 120;\n\n    export const LSHL : number = 121;\n\n    export const ISHR : number = 122;\n\n    export const LSHR : number = 123;\n\n    export const IUSHR : number = 124;\n\n    export const LUSHR : number = 125;\n\n    export const IAND : number = 126;\n\n    export const LAND : number = 127;\n\n    export const IOR : number = 128;\n\n    export const LOR : number = 129;\n\n    export const IXOR : number = 130;\n\n    export const LXOR : number = 131;\n\n    export const IINC : number = 132;\n\n    export const I2L : number = 133;\n\n    export const I2F : number = 134;\n\n    export const I2D : number = 135;\n\n    export const L2I : number = 136;\n\n    export const L2F : number = 137;\n\n    export const L2D : number = 138;\n\n    export const F2I : number = 139;\n\n    export const F2L : number = 140;\n\n    export const F2D : number = 141;\n\n    export const D2I : number = 142;\n\n    export const D2L : number = 143;\n\n    export const D2F : number = 144;\n\n    export const I2B : number = 145;\n\n    export const I2C : number = 146;\n\n    export const I2S : number = 147;\n\n    export const LCMP : number = 148;\n\n    export const FCMPL : number = 149;\n\n    export const FCMPG : number = 150;\n\n    export const DCMPL : number = 151;\n\n    export const DCMPG : number = 152;\n\n    export const IFEQ : number = 153;\n\n    export const IFNE : number = 154;\n\n    export const IFLT : number = 155;\n\n    export const IFGE : number = 156;\n\n    export const IFGT : number = 157;\n\n    export const IFLE : number = 158;\n\n    export const IF_ICMPEQ : number = 159;\n\n    export const IF_ICMPNE : number = 160;\n\n    export const IF_ICMPLT : number = 161;\n\n    export const IF_ICMPGE : number = 162;\n\n    export const IF_ICMPGT : number = 163;\n\n    export const IF_ICMPLE : number = 164;\n\n    export const IF_ACMPEQ : number = 165;\n\n    export const IF_ACMPNE : number = 166;\n\n    export const GOTO : number = 167;\n\n    export const JSR : number = 168;\n\n    export const RET : number = 169;\n\n    export const TABLESWITCH : number = 170;\n\n    export const LOOKUPSWITCH : number = 171;\n\n    export const IRETURN : number = 172;\n\n    export const LRETURN : number = 173;\n\n    export const FRETURN : number = 174;\n\n    export const DRETURN : number = 175;\n\n    export const ARETURN : number = 176;\n\n    export const RETURN : number = 177;\n\n    export const GETSTATIC : number = 178;\n\n    export const PUTSTATIC : number = 179;\n\n    export const GETFIELD : number = 180;\n\n    export const PUTFIELD : number = 181;\n\n    export const INVOKEVIRTUAL : number = 182;\n\n    export const INVOKESPECIAL : number = 183;\n\n    export const INVOKESTATIC : number = 184;\n\n    export const INVOKEINTERFACE : number = 185;\n\n    export const INVOKEDYNAMIC : number = 186;\n\n    export const NEW : number = 187;\n\n    export const NEWARRAY : number = 188;\n\n    export const ANEWARRAY : number = 189;\n\n    export const ARRAYLENGTH : number = 190;\n\n    export const ATHROW : number = 191;\n\n    export const CHECKCAST : number = 192;\n\n    export const INSTANCEOF : number = 193;\n\n    export const MONITORENTER : number = 194;\n\n    export const MONITOREXIT : number = 195;\n\n    export const MULTIANEWARRAY : number = 197;\n\n    export const IFNULL : number = 198;\n\n    export const IFNONNULL : number = 199;\n}\n\n\n\n","\n/*\n * ASM: a very small and fast Java bytecode manipulation framework\n * Copyright (c) 2000-2011 INRIA, France Telecom\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n * 3. Neither the name of the copyright holders nor the names of its\n *    contributors may be used to endorse or promote products derived from\n *    this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\n * THE POSSIBILITY OF SUCH DAMAGE.\n */\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\n/**\n * A visitor to visit a Java annotation. The methods of this class must be\n * called in the following order: ( <tt>visit</tt> | <tt>visitEnum</tt> |\n * <tt>visitAnnotation</tt> | <tt>visitArray</tt> )* <tt>visitEnd</tt>.\n *\n * @author Eric Bruneton\n * @author Eugene Kuleshov\n */\nimport { Opcodes } from \"./Opcodes\"\n\nexport abstract class AnnotationVisitor {\n    /**\n     * The ASM API version implemented by this visitor. The value of this field\n     * must be one of {@link Opcodes#ASM4} or {@link Opcodes#ASM5}.\n     */\n    api: number;\n\n    /**\n     * The annotation visitor to which this visitor must delegate method calls.\n     * May be null.\n     */\n    av: AnnotationVisitor | null;\n\n    /**\n     * Constructs a new {@link AnnotationVisitor}.\n     *\n     * @param api\n     * the ASM API version implemented by this visitor. Must be one\n     * of {@link Opcodes#ASM4} or {@link Opcodes#ASM5}.\n     * @param av\n     * the annotation visitor to which this visitor must delegate\n     * method calls. May be null.\n     */\n    public constructor(api: number, av: AnnotationVisitor | null = null) {\n        this.api = 0;\n        if (api !== Opcodes.ASM4 && api !== Opcodes.ASM5) {\n            throw new Error();\n        }\n        this.api = api;\n        this.av = av;\n    }\n\n    /**\n     * Visits a primitive value of the annotation.\n     *\n     * @param name\n     * the value name.\n     * @param value\n     * the actual value, whose type must be {@link Byte},\n     * {@link Boolean}, {@link Character}, {@link Short},\n     * {@link Integer} , {@link Long}, {@link Float}, {@link Double},\n     * {@link String} or {@link Type} of OBJECT or ARRAY sort. This\n     * value can also be an array of byte, boolean, short, char, int,\n     * long, float or double values (this is equivalent to using\n     * {@link #visitArray visitArray} and visiting each array element\n     * in turn, but is more convenient).\n     */\n    public visit(name: string, value: any) {\n        if (this.av != null) {\n            this.av.visit(name, value);\n        }\n    }\n\n    /**\n     * Visits an enumeration value of the annotation.\n     *\n     * @param name\n     * the value name.\n     * @param desc\n     * the class descriptor of the enumeration class.\n     * @param value\n     * the actual enumeration value.\n     */\n    public visitEnum(name: string, desc: string | null, value: string | null) {\n        if (this.av != null) {\n            this.av.visitEnum(name, desc, value);\n        }\n    }\n\n    /**\n     * Visits a nested annotation value of the annotation.\n     *\n     * @param name\n     * the value name.\n     * @param desc\n     * the class descriptor of the nested annotation class.\n     * @return a visitor to visit the actual nested annotation value, or\n     * <tt>null</tt> if this visitor is not interested in visiting this\n     * nested annotation. <i>The nested annotation value must be fully\n     * visited before calling other methods on this annotation\n     * visitor</i>.\n     */\n    public visitAnnotation(name: string, desc: string): AnnotationVisitor | null {\n        if (this.av != null) {\n            return this.av.visitAnnotation(name, desc);\n        }\n        return null;\n    }\n\n    /**\n     * Visits an array value of the annotation. Note that arrays of primitive\n     * types (such as byte, boolean, short, char, int, long, float or double)\n     * can be passed as value to {@link #visit visit}. This is what\n     * {@link ClassReader} does.\n     *\n     * @param name\n     * the value name.\n     * @return a visitor to visit the actual array value elements, or\n     * <tt>null</tt> if this visitor is not interested in visiting these\n     * values. The 'name' parameters passed to the methods of this\n     * visitor are ignored. <i>All the array values must be visited\n     * before calling other methods on this annotation visitor</i>.\n     */\n    public visitArray(name: string): AnnotationVisitor | null {\n        if (this.av != null) {\n            return this.av.visitArray(name);\n        }\n        return null;\n    }\n\n    /**\n     * Visits the end of the annotation.\n     */\n    public visitEnd() {\n        if (this.av != null) {\n            this.av.visitEnd();\n        }\n    }\n}\n","/*\n * ASM: a very small and fast Java bytecode manipulation framework\n * Copyright (c) 2000-2011 INRIA, France Telecom\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n * 3. Neither the name of the copyright holders nor the names of its\n *    contributors may be used to endorse or promote products derived from\n *    this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\n * THE POSSIBILITY OF SUCH DAMAGE.\n */\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\n/**\n * A dynamically extensible vector of bytes. This class is roughly equivalent to\n * a DataOutputStream on top of a ByteArrayOutputStream, but is more efficient.\n *\n * @author Eric Bruneton\n */\nexport class ByteVector {\n    /**\n     * The content of this vector.\n     */\n    data: Uint8Array;\n\n    /**\n     * Actual number of bytes in this vector.\n     */\n    length: number = 0;\n\n    /**\n     * Constructs a new {@link ByteVector ByteVector} with the given initial\n     * size.\n     *\n     * @param initialSize\n     * the initial size of the byte vector to be constructed.\n     */\n    public constructor(initialSize: number = 64) {\n        this.data = new Uint8Array(initialSize);\n    }\n\n    /**\n     * Puts a byte into this byte vector. The byte vector is automatically\n     * enlarged if necessary.\n     *\n     * @param b\n     * a byte.\n     * @return this byte vector.\n     */\n    public putByte(b: number): ByteVector {\n        let length: number = this.length;\n        if (length + 1 > this.data.length) {\n            this.enlarge(1);\n        }\n        this.data[length++] = (b | 0);\n        this.length = length;\n        return this;\n    }\n\n    /**\n     * Puts two bytes into this byte vector. The byte vector is automatically\n     * enlarged if necessary.\n     *\n     * @param b1\n     * a byte.\n     * @param b2\n     * another byte.\n     * @return this byte vector.\n     */\n    put11(b1: number, b2: number): ByteVector {\n        let length: number = this.length;\n        if (length + 2 > this.data.length) {\n            this.enlarge(2);\n        }\n        let data: Uint8Array = this.data;\n        data[length++] = (b1 | 0);\n        data[length++] = (b2 | 0);\n        this.length = length;\n        return this;\n    }\n\n    /**\n     * Puts a short into this byte vector. The byte vector is automatically\n     * enlarged if necessary.\n     *\n     * @param s\n     * a short.\n     * @return this byte vector.\n     */\n    public putShort(s: number): ByteVector {\n        let length: number = this.length;\n        if (length + 2 > this.data.length) {\n            this.enlarge(2);\n        }\n        let data: Uint8Array = this.data;\n        data[length++] = ((s >>> 8) | 0);\n        data[length++] = (s | 0);\n        this.length = length;\n        return this;\n    }\n\n    /**\n     * Puts a byte and a short into this byte vector. The byte vector is\n     * automatically enlarged if necessary.\n     *\n     * @param b a byte.\n     * @param s a short.\n     * @return this byte vector.\n     */\n    put12(b: number, s: number): ByteVector {\n        let length: number = this.length;\n        if (length + 3 > this.data.length) {\n            this.enlarge(3);\n        }\n        let data: Uint8Array = this.data;\n        data[length++] = (b | 0);\n        data[length++] = ((s >>> 8) | 0);\n        data[length++] = (s | 0);\n        this.length = length;\n        return this;\n    }\n\n    /**\n     * Puts an int into this byte vector. The byte vector is automatically\n     * enlarged if necessary.\n     *\n     * @param i\n     * an int.\n     * @return this byte vector.\n     */\n    public putInt(i: number): ByteVector {\n        let length: number = this.length;\n        if (length + 4 > this.data.length) {\n            this.enlarge(4);\n        }\n        let data: Uint8Array = this.data;\n        data[length++] = ((i >>> 24) | 0);\n        data[length++] = ((i >>> 16) | 0);\n        data[length++] = ((i >>> 8) | 0);\n        data[length++] = (i | 0);\n        this.length = length;\n        return this;\n    }\n\n    /**\n     * Puts a long into this byte vector. The byte vector is automatically\n     * enlarged if necessary.\n     *\n     * @param l\n     * a long.\n     * @return this byte vector.\n     */\n    public putLong(l: Long): ByteVector {\n        let length: number = this.length;\n        if (length + 8 > this.data.length) {\n            this.enlarge(8);\n        }\n        let data: Uint8Array = this.data;\n        let i: number = l.getHighBits();\n        data[length++] = (i >>> 24) & 256;\n        data[length++] = (i >>> 16) & 256;\n        data[length++] = (i >>> 8) & 256;\n        data[length++] = i & 256;\n        i = l.getLowBits();\n        data[length++] = ((i >>> 24) & 256);\n        data[length++] = ((i >>> 16) & 256);\n        data[length++] = ((i >>> 8) & 256);\n        data[length++] = (i & 256);\n        this.length = length;\n        return this;\n    }\n\n    /**\n     * Puts an UTF8 string into this byte vector. The byte vector is\n     * automatically enlarged if necessary.\n     *\n     * @param s\n     * a String whose UTF8 encoded length must be less than 65536.\n     * @return this byte vector.\n     */\n    public putUTF8(s: string): ByteVector {\n        let charLength: number = s.length;\n        if (charLength > 65535) {\n            throw new Error();\n        }\n        let len: number = this.length;\n        if (len + 2 + charLength > this.data.length) {\n            this.enlarge(2 + charLength);\n        }\n        let data: Uint8Array = this.data;\n        data[len++] = ((charLength >>> 8) | 0);\n        data[len++] = (charLength | 0);\n        for (let i: number = 0; i < charLength; ++i) {\n            let c: string = s.charAt(i);\n            if ((c).charCodeAt(0) >= (\"\\u0001\").charCodeAt(0) && (c).charCodeAt(0) <= (\"\\u007f\").charCodeAt(0)) {\n                data[len++] = (c).charCodeAt(0);\n            } else {\n                this.length = len;\n                return this.encodeUTF8(s, i, 65535);\n            }\n        }\n        this.length = len;\n        return this;\n    }\n\n    /**\n     * Puts an UTF8 string into this byte vector. The byte vector is\n     * automatically enlarged if necessary. The string length is encoded in two\n     * bytes before the encoded characters, if there is space for that (i.e. if\n     * this.length - i - 2 >= 0).\n     *\n     * @param s\n     * the String to encode.\n     * @param i\n     * the index of the first character to encode. The previous\n     * characters are supposed to have already been encoded, using\n     * only one byte per character.\n     * @param maxByteLength\n     * the maximum byte length of the encoded string, including the\n     * already encoded characters.\n     * @return this byte vector.\n     */\n    encodeUTF8(s: string, i: number, maxByteLength: number): ByteVector {\n        let charLength: number = s.length;\n        let byteLength: number = i;\n        let c: string;\n        for (let j: number = i; j < charLength; ++j) {\n            c = s.charAt(j);\n            if ((c).charCodeAt(0) >= (\"\\u0001\").charCodeAt(0) && (c).charCodeAt(0) <= (\"\\u007f\").charCodeAt(0)) {\n                byteLength++;\n            } else if ((c).charCodeAt(0) > (\"\\u07ff\").charCodeAt(0)) {\n                byteLength += 3;\n            } else {\n                byteLength += 2;\n            }\n        }\n        if (byteLength > maxByteLength) {\n            throw new Error();\n        }\n        let start: number = this.length - i - 2;\n        if (start >= 0) {\n            this.data[start] = ((byteLength >>> 8) | 0);\n            this.data[start + 1] = (byteLength | 0);\n        }\n        if (this.length + byteLength - i > this.data.length) {\n            this.enlarge(byteLength - i);\n        }\n        let len: number = this.length;\n        for (let j: number = i; j < charLength; ++j) {\n            c = s.charAt(j);\n            if ((c).charCodeAt(0) >= (\"\\u0001\").charCodeAt(0) && (c).charCodeAt(0) <= (\"\\u007f\").charCodeAt(0)) {\n                this.data[len++] = (c).charCodeAt(0);\n            } else if ((c).charCodeAt(0) > (\"\\u07ff\").charCodeAt(0)) {\n                this.data[len++] = ((224 | (c).charCodeAt(0) >> 12 & 15) | 0);\n                this.data[len++] = ((128 | (c).charCodeAt(0) >> 6 & 63) | 0);\n                this.data[len++] = ((128 | (c).charCodeAt(0) & 63) | 0);\n            } else {\n                this.data[len++] = ((192 | (c).charCodeAt(0) >> 6 & 31) | 0);\n                this.data[len++] = ((128 | (c).charCodeAt(0) & 63) | 0);\n            }\n        }\n        this.length = len;\n        return this;\n    }\n\n    /**\n     * Puts an array of bytes into this byte vector. The byte vector is\n     * automatically enlarged if necessary.\n     *\n     * @param b\n     * an array of bytes. May be <tt>null</tt> to put <tt>len</tt>\n     * null bytes into this byte vector.\n     * @param off\n     * index of the fist byte of b that must be copied.\n     * @param len\n     * number of bytes of b that must be copied.\n     * @return this byte vector.\n     */\n    public putByteArray(b: Uint8Array | null, off: number, len: number): ByteVector {\n        if (this.length + len > this.data.length) {\n            this.enlarge(len);\n        }\n        if (b != null) {\n            for (let i = 0; i < len; i++) {\n                this.data[i + this.length] = b[i + off];\n            }\n            // java.lang.System.arraycopy(b, off, this.data, this.length, len);\n        }\n        this.length += len;\n        return this;\n    }\n\n    /**\n     * Enlarge this byte vector so that it can receive n more bytes.\n     *\n     * @param size\n     * number of additional bytes that this byte vector should be\n     * able to receive.\n     */\n    private enlarge(size: number) {\n        let length1: number = 2 * this.data.length;\n        let length2: number = this.length + size;\n        const newArr = new Uint8Array(length1 > length2 ? length1 : length2);\n        newArr.set(this.data);\n        this.data = newArr;\n    }\n}\n","export function assert<T>(v: T | null): asserts v is T {\n    if (!v) { throw new Error(\"nullptr\") }\n}\n\nexport function notnull<T>(v: T | null): T {\n    if (!v) { throw new Error(\"nullptr\"); }\n    return v;\n}\n","/*\n * ASM: a very small and fast Java bytecode manipulation framework\n * Copyright (c) 2000-2011 INRIA, France Telecom\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n * 3. Neither the name of the copyright holders nor the names of its\n *    contributors may be used to endorse or promote products derived from\n *    this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\n * THE POSSIBILITY OF SUCH DAMAGE.\n */\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\n/**\n * A non standard class, field, method or code attribute.\n *\n * @author Eric Bruneton\n * @author Eugene Kuleshov\n */\nimport { Label } from \"./Label\";\nimport { ClassReader } from \"./ClassReader\";\nimport { ClassWriter } from \"./ClassWriter\";\nimport { ByteVector } from \"./ByteVector\";\nimport { assert } from \"./utils\";\n\nexport class Attribute {\n    /**\n     * The type of this attribute.\n     */\n    public type: string | null;\n\n    /**\n     * The raw value of this attribute, used only for unknown attributes.\n     */\n    value!: Uint8Array;\n\n    /**\n     * The next attribute in this attribute list. May be <tt>null</tt>.\n     */\n    next: Attribute | null = null;\n\n    /**\n     * Constructs a new empty attribute.\n     *\n     * @param type\n     * the type of the attribute.\n     */\n    constructor(type: string | null) {\n        this.type = type;\n    }\n\n    /**\n     * Returns <tt>true</tt> if this type of attribute is unknown. The default\n     * implementation of this method always returns <tt>true</tt>.\n     *\n     * @return <tt>true</tt> if this type of attribute is unknown.\n     */\n    public isUnknown(): boolean {\n        return true;\n    }\n\n    /**\n     * Returns <tt>true</tt> if this type of attribute is a code attribute.\n     *\n     * @return <tt>true</tt> if this type of attribute is a code attribute.\n     */\n    public isCodeAttribute(): boolean {\n        return false;\n    }\n\n    /**\n     * Returns the labels corresponding to this attribute.\n     *\n     * @return the labels corresponding to this attribute, or <tt>null</tt> if\n     * this attribute is not a code attribute that contains labels.\n     */\n    getLabels(): Label[] | null {\n        return null;\n    }\n\n    /**\n     * Reads a {@link #type type} attribute. This method must return a\n     * <i>new</i> {@link Attribute} object, of type {@link #type type},\n     * corresponding to the <tt>len</tt> bytes starting at the given offset, in\n     * the given class reader.\n     *\n     * @param cr\n     * the class that contains the attribute to be read.\n     * @param off\n     * index of the first byte of the attribute's content in\n     * {@link ClassReader#b cr.b}. The 6 attribute header bytes,\n     * containing the type and the length of the attribute, are not\n     * taken into account here.\n     * @param len\n     * the length of the attribute's content.\n     * @param buf\n     * buffer to be used to call {@link ClassReader#readUTF8\n     * readUTF8}, {@link ClassReader#readClass(int,char[]) readClass}\n     * or {@link ClassReader#readConst readConst}.\n     * @param codeOff\n     * index of the first byte of code's attribute content in\n     * {@link ClassReader#b cr.b}, or -1 if the attribute to be read\n     * is not a code attribute. The 6 attribute header bytes,\n     * containing the type and the length of the attribute, are not\n     * taken into account here.\n     * @param labels\n     * the labels of the method's code, or <tt>null</tt> if the\n     * attribute to be read is not a code attribute.\n     * @return a <i>new</i> {@link Attribute} object corresponding to the given\n     * bytes.\n     */\n    read(cr: ClassReader, off: number, len: number, buf: number[] | null, codeOff: number, labels: Label[] | null): Attribute {\n        let attr: Attribute = new Attribute(this.type);\n        attr.value = cr.buf.slice(0, len);\n        // java.lang.System.arraycopy(cr.b, off, attr.value, 0, len);\n        return attr;\n    }\n\n    /**\n     * Returns the byte array form of this attribute.\n     *\n     * @param cw\n     * the class to which this attribute must be added. This\n     * parameter can be used to add to the constant pool of this\n     * class the items that corresponds to this attribute.\n     * @param code\n     * the bytecode of the method corresponding to this code\n     * attribute, or <tt>null</tt> if this attribute is not a code\n     * attributes.\n     * @param len\n     * the length of the bytecode of the method corresponding to this\n     * code attribute, or <tt>null</tt> if this attribute is not a\n     * code attribute.\n     * @param maxStack\n     * the maximum stack size of the method corresponding to this\n     * code attribute, or -1 if this attribute is not a code\n     * attribute.\n     * @param maxLocals\n     * the maximum number of local variables of the method\n     * corresponding to this code attribute, or -1 if this attribute\n     * is not a code attribute.\n     * @return the byte array form of this attribute.\n     */\n    write(cw: ClassWriter, code: Uint8Array | null, len: number, maxStack: number, maxLocals: number): ByteVector {\n        let v: ByteVector = new ByteVector();\n        v.data = this.value;\n        v.length = this.value.length;\n        return v;\n    }\n\n    /**\n     * Returns the length of the attribute list that begins with this attribute.\n     *\n     * @return the length of the attribute list that begins with this attribute.\n     */\n    getCount(): number {\n        let count: number = 0;\n        let attr: Attribute | null = this;\n        while ((attr != null)) {\n            count += 1;\n            attr = attr.next;\n        };\n        return count;\n    }\n\n    /**\n     * Returns the size of all the attributes in this attribute list.\n     *\n     * @param cw\n     * the class writer to be used to convert the attributes into\n     * byte arrays, with the {@link #write write} method.\n     * @param code\n     * the bytecode of the method corresponding to these code\n     * attributes, or <tt>null</tt> if these attributes are not code\n     * attributes.\n     * @param len\n     * the length of the bytecode of the method corresponding to\n     * these code attributes, or <tt>null</tt> if these attributes\n     * are not code attributes.\n     * @param maxStack\n     * the maximum stack size of the method corresponding to these\n     * code attributes, or -1 if these attributes are not code\n     * attributes.\n     * @param maxLocals\n     * the maximum number of local variables of the method\n     * corresponding to these code attributes, or -1 if these\n     * attributes are not code attributes.\n     * @return the size of all the attributes in this attribute list. This size\n     * includes the size of the attribute headers.\n     */\n    getSize(cw: ClassWriter, code: Uint8Array | null, len: number, maxStack: number, maxLocals: number): number {\n        let attr: Attribute | null = this;\n        let size: number = 0;\n        while ((attr != null)) {\n            assert(attr.type);\n            cw.newUTF8(attr.type);\n            size += attr.write(cw, code, len, maxStack, maxLocals).length + 6;\n            attr = attr.next;\n        };\n        return size;\n    }\n\n    /**\n     * Writes all the attributes of this attribute list in the given byte\n     * vector.\n     *\n     * @param cw\n     * the class writer to be used to convert the attributes into\n     * byte arrays, with the {@link #write write} method.\n     * @param code\n     * the bytecode of the method corresponding to these code\n     * attributes, or <tt>null</tt> if these attributes are not code\n     * attributes.\n     * @param len\n     * the length of the bytecode of the method corresponding to\n     * these code attributes, or <tt>null</tt> if these attributes\n     * are not code attributes.\n     * @param maxStack\n     * the maximum stack size of the method corresponding to these\n     * code attributes, or -1 if these attributes are not code\n     * attributes.\n     * @param maxLocals\n     * the maximum number of local variables of the method\n     * corresponding to these code attributes, or -1 if these\n     * attributes are not code attributes.\n     * @param out\n     * where the attributes must be written.\n     */\n    put(cw: ClassWriter, code: Uint8Array | null, len: number, maxStack: number, maxLocals: number, out: ByteVector) {\n        let attr: Attribute | null = this;\n        while ((attr != null)) {\n            let b: ByteVector = attr.write(cw, code, len, maxStack, maxLocals);\n            assert(attr.type);\n            out.putShort(cw.newUTF8(attr.type)).putInt(b.length);\n            out.putByteArray(b.data, 0, b.length);\n            attr = attr.next;\n        };\n    }\n}\n","/*\n * ASM: a very small and fast Java bytecode manipulation framework\n * Copyright (c) 2000-2011 INRIA, France Telecom\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n * 3. Neither the name of the copyright holders nor the names of its\n *    contributors may be used to endorse or promote products derived from\n *    this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\n * THE POSSIBILITY OF SUCH DAMAGE.\n */\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nimport { Opcodes } from \"./Opcodes\";\n\n/**\n * A Java field or method type. This class can be used to make it easier to\n * manipulate type and method descriptors.\n *\n * @author Eric Bruneton\n * @author Chris Nokleberg\n */\nexport class Type {\n    /**\n    * The sort of the <tt>void</tt> type. See {@link #getSort getSort}.\n    */\n    static readonly VOID: number = 0;\n\n    /**\n     * The sort of the <tt>boolean</tt> type. See {@link #getSort getSort}.\n     */\n    static readonly BOOLEAN: number = 1;\n\n    /**\n     * The sort of the <tt>char</tt> type. See {@link #getSort getSort}.\n     */\n    static readonly CHAR: number = 2;\n\n    /**\n     * The sort of the <tt>byte</tt> type. See {@link #getSort getSort}.\n     */\n    static readonly BYTE: number = 3;\n\n    /**\n     * The sort of the <tt>short</tt> type. See {@link #getSort getSort}.\n     */\n    static readonly SHORT: number = 4;\n\n    /**\n     * The sort of the <tt>int</tt> type. See {@link #getSort getSort}.\n     */\n    static readonly INT: number = 5;\n\n    /**\n     * The sort of the <tt>float</tt> type. See {@link #getSort getSort}.\n     */\n    static readonly FLOAT: number = 6;\n\n    /**\n     * The sort of the <tt>long</tt> type. See {@link #getSort getSort}.\n     */\n    static readonly LONG: number = 7;\n\n    /**\n     * The sort of the <tt>double</tt> type. See {@link #getSort getSort}.\n     */\n    static readonly DOUBLE: number = 8;\n\n    /**\n     * The sort of array reference types. See {@link #getSort getSort}.\n     */\n    static readonly ARRAY: number = 9;\n\n    /**\n     * The sort of object reference types. See {@link #getSort getSort}.\n     */\n    static readonly OBJECT: number = 10;\n\n    /**\n     * The sort of method types. See {@link #getSort getSort}.\n     */\n    static readonly METHOD: number = 11;\n\n    /**\n     * The <tt>void</tt> type.\n     */\n    static readonly VOID_TYPE: Type = new Type(Type.VOID, null, ((\"V\").charCodeAt(0) << 24) | (5 << 16), 1);\n\n    /**\n     * The <tt>boolean</tt> type.\n     */\n    static readonly BOOLEAN_TYPE: Type = new Type(Type.BOOLEAN, null, ((\"Z\").charCodeAt(0) << 24) | (5 << 8) | 1, 1);\n\n    /**\n     * The <tt>char</tt> type.\n     */\n    static readonly CHAR_TYPE: Type = new Type(Type.CHAR, null, ((\"C\").charCodeAt(0) << 24) | (6 << 8) | 1, 1);\n\n    /**\n     * The <tt>byte</tt> type.\n     */\n    static readonly BYTE_TYPE: Type = new Type(Type.BYTE, null, ((\"B\").charCodeAt(0) << 24) | (5 << 8) | 1, 1);\n\n    /**\n     * The <tt>short</tt> type.\n     */\n    static readonly SHORT_TYPE: Type = new Type(Type.SHORT, null, ((\"S\").charCodeAt(0) << 24) | (7 << 8) | 1, 1);\n\n    /**\n     * The <tt>int</tt> type.\n     */\n    static readonly INT_TYPE: Type = new Type(Type.INT, null, ((\"I\").charCodeAt(0) << 24) | 1, 1);\n\n    /**\n     * The <tt>float</tt> type.\n     */\n    static readonly FLOAT_TYPE: Type = new Type(Type.FLOAT, null, ((\"F\").charCodeAt(0) << 24) | (2 << 16) | (2 << 8) | 1, 1);\n\n    /**\n     * The <tt>long</tt> type.\n     */\n    static readonly LONG_TYPE: Type = new Type(Type.LONG, null, ((\"J\").charCodeAt(0) << 24) | (1 << 16) | (1 << 8) | 2, 1);\n\n    /**\n     * The <tt>double</tt> type.\n     */\n    static readonly DOUBLE_TYPE: Type = new Type(Type.DOUBLE, null, ((\"D\").charCodeAt(0) << 24) | (3 << 16) | (3 << 8) | 2, 1);\n\n    /**\n     * The sort of this Java type.\n     *\n     * {@link #VOID VOID}, {@link #BOOLEAN BOOLEAN}, {@link #CHAR CHAR},\n     * {@link #BYTE BYTE}, {@link #SHORT SHORT}, {@link #INT INT},\n     * {@link #FLOAT FLOAT}, {@link #LONG LONG}, {@link #DOUBLE DOUBLE},\n     * {@link #ARRAY ARRAY}, {@link #OBJECT OBJECT} or {@link #METHOD\n     * METHOD}.\n     */\n    readonly sort: number;\n\n    /**\n     * A buffer containing the internal name of this Java type. This field is\n     * only used for reference types.\n     */\n    private buf: string;\n\n    /**\n     * The offset of the internal name of this Java type in {@link #buf buf} or,\n     * for primitive types, the size, descriptor and getOpcode offsets for this\n     * type (byte 0 contains the size, byte 1 the descriptor, byte 2 the offset\n     * for IALOAD or IASTORE, byte 3 the offset for all other instructions).\n     */\n    private off: number;\n\n    /**\n     * The length of the internal name of this Java type.\n     */\n    private len: number;\n\n    /**\n     * Constructs a reference type.\n     *\n     * @param sort the sort of the reference type to be constructed.\n     * @param buf  a buffer containing the descriptor of the previous type.\n     * @param off  the offset of this descriptor in the previous buffer.\n     * @param len  the length of this descriptor.\n     */\n    constructor(sort: number, buf: string | null, off: number, len: number) {\n        this.sort = 0;\n        this.off = 0;\n        this.len = 0;\n        this.sort = sort;\n        this.buf = buf ?? \"\";\n        this.off = off;\n        this.len = len;\n    }\n\n    /**\n     * Returns the Java type corresponding to the given internal name.\n     *\n     * @param internalName an internal name.\n     * @return the Java type corresponding to the given internal name.\n     */\n    static getObjectType(internalName: string): Type {\n        return new Type(internalName[0] === \"[\" ? Type.ARRAY : Type.OBJECT, internalName, 0, internalName.length);\n    }\n\n    /**\n     * Returns the Java type corresponding to the given method descriptor.\n     * Equivalent to <code>Type.getType(methodDescriptor)</code>.\n     *\n     * @param methodDescriptor a method descriptor.\n     * @return the Java type corresponding to the given method descriptor.\n     */\n    static getMethodType(methodDescriptor: string): Type {\n        return Type.getType(methodDescriptor, 0);\n    }\n\n    /**\n     * Returns the Java types corresponding to the argument types of the given\n     * method descriptor.\n     *\n     * @param methodDescriptor a method descriptor.\n     * @return the Java types corresponding to the argument types of the given\n     * method descriptor.\n     */\n    static getArgumentTypes(methodDescriptor: string): Type[] {\n        let off: number = 1;\n        let size: number = 0;\n        while ((true)) {\n            let car: string = methodDescriptor[off++];\n            if (car === \")\") {\n                break;\n            } else if (car === \"L\") {\n                while ((methodDescriptor[off++] !== \";\")) {\n                };\n                ++size;\n            } else if (car !== \"[\") {\n                ++size;\n            }\n        };\n        let args: Type[] = new Array(size);\n        off = 1;\n        size = 0;\n        while ((methodDescriptor[off] !== \")\")) {\n            args[size] = Type.getType(methodDescriptor, off);\n            off += args[size].len + (args[size].sort === Type.OBJECT ? 2 : 0);\n            size += 1;\n        };\n        return args;\n    }\n\n    /**\n     * Computes the size of the arguments and of the return value of a method.\n     *\n     * @param desc the descriptor of a method.\n     * @return the size of the arguments of the method (plus one for the\n     * implicit this argument), argSize, and the size of its return\n     * value, retSize, packed into a single int i =\n     * <tt>(argSize &lt;&lt; 2) | retSize</tt> (argSize is therefore equal to\n     * <tt>i &gt;&gt; 2</tt>, and retSize to <tt>i &amp; 0x03</tt>).\n     */\n    static getArgumentsAndReturnSizes(desc: string): number {\n        let n: number = 1;\n        let c: number = 1;\n        while ((true)) {\n            let car: string = desc.charAt(c++);\n            if (car === \")\") {\n                car = desc.charAt(c);\n                return n << 2 | (car === \"V\" ? 0 : (car === \"D\" || car === \"J\" ? 2 : 1));\n            } else if (car === \"L\") {\n                while ((desc.charAt(c++) !== \";\")) {\n                };\n                n += 1;\n            } else if (car === \"[\") {\n                while (((car = desc.charAt(c)) === \"[\")) {\n                    ++c;\n                };\n                if (car === \"D\" || car === \"J\") {\n                    n -= 1;\n                }\n            } else if (car === \"D\" || car === \"J\") {\n                n += 2;\n            } else {\n                n += 1;\n            }\n        };\n        return 0;\n    }\n\n    /**\n     * Returns the Java type corresponding to the given type descriptor. For\n     * method descriptors, buf is supposed to contain nothing more than the\n     * descriptor itself.\n     *\n     * @param buf a buffer containing a type descriptor.\n     * @param off the offset of this descriptor in the previous buffer.\n     * @return the Java type corresponding to the given type descriptor.\n     */\n    static getType(str: string, off: number = 0): Type {\n        let len: number;\n        let buf = \"\".concat(str);\n        switch (buf[off]) {\n            case \"V\":\n                return Type.VOID_TYPE;\n            case \"Z\":\n                return Type.BOOLEAN_TYPE;\n            case \"C\":\n                return Type.CHAR_TYPE;\n            case \"B\":\n                return Type.BYTE_TYPE;\n            case \"S\":\n                return Type.SHORT_TYPE;\n            case \"I\":\n                return Type.INT_TYPE;\n            case \"F\":\n                return Type.FLOAT_TYPE;\n            case \"J\":\n                return Type.LONG_TYPE;\n            case \"D\":\n                return Type.DOUBLE_TYPE;\n            case \"[\":\n                len = 1;\n                while ((buf[off + len] === \"[\")) {\n                    ++len;\n                };\n                if (buf[off + len] === \"L\") {\n                    ++len;\n                    while ((buf[off + len] !== \";\")) {\n                        ++len;\n                    };\n                }\n                return new Type(Type.ARRAY, buf, off, len + 1);\n            case \"L\":\n                len = 1;\n                while ((buf[off + len] !== \";\")) {\n                    ++len;\n                };\n                return new Type(Type.OBJECT, buf, off + 1, len - 1);\n            default:\n                return new Type(Type.METHOD, buf, off, buf.length - off);\n        }\n    }\n\n    /**\n       * Returns the internal name of the class corresponding to this object or\n       * array type. The internal name of a class is its fully qualified name (as\n       * returned by Class.getName(), where '.' are replaced by '/'. This method\n       * should only be used for an object or array type.\n       *\n       * @return the internal name of the class corresponding to this object type.\n       */\n    get internalName(): string {\n        return this.buf.substr(this.off, this.len);\n    }\n\n    /**\n     * Appends the descriptor corresponding to this Java type to the given\n     * string buffer.\n     *\n     * @param buf the string buffer to which the descriptor must be appended.\n     */\n    getDescriptor(buf: any = \"\"): any {\n        if (this.sort == Type.OBJECT) {\n            buf += (\"L\");\n            for (let i = 0; i < this.len; i++) {\n                buf += this.buf[i + this.off];\n            }\n            // buf.append(this.buf, off, len);\n            buf += (\";\");\n        }\n        else { // sort == ARRAY || sort == METHOD\n            for (let i = 0; i < this.len; i++) {\n                buf += this.buf[i + this.off];\n            }\n            // buf.append(this.buf, this.off, this.len);\n        }\n    }\n\n    /**\n        * Returns the size of values of this type. This method must not be used for\n        * method types.\n        *\n        * @return the size of values of this type, i.e., 2 for <tt>long</tt> and\n        * <tt>double</tt>, 0 for <tt>void</tt> and 1 otherwise.\n        */\n    get size(): number {\n        return this.buf == null ? (this.off & 255) : 1;\n    }\n\n    /**\n     * Tests if the given object is equal to this type.\n     *\n     * @param o the object to be compared to this type.\n     * @return <tt>true</tt> if the given object is equal to this type.\n     */\n    equals(o: any): boolean {\n        if (this === o) {\n            return true;\n        }\n        if (!(o != null && o instanceof Type)) {\n            return false;\n        }\n        let t: Type = o;\n        if (this.sort !== t.sort) {\n            return false;\n        }\n        if (this.sort >= Type.ARRAY) {\n            if (this.len !== t.len) {\n                return false;\n            }\n            for (let i: number = this.off, j: number = t.off, end: number = i + this.len; i < end; i++ , j++) {\n                if (this.buf[i] !== t.buf[j]) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Returns a hash code value for this type.\n     *\n     * @return a hash code value for this type.\n     */\n    hashCode(): number {\n        let hc: number = 13 * this.sort;\n        if (this.sort >= Type.ARRAY) {\n            for (let i: number = this.off, end: number = i + this.len; i < end; i++) {\n                hc = 17 * (hc + (this.buf[i]).charCodeAt(0));\n            }\n        }\n        return hc;\n    }\n\n    /**\n     * Returns a string representation of this type.\n     *\n     * @return the descriptor of this type.\n     */\n    toString(): string {\n        return this.getDescriptor();\n    }\n}\n","/*\n * ASM: a very small and fast Java bytecode manipulation framework\n * Copyright (c) 2000-2011 INRIA, France Telecom\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n * 3. Neither the name of the copyright holders nor the names of its\n *    contributors may be used to endorse or promote products derived from\n *    this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\n * THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\n/**\n * An {@link AnnotationVisitor} that generates annotations in bytecode form.\n *\n * @author Eric Bruneton\n * @author Eugene Kuleshov\n */\n\nimport type { ClassWriter } from \"./ClassWriter\";\nimport { AnnotationVisitor } from \"./AnnotationVisitor\";\nimport { ByteVector } from \"./ByteVector\";\nimport { Opcodes } from \"./Opcodes\";\nimport { Item } from \"./Item\";\nimport { TypePath } from \"./TypePath\";\nimport { Type } from \"./Type\"\n\n// import * as Long from 'long'\n\nexport class AnnotationWriter extends AnnotationVisitor {\n    /**\n     * The class writer TO which this annotation must be added.\n     */\n    private cw: ClassWriter;\n\n    /**\n     * The number of values in this annotation.\n     */\n    private size: number;\n\n    /**\n     * <tt>true<tt> if values are named, <tt>false</tt> otherwise. Annotation\n     * writers used for annotation default and annotation arrays use unnamed\n     * values.\n     */\n    private named: boolean;\n\n    /**\n     * The annotation values in bytecode form. This byte vector only contains\n     * the values themselves, i.e. the number of values must be stored as a\n     * unsigned short just before these bytes.\n     */\n    private bv: ByteVector;\n\n    /**\n     * The byte vector to be used to store the number of values of this\n     * annotation. See {@link #bv}.\n     */\n    private parent: ByteVector | null;\n\n    /**\n     * Where the number of values of this annotation must be stored in\n     * {@link #parent}.\n     */\n    private offset: number;\n\n    /**\n     * Next annotation writer. This field is used to store annotation lists.\n     */\n    next: AnnotationWriter | null = null;\n\n    /**\n     * Previous annotation writer. This field is used to store annotation lists.\n     */\n    prev: AnnotationWriter | null = null;\n\n    /**\n     * Constructs a new {@link AnnotationWriter}.\n     *\n     * @param cw\n     * the class writer to which this annotation must be added.\n     * @param named\n     * <tt>true<tt> if values are named, <tt>false</tt> otherwise.\n     * @param bv\n     * where the annotation values must be stored.\n     * @param parent\n     * where the number of annotation values must be stored.\n     * @param offset\n     * where in <tt>parent</tt> the number of annotation values must\n     * be stored.\n     */\n    constructor(cw: ClassWriter, named: boolean, bv: ByteVector, parent: ByteVector | null = null, offset: number) {\n        super(Opcodes.ASM5);\n        this.size = 0;\n        this.named = false;\n        this.offset = 0;\n        this.cw = cw;\n        this.named = named;\n        this.bv = bv;\n        this.parent = parent;\n        this.offset = offset;\n    }\n\n    public visit(name: string, value: any) {\n        ++this.size;\n        if (this.named) {\n            this.bv.putShort(this.cw.newUTF8(name));\n        }\n        if (typeof value === \"string\") {\n            this.bv.put12((\"s\").charCodeAt(0), this.cw.newUTF8(value));\n        } else if (typeof value === \"number\") {\n            this.bv.put12((\"B\").charCodeAt(0), this.cw.newInteger(value).index);\n        } else if (typeof value === \"boolean\") {\n            let v: number = (value) ? 1 : 0;\n            this.bv.put12((\"Z\").charCodeAt(0), this.cw.newInteger(v).index);\n        } else if (typeof value === \"string\") {\n            this.bv.put12((\"C\").charCodeAt(0), this.cw.newInteger((value).charCodeAt(0)).index);\n        } else if (typeof value === \"number\") {\n            this.bv.put12((\"S\").charCodeAt(0), this.cw.newInteger((value)).index);\n        } else if (value != null && value instanceof Type) {\n            this.bv.put12((\"c\").charCodeAt(0), this.cw.newUTF8((value).getDescriptor()));\n        } else if (value != null && value instanceof Array) {\n            let v: number[] = value as number[];\n            this.bv.put12((\"[\").charCodeAt(0), v.length);\n            for (let i: number = 0; i < v.length; i++) {\n                this.bv.put12((\"B\").charCodeAt(0), this.cw.newInteger(v[i]).index);\n            }\n        } else if (value != null && value instanceof Array) {\n            let v: boolean[] = <boolean[]>value;\n            this.bv.put12((\"[\").charCodeAt(0), v.length);\n            for (let i: number = 0; i < v.length; i++) {\n                this.bv.put12((\"Z\").charCodeAt(0), this.cw.newInteger(v[i] ? 1 : 0).index);\n            }\n        } else if (value != null && value instanceof Array) {\n            let v: number[] = value as number[];\n            this.bv.put12((\"[\").charCodeAt(0), v.length);\n            for (let i: number = 0; i < v.length; i++) {\n                this.bv.put12((\"S\").charCodeAt(0), this.cw.newInteger(v[i]).index);\n            }\n        } else if (value != null && value instanceof Array) {\n            let v: string[] = <string[]>value;\n            this.bv.put12((\"[\").charCodeAt(0), v.length);\n            for (let i: number = 0; i < v.length; i++) {\n                this.bv.put12((\"C\").charCodeAt(0), this.cw.newInteger((v[i]).charCodeAt(0)).index);\n            }\n        } else if (value != null && value instanceof Array) {\n            let v: number[] = value as number[];\n            this.bv.put12((\"[\").charCodeAt(0), v.length);\n            for (let i: number = 0; i < v.length; i++) {\n                this.bv.put12((\"I\").charCodeAt(0), this.cw.newInteger(v[i]).index);\n            }\n        } else if (value != null && value instanceof Array) {\n            let v: number[] = value as number[];\n            this.bv.put12((\"[\").charCodeAt(0), v.length);\n            for (let i: number = 0; i < v.length; i++) {\n                // break...\n                // this.bv.put12(('J').charCodeAt(0), this.cw.newLong(v[i]).index);\n            }\n        } else if (value != null && value instanceof Array) {\n            let v: number[] = value as number[];\n            this.bv.put12((\"[\").charCodeAt(0), v.length);\n            for (let i: number = 0; i < v.length; i++) {\n                this.bv.put12((\"F\").charCodeAt(0), this.cw.newFloat(v[i]).index);\n            }\n        } else if (value != null && value instanceof Array) {\n            let v: number[] = value as number[];\n            this.bv.put12((\"[\").charCodeAt(0), v.length);\n            for (let i: number = 0; i < v.length; i++) {\n                this.bv.put12((\"D\").charCodeAt(0), this.cw.newDouble(v[i]).index);\n            }\n        } else {\n            let i: Item = this.cw.newConstItem(value);\n            this.bv.put12((\".s.IFJDCS\".charAt(i.type)).charCodeAt(0), i.index);\n        }\n    }\n\n    public visitEnum(name: string, desc: string, value: string) {\n        ++this.size;\n        if (this.named) {\n            this.bv.putShort(this.cw.newUTF8(name));\n        }\n        this.bv.put12((\"e\").charCodeAt(0), this.cw.newUTF8(desc)).putShort(this.cw.newUTF8(value));\n    }\n\n    public visitAnnotation(name: string, desc: string): AnnotationVisitor {\n        ++this.size;\n        if (this.named) {\n            this.bv.putShort(this.cw.newUTF8(name));\n        }\n        this.bv.put12((\"@\").charCodeAt(0), this.cw.newUTF8(desc)).putShort(0);\n        return new AnnotationWriter(this.cw, true, this.bv, this.bv, this.bv.length - 2);\n    }\n\n    public visitArray(name: string): AnnotationVisitor {\n        ++this.size;\n        if (this.named) {\n            this.bv.putShort(this.cw.newUTF8(name));\n        }\n        this.bv.put12((\"[\").charCodeAt(0), 0);\n        return new AnnotationWriter(this.cw, false, this.bv, this.bv, this.bv.length - 2);\n    }\n\n    public visitEnd() {\n        if (this.parent != null) {\n            let data: Uint8Array = this.parent.data;\n            data[this.offset] = ((this.size >>> 8) | 0);\n            data[this.offset + 1] = (this.size | 0);\n        }\n    }\n\n    /**\n     * Returns the size of this annotation writer list.\n     *\n     * @return the size of this annotation writer list.\n     */\n    getSize(): number {\n        let size: number = 0;\n        let aw: AnnotationWriter | null = this;\n        while ((aw != null)) {\n            size += aw.bv.length;\n            aw = aw.next;\n        };\n        return size;\n    }\n\n    /**\n     * Puts the annotations of this annotation writer list into the given byte\n     * vector.\n     *\n     * @param out\n     * where the annotations must be put.\n     */\n    put(out: ByteVector) {\n        let n: number = 0;\n        let size: number = 2;\n        let aw: AnnotationWriter | null = this;\n        let last: AnnotationWriter | null = null;\n        while ((aw != null)) {\n            ++n;\n            size += aw.bv.length;\n            aw.visitEnd();\n            aw.prev = last;\n            last = aw;\n            aw = aw.next;\n        };\n        out.putInt(size);\n        out.putShort(n);\n        aw = last;\n        while ((aw != null)) {\n            out.putByteArray(aw.bv.data, 0, aw.bv.length);\n            aw = aw.prev;\n        };\n    }\n\n    /**\n     * Puts the given annotation lists into the given byte vector.\n     *\n     * @param panns\n     * an array of annotation writer lists.\n     * @param off\n     * index of the first annotation to be written.\n     * @param out\n     * where the annotations must be put.\n     */\n    static put(panns: AnnotationWriter[], off: number, out: ByteVector) {\n        let size: number = 1 + 2 * (panns.length - off);\n        for (let i: number = off; i < panns.length; ++i) {\n            size += panns[i] == null ? 0 : panns[i].getSize();\n        }\n        out.putInt(size).putByte(panns.length - off);\n        for (let i: number = off; i < panns.length; ++i) {\n            let aw: AnnotationWriter | null = panns[i];\n            let last: AnnotationWriter | null = null;\n            let n: number = 0;\n            while ((aw != null)) {\n                ++n;\n                aw.visitEnd();\n                aw.prev = last;\n                last = aw;\n                aw = aw.next;\n            };\n            out.putShort(n);\n            aw = last;\n            while ((aw != null)) {\n                out.putByteArray(aw.bv.data, 0, aw.bv.length);\n                aw = aw.prev;\n            };\n        }\n    }\n\n    /**\n     * Puts the given type reference and type path into the given bytevector.\n     * LOCAL_VARIABLE and RESOURCE_VARIABLE target types are not supported.\n     *\n     * @param typeRef\n     * a reference to the annotated type. See {@link TypeReference}.\n     * @param typePath\n     * the path to the annotated type argument, wildcard bound, array\n     * element type, or static inner type within 'typeRef'. May be\n     * <tt>null</tt> if the annotation targets 'typeRef' as a whole.\n     * @param out\n     * where the type reference and type path must be put.\n     */\n    static putTarget(typeRef: number, typePath: TypePath, out: ByteVector) {\n        switch ((typeRef >>> 24)) {\n            case 0:\n            case 1:\n            case 22:\n                out.putShort(typeRef >>> 16);\n                break;\n            case 19:\n            case 20:\n            case 21:\n                out.putByte(typeRef >>> 24);\n                break;\n            case 71:\n            case 72:\n            case 73:\n            case 74:\n            case 75:\n                out.putInt(typeRef);\n                break;\n            default:\n                out.put12(typeRef >>> 24, (typeRef & 16776960) >> 8);\n                break;\n        }\n        if (typePath == null) {\n            out.putByte(0);\n        } else {\n            let length: number = typePath.buf[typePath.offset] * 2 + 1;\n            out.putByteArray(typePath.buf, typePath.offset, length);\n        }\n    }\n}\n","/*\n * ASM: a very small and fast Java bytecode manipulation framework\n * Copyright (c) 2000-2011 INRIA, France Telecom\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n * 3. Neither the name of the copyright holders nor the names of its\n *    contributors may be used to endorse or promote products derived from\n *    this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\n * THE POSSIBILITY OF SUCH DAMAGE.\n */\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\n/**\n * A visitor to visit a Java class. The methods of this class must be called in\n * the following order: <tt>visit</tt> [ <tt>visitSource</tt> ] [\n * <tt>visitOuterClass</tt> ] ( <tt>visitAnnotation</tt> |\n * <tt>visitTypeAnnotation</tt> | <tt>visitAttribute</tt> )* (\n * <tt>visitInnerClass</tt> | <tt>visitField</tt> | <tt>visitMethod</tt> )*\n * <tt>visitEnd</tt>.\n *\n * @author Eric Bruneton\n */\nimport { Opcodes } from \"./Opcodes\"\nimport { Attribute } from \"./Attribute\"\nimport { AnnotationVisitor } from \"./AnnotationVisitor\"\nimport { TypePath } from \"./TypePath\"\nimport { FieldVisitor } from \"./FieldVisitor\"\nimport { MethodVisitor } from \"./MethodVisitor\"\nexport abstract class ClassVisitor {\n    /**\n     * The ASM API version implemented by this visitor. The value of this field\n     * must be one of {@link Opcodes#ASM4} or {@link Opcodes#ASM5}.\n     */\n    api: number;\n\n    /**\n     * The class visitor to which this visitor must delegate method calls. May\n     * be null.\n     */\n    cv: ClassVisitor | null;\n\n    /**\n     * Constructs a new {@link ClassVisitor}.\n     *\n     * @param api\n     * the ASM API version implemented by this visitor. Must be one\n     * of {@link Opcodes#ASM4} or {@link Opcodes#ASM5}.\n     * @param cv\n     * the class visitor to which this visitor must delegate method\n     * calls. May be null.\n     */\n    public constructor(api: number, cv: ClassVisitor | null = null) {\n        this.api = 0;\n        if (api !== Opcodes.ASM4 && api !== Opcodes.ASM5) {\n            throw new Error();\n        }\n        this.api = api;\n        this.cv = cv;\n    }\n\n    /**\n     * Visits the header of the class.\n     *\n     * @param version\n     * the class version.\n     * @param access\n     * the class's access flags (see {@link Opcodes}). This parameter\n     * also indicates if the class is deprecated.\n     * @param name\n     * the internal name of the class (see\n     * {@link Type#getInternalName() getInternalName}).\n     * @param signature\n     * the signature of this class. May be <tt>null</tt> if the class\n     * is not a generic one, and does not extend or implement generic\n     * classes or interfaces.\n     * @param superName\n     * the internal of name of the super class (see\n     * {@link Type#getInternalName() getInternalName}). For\n     * interfaces, the super class is {@link Object}. May be\n     * <tt>null</tt>, but only for the {@link Object} class.\n     * @param interfaces\n     * the internal names of the class's interfaces (see\n     * {@link Type#getInternalName() getInternalName}). May be\n     * <tt>null</tt>.\n     */\n    public visit(version: number, access: number, name: string, signature: string | null, superName: string | null, interfaces: string[] | null) {\n        if (this.cv != null) {\n            this.cv.visit(version, access, name, signature, superName, interfaces);\n        }\n    }\n\n    /**\n     * Visits the source of the class.\n     *\n     * @param source\n     * the name of the source file from which the class was compiled.\n     * May be <tt>null</tt>.\n     * @param debug\n     * additional debug information to compute the correspondance\n     * between source and compiled elements of the class. May be\n     * <tt>null</tt>.\n     */\n    public visitSource(source: string | null, debug: string | null) {\n        if (this.cv != null) {\n            this.cv.visitSource(source, debug);\n        }\n    }\n\n    /**\n     * Visits the enclosing class of the class. This method must be called only\n     * if the class has an enclosing class.\n     *\n     * @param owner\n     * internal name of the enclosing class of the class.\n     * @param name\n     * the name of the method that contains the class, or\n     * <tt>null</tt> if the class is not enclosed in a method of its\n     * enclosing class.\n     * @param desc\n     * the descriptor of the method that contains the class, or\n     * <tt>null</tt> if the class is not enclosed in a method of its\n     * enclosing class.\n     */\n    public visitOuterClass(owner: string, name: string | null, desc: string | null) {\n        if (this.cv != null) {\n            this.cv.visitOuterClass(owner, name, desc);\n        }\n    }\n\n    /**\n     * Visits an annotation of the class.\n     *\n     * @param desc\n     * the class descriptor of the annotation class.\n     * @param visible\n     * <tt>true</tt> if the annotation is visible at runtime.\n     * @return a visitor to visit the annotation values, or <tt>null</tt> if\n     * this visitor is not interested in visiting this annotation.\n     */\n    public visitAnnotation(desc: string | null, visible: boolean): AnnotationVisitor | null {\n        if (this.cv != null) {\n            return this.cv.visitAnnotation(desc, visible);\n        }\n        return null;\n    }\n\n    /**\n     * Visits an annotation on a type in the class signature.\n     *\n     * @param typeRef\n     * a reference to the annotated type. The sort of this type\n     * reference must be {@link TypeReference#CLASS_TYPE_PARAMETER\n     * CLASS_TYPE_PARAMETER},\n     * {@link TypeReference#CLASS_TYPE_PARAMETER_BOUND\n     * CLASS_TYPE_PARAMETER_BOUND} or\n     * {@link TypeReference#CLASS_EXTENDS CLASS_EXTENDS}. See\n     * {@link TypeReference}.\n     * @param typePath\n     * the path to the annotated type argument, wildcard bound, array\n     * element type, or static inner type within 'typeRef'. May be\n     * <tt>null</tt> if the annotation targets 'typeRef' as a whole.\n     * @param desc\n     * the class descriptor of the annotation class.\n     * @param visible\n     * <tt>true</tt> if the annotation is visible at runtime.\n     * @return a visitor to visit the annotation values, or <tt>null</tt> if\n     * this visitor is not interested in visiting this annotation.\n     */\n    public visitTypeAnnotation(typeRef: number, typePath: TypePath | null, desc: string | null, visible: boolean): AnnotationVisitor | null {\n        if (this.api < Opcodes.ASM5) {\n            throw new Error();\n        }\n        if (this.cv != null) {\n            return this.cv.visitTypeAnnotation(typeRef, typePath, desc, visible);\n        }\n        return null;\n    }\n\n    /**\n     * Visits a non standard attribute of the class.\n     *\n     * @param attr\n     * an attribute.\n     */\n    public visitAttribute(attr: Attribute) {\n        if (this.cv != null) {\n            this.cv.visitAttribute(attr);\n        }\n    }\n\n    /**\n     * Visits information about an inner class. This inner class is not\n     * necessarily a member of the class being visited.\n     *\n     * @param name\n     * the internal name of an inner class (see\n     * {@link Type#getInternalName() getInternalName}).\n     * @param outerName\n     * the internal name of the class to which the inner class\n     * belongs (see {@link Type#getInternalName() getInternalName}).\n     * May be <tt>null</tt> for not member classes.\n     * @param innerName\n     * the (simple) name of the inner class inside its enclosing\n     * class. May be <tt>null</tt> for anonymous inner classes.\n     * @param access\n     * the access flags of the inner class as originally declared in\n     * the enclosing class.\n     */\n    public visitInnerClass(name: string, outerName: string, innerName: string | null, access: number) {\n        if (this.cv != null) {\n            this.cv.visitInnerClass(name, outerName, innerName, access);\n        }\n    }\n\n    /**\n     * Visits a field of the class.\n     *\n     * @param access\n     * the field's access flags (see {@link Opcodes}). This parameter\n     * also indicates if the field is synthetic and/or deprecated.\n     * @param name\n     * the field's name.\n     * @param desc\n     * the field's descriptor (see {@link Type Type}).\n     * @param signature\n     * the field's signature. May be <tt>null</tt> if the field's\n     * type does not use generic types.\n     * @param value\n     * the field's initial value. This parameter, which may be\n     * <tt>null</tt> if the field does not have an initial value,\n     * must be an {@link Integer}, a {@link Float}, a {@link Long}, a\n     * {@link Double} or a {@link String} (for <tt>int</tt>,\n     * <tt>float</tt>, <tt>long</tt> or <tt>String</tt> fields\n     * respectively). <i>This parameter is only used for static\n     * fields</i>. Its value is ignored for non static fields, which\n     * must be initialized through bytecode instructions in\n     * constructors or methods.\n     * @return a visitor to visit field annotations and attributes, or\n     * <tt>null</tt> if this class visitor is not interested in visiting\n     * these annotations and attributes.\n     */\n    public visitField(access: number, name: string, desc: string | null, signature: string | null, value: any): FieldVisitor | null {\n        if (this.cv != null) {\n            return this.cv.visitField(access, name, desc, signature, value);\n        }\n        return null;\n    }\n\n    /**\n     * Visits a method of the class. This method <i>must</i> return a new\n     * {@link MethodVisitor} instance (or <tt>null</tt>) each time it is called,\n     * i.e., it should not return a previously returned visitor.\n     *\n     * @param access\n     * the method's access flags (see {@link Opcodes}). This\n     * parameter also indicates if the method is synthetic and/or\n     * deprecated.\n     * @param name\n     * the method's name.\n     * @param desc\n     * the method's descriptor (see {@link Type Type}).\n     * @param signature\n     * the method's signature. May be <tt>null</tt> if the method\n     * parameters, return type and exceptions do not use generic\n     * types.\n     * @param exceptions\n     * the internal names of the method's exception classes (see\n     * {@link Type#getInternalName() getInternalName}). May be\n     * <tt>null</tt>.\n     * @return an object to visit the byte code of the method, or <tt>null</tt>\n     * if this class visitor is not interested in visiting the code of\n     * this method.\n     */\n    public visitMethod(access: number, name: string, desc: string, signature: string | null, exceptions: string[] | null): MethodVisitor | null {\n        if (this.cv != null) {\n            return this.cv.visitMethod(access, name, desc, signature, exceptions);\n        }\n        return null;\n    }\n\n    /**\n     * Visits the end of the class. This method, which is the last one to be\n     * called, is used to inform the visitor that all the fields and methods of\n     * the class have been visited.\n     */\n    public visitEnd() {\n        if (this.cv != null) {\n            this.cv.visitEnd();\n        }\n    }\n}\n","/*\n * ASM: a very small and fast Java bytecode manipulation framework\n * Copyright (c) 2000-2011 INRIA, France Telecom\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n * 3. Neither the name of the copyright holders nor the names of its\n *    contributors may be used to endorse or promote products derived from\n *    this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\n * THE POSSIBILITY OF SUCH DAMAGE.\n */\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\n/**\n * A visitor to visit a Java field. The methods of this class must be called in\n * the following order: ( <tt>visitAnnotation</tt> |\n * <tt>visitTypeAnnotation</tt> | <tt>visitAttribute</tt> )* <tt>visitEnd</tt>.\n *\n * @author Eric Bruneton\n */\nimport { Opcodes } from \"./Opcodes\"\nimport { TypePath } from \"./TypePath\"\nimport { AnnotationVisitor } from \"./AnnotationVisitor\"\nimport { Attribute } from \"./Attribute\"\n\nexport abstract class FieldVisitor {\n    /**\n     * The ASM API version implemented by this visitor. The value of this field\n     * must be one of {@link Opcodes#ASM4} or {@link Opcodes#ASM5}.\n     */\n    api: number;\n\n    /**\n     * The field visitor to which this visitor must delegate method calls. May\n     * be null.\n     */\n    fv: FieldVisitor | null;\n\n    /**\n     * Constructs a new {@link FieldVisitor}.\n     *\n     * @param api\n     * the ASM API version implemented by this visitor. Must be one\n     * of {@link Opcodes#ASM4} or {@link Opcodes#ASM5}.\n     * @param fv\n     * the field visitor to which this visitor must delegate method\n     * calls. May be null.\n     */\n    public constructor(api: number, fv: FieldVisitor | null = null) {\n        this.api = 0;\n        if (api !== Opcodes.ASM4 && api !== Opcodes.ASM5) {\n            throw new Error();\n        }\n        this.api = api;\n        this.fv = fv;\n    }\n\n    /**\n     * Visits an annotation of the field.\n     *\n     * @param desc\n     * the class descriptor of the annotation class.\n     * @param visible\n     * <tt>true</tt> if the annotation is visible at runtime.\n     * @return a visitor to visit the annotation values, or <tt>null</tt> if\n     * this visitor is not interested in visiting this annotation.\n     */\n    public visitAnnotation(desc: string | null, visible: boolean): AnnotationVisitor | null {\n        if (this.fv != null) {\n            return this.fv.visitAnnotation(desc, visible);\n        }\n        return null;\n    }\n\n    /**\n     * Visits an annotation on the type of the field.\n     *\n     * @param typeRef\n     * a reference to the annotated type. The sort of this type\n     * reference must be {@link TypeReference#FIELD FIELD}. See\n     * {@link TypeReference}.\n     * @param typePath\n     * the path to the annotated type argument, wildcard bound, array\n     * element type, or static inner type within 'typeRef'. May be\n     * <tt>null</tt> if the annotation targets 'typeRef' as a whole.\n     * @param desc\n     * the class descriptor of the annotation class.\n     * @param visible\n     * <tt>true</tt> if the annotation is visible at runtime.\n     * @return a visitor to visit the annotation values, or <tt>null</tt> if\n     * this visitor is not interested in visiting this annotation.\n     */\n    public visitTypeAnnotation(typeRef: number, typePath: TypePath | null, desc: string | null, visible: boolean): AnnotationVisitor | null {\n        if (this.api < Opcodes.ASM5) {\n            throw new Error();\n        }\n        if (this.fv != null) {\n            return this.fv.visitTypeAnnotation(typeRef, typePath, desc, visible);\n        }\n        return null;\n    }\n\n    /**\n     * Visits a non standard attribute of the field.\n     *\n     * @param attr\n     * an attribute.\n     */\n    public visitAttribute(attr: Attribute) {\n        if (this.fv != null) {\n            this.fv.visitAttribute(attr);\n        }\n    }\n\n    /**\n     * Visits the end of the field. This method, which is the last one to be\n     * called, is used to inform the visitor that all the annotations and\n     * attributes of the field have been visited.\n     */\n    public visitEnd() {\n        if (this.fv != null) {\n            this.fv.visitEnd();\n        }\n    }\n}\n\n\n\n","/*\n * ASM: a very small and fast Java bytecode manipulation framework\n * Copyright (c) 2000-2011 INRIA, France Telecom\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n * 3. Neither the name of the copyright holders nor the names of its\n *    contributors may be used to endorse or promote products derived from\n *    this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\n * THE POSSIBILITY OF SUCH DAMAGE.\n */\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\n/**\n * An {@link FieldVisitor} that generates Java fields in bytecode form.\n *\n * @author Eric Bruneton\n */\nimport { AnnotationVisitor } from \"./AnnotationVisitor\"\nimport { AnnotationWriter } from \"./AnnotationWriter\"\nimport { Attribute } from \"./Attribute\"\nimport { ByteVector } from \"./ByteVector\"\nimport { ClassReader } from \"./ClassReader\"\nimport { ClassWriter } from \"./ClassWriter\"\nimport { FieldVisitor } from \"./FieldVisitor\"\nimport { Opcodes } from \"./Opcodes\"\nimport { TypePath } from \"./TypePath\"\n\nexport class FieldWriter extends FieldVisitor {\n    /**\n     * The class writer to which this field must be added.\n     */\n    private cw: ClassWriter;\n\n    /**\n     * Access flags of this field.\n     */\n    private access: number;\n\n    /**\n     * The index of the constant pool item that contains the name of this\n     * method.\n     */\n    private name: number;\n\n    /**\n     * The index of the constant pool item that contains the descriptor of this\n     * field.\n     */\n    private desc: number;\n\n    /**\n     * The index of the constant pool item that contains the signature of this\n     * field.\n     */\n    private signature: number;\n\n    /**\n     * The index of the constant pool item that contains the constant value of\n     * this field.\n     */\n    private value: number;\n\n    /**\n     * The runtime visible annotations of this field. May be <tt>null</tt>.\n     */\n    private anns!: AnnotationWriter;\n\n    /**\n     * The runtime invisible annotations of this field. May be <tt>null</tt>.\n     */\n    private ianns!: AnnotationWriter;\n\n    /**\n     * The runtime visible type annotations of this field. May be <tt>null</tt>.\n     */\n    private tanns!: AnnotationWriter;\n\n    /**\n     * The runtime invisible type annotations of this field. May be\n     * <tt>null</tt>.\n     */\n    private itanns!: AnnotationWriter;\n\n    /**\n     * The non standard attributes of this field. May be <tt>null</tt>.\n     */\n    private attrs!: Attribute;\n\n    /**\n     * Constructs a new {@link FieldWriter}.\n     *\n     * @param cw\n     * the class writer to which this field must be added.\n     * @param access\n     * the field's access flags (see {@link Opcodes}).\n     * @param name\n     * the field's name.\n     * @param desc\n     * the field's descriptor (see {@link Type}).\n     * @param signature\n     * the field's signature. May be <tt>null</tt>.\n     * @param value\n     * the field's constant value. May be <tt>null</tt>.\n     */\n    constructor(cw: ClassWriter, access: number, name: string, desc: string, signature: string, value: any) {\n        super(Opcodes.ASM5);\n        this.access = 0;\n        this.name = 0;\n        this.desc = 0;\n        this.signature = 0;\n        this.value = 0;\n        if (cw.firstField == null) {\n            cw.firstField = this;\n        } else {\n            cw.lastField.fv = this;\n        }\n        cw.lastField = this;\n        this.cw = cw;\n        this.access = access;\n        this.name = cw.newUTF8(name);\n        this.desc = cw.newUTF8(desc);\n        if (ClassReader.SIGNATURES && signature != null) {\n            this.signature = cw.newUTF8(signature);\n        }\n        if (value != null) {\n            this.value = cw.newConstItem(value).index;\n        }\n    }\n\n    public visitAnnotation(desc: string, visible: boolean): AnnotationVisitor | null {\n        if (!ClassReader.ANNOTATIONS) {\n            return null;\n        }\n        let bv: ByteVector = new ByteVector();\n        bv.putShort(this.cw.newUTF8(desc)).putShort(0);\n        let aw: AnnotationWriter = new AnnotationWriter(this.cw, true, bv, bv, 2);\n        if (visible) {\n            aw.next = this.anns;\n            this.anns = aw;\n        } else {\n            aw.next = this.ianns;\n            this.ianns = aw;\n        }\n        return aw;\n    }\n\n    public visitTypeAnnotation(typeRef: number, typePath: TypePath, desc: string, visible: boolean): AnnotationVisitor | null {\n        if (!ClassReader.ANNOTATIONS) {\n            return null;\n        }\n        let bv: ByteVector = new ByteVector();\n        AnnotationWriter.putTarget(typeRef, typePath, bv);\n        bv.putShort(this.cw.newUTF8(desc)).putShort(0);\n        let aw: AnnotationWriter = new AnnotationWriter(this.cw, true, bv, bv, bv.length - 2);\n        if (visible) {\n            aw.next = this.tanns;\n            this.tanns = aw;\n        } else {\n            aw.next = this.itanns;\n            this.itanns = aw;\n        }\n        return aw;\n    }\n\n    public visitAttribute(attr: Attribute) {\n        attr.next = this.attrs;\n        this.attrs = attr;\n    }\n\n    public visitEnd() {\n    }\n\n    /**\n     * Returns the size of this field.\n     *\n     * @return the size of this field.\n     */\n    getSize(): number {\n        let size: number = 8;\n        if (this.value !== 0) {\n            this.cw.newUTF8(\"ConstantValue\");\n            size += 8;\n        }\n        if ((this.access & Opcodes.ACC_SYNTHETIC) !== 0) {\n            if ((this.cw.version & 65535) < Opcodes.V1_5 || (this.access & ClassWriter.ACC_SYNTHETIC_ATTRIBUTE) !== 0) {\n                this.cw.newUTF8(\"Synthetic\");\n                size += 6;\n            }\n        }\n        if ((this.access & Opcodes.ACC_DEPRECATED) !== 0) {\n            this.cw.newUTF8(\"Deprecated\");\n            size += 6;\n        }\n        if (ClassReader.SIGNATURES && this.signature !== 0) {\n            this.cw.newUTF8(\"Signature\");\n            size += 8;\n        }\n        if (ClassReader.ANNOTATIONS && this.anns != null) {\n            this.cw.newUTF8(\"RuntimeVisibleAnnotations\");\n            size += 8 + this.anns.getSize();\n        }\n        if (ClassReader.ANNOTATIONS && this.ianns != null) {\n            this.cw.newUTF8(\"RuntimeInvisibleAnnotations\");\n            size += 8 + this.ianns.getSize();\n        }\n        if (ClassReader.ANNOTATIONS && this.tanns != null) {\n            this.cw.newUTF8(\"RuntimeVisibleTypeAnnotations\");\n            size += 8 + this.tanns.getSize();\n        }\n        if (ClassReader.ANNOTATIONS && this.itanns != null) {\n            this.cw.newUTF8(\"RuntimeInvisibleTypeAnnotations\");\n            size += 8 + this.itanns.getSize();\n        }\n        if (this.attrs != null) {\n            size += this.attrs.getSize(this.cw, null, 0, -1, -1);\n        }\n        return size;\n    }\n\n    /**\n     * Puts the content of this field into the given byte vector.\n     *\n     * @param out\n     * where the content of this field must be put.\n     */\n    put(out: ByteVector) {\n        let FACTOR: number = ClassWriter.TO_ACC_SYNTHETIC_$LI$();\n        let mask: number = Opcodes.ACC_DEPRECATED | ClassWriter.ACC_SYNTHETIC_ATTRIBUTE | (((this.access & ClassWriter.ACC_SYNTHETIC_ATTRIBUTE) / FACTOR | 0));\n        out.putShort(this.access & ~mask).putShort(this.name).putShort(this.desc);\n        let attributeCount: number = 0;\n        if (this.value !== 0) {\n            ++attributeCount;\n        }\n        if ((this.access & Opcodes.ACC_SYNTHETIC) !== 0) {\n            if ((this.cw.version & 65535) < Opcodes.V1_5 || (this.access & ClassWriter.ACC_SYNTHETIC_ATTRIBUTE) !== 0) {\n                ++attributeCount;\n            }\n        }\n        if ((this.access & Opcodes.ACC_DEPRECATED) !== 0) {\n            ++attributeCount;\n        }\n        if (ClassReader.SIGNATURES && this.signature !== 0) {\n            ++attributeCount;\n        }\n        if (ClassReader.ANNOTATIONS && this.anns != null) {\n            ++attributeCount;\n        }\n        if (ClassReader.ANNOTATIONS && this.ianns != null) {\n            ++attributeCount;\n        }\n        if (ClassReader.ANNOTATIONS && this.tanns != null) {\n            ++attributeCount;\n        }\n        if (ClassReader.ANNOTATIONS && this.itanns != null) {\n            ++attributeCount;\n        }\n        if (this.attrs != null) {\n            attributeCount += this.attrs.getCount();\n        }\n        out.putShort(attributeCount);\n        if (this.value !== 0) {\n            out.putShort(this.cw.newUTF8(\"ConstantValue\"));\n            out.putInt(2).putShort(this.value);\n        }\n        if ((this.access & Opcodes.ACC_SYNTHETIC) !== 0) {\n            if ((this.cw.version & 65535) < Opcodes.V1_5 || (this.access & ClassWriter.ACC_SYNTHETIC_ATTRIBUTE) !== 0) {\n                out.putShort(this.cw.newUTF8(\"Synthetic\")).putInt(0);\n            }\n        }\n        if ((this.access & Opcodes.ACC_DEPRECATED) !== 0) {\n            out.putShort(this.cw.newUTF8(\"Deprecated\")).putInt(0);\n        }\n        if (ClassReader.SIGNATURES && this.signature !== 0) {\n            out.putShort(this.cw.newUTF8(\"Signature\"));\n            out.putInt(2).putShort(this.signature);\n        }\n        if (ClassReader.ANNOTATIONS && this.anns != null) {\n            out.putShort(this.cw.newUTF8(\"RuntimeVisibleAnnotations\"));\n            this.anns.put(out);\n        }\n        if (ClassReader.ANNOTATIONS && this.ianns != null) {\n            out.putShort(this.cw.newUTF8(\"RuntimeInvisibleAnnotations\"));\n            this.ianns.put(out);\n        }\n        if (ClassReader.ANNOTATIONS && this.tanns != null) {\n            out.putShort(this.cw.newUTF8(\"RuntimeVisibleTypeAnnotations\"));\n            this.tanns.put(out);\n        }\n        if (ClassReader.ANNOTATIONS && this.itanns != null) {\n            out.putShort(this.cw.newUTF8(\"RuntimeInvisibleTypeAnnotations\"));\n            this.itanns.put(out);\n        }\n        if (this.attrs != null) {\n            this.attrs.put(this.cw, null, 0, -1, -1, out);\n        }\n    }\n}\n","/*\r\n Copyright 2013 Daniel Wirtz <dcode@dcode.io>\r\n Copyright 2009 The Closure Library Authors. All Rights Reserved.\r\n\r\n Licensed under the Apache License, Version 2.0 (the \"License\");\r\n you may not use this file except in compliance with the License.\r\n You may obtain a copy of the License at\r\n\r\n http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n Unless required by applicable law or agreed to in writing, software\r\n distributed under the License is distributed on an \"AS-IS\" BASIS,\r\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n See the License for the specific language governing permissions and\r\n limitations under the License.\r\n */\r\n\r\n/**\r\n * @license long.js (c) 2013 Daniel Wirtz <dcode@dcode.io>\r\n * Released under the Apache License, Version 2.0\r\n * see: https://github.com/dcodeIO/long.js for details\r\n */\r\n(function(global, factory) {\r\n\r\n    /* AMD */ if (typeof define === 'function' && define[\"amd\"])\r\n        define([], factory);\r\n    /* CommonJS */ else if (typeof require === 'function' && typeof module === \"object\" && module && module[\"exports\"])\r\n        module[\"exports\"] = factory();\r\n    /* Global */ else\r\n        (global[\"dcodeIO\"] = global[\"dcodeIO\"] || {})[\"Long\"] = factory();\r\n\r\n})(this, function() {\r\n    \"use strict\";\r\n\r\n    /**\r\n     * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n     *  See the from* functions below for more convenient ways of constructing Longs.\r\n     * @exports Long\r\n     * @class A Long class for representing a 64 bit two's-complement integer value.\r\n     * @param {number} low The low (signed) 32 bits of the long\r\n     * @param {number} high The high (signed) 32 bits of the long\r\n     * @param {boolean=} unsigned Whether unsigned or not, defaults to `false` for signed\r\n     * @constructor\r\n     */\r\n    function Long(low, high, unsigned) {\r\n\r\n        /**\r\n         * The low 32 bits as a signed value.\r\n         * @type {number}\r\n         */\r\n        this.low = low | 0;\r\n\r\n        /**\r\n         * The high 32 bits as a signed value.\r\n         * @type {number}\r\n         */\r\n        this.high = high | 0;\r\n\r\n        /**\r\n         * Whether unsigned or not.\r\n         * @type {boolean}\r\n         */\r\n        this.unsigned = !!unsigned;\r\n    }\r\n\r\n    // The internal representation of a long is the two given signed, 32-bit values.\r\n    // We use 32-bit pieces because these are the size of integers on which\r\n    // Javascript performs bit-operations.  For operations like addition and\r\n    // multiplication, we split each number into 16 bit pieces, which can easily be\r\n    // multiplied within Javascript's floating-point representation without overflow\r\n    // or change in sign.\r\n    //\r\n    // In the algorithms below, we frequently reduce the negative case to the\r\n    // positive case by negating the input(s) and then post-processing the result.\r\n    // Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n    // (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n    // a positive number, it overflows back into a negative).  Not handling this\r\n    // case would often result in infinite recursion.\r\n    //\r\n    // Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n    // methods on which they depend.\r\n\r\n    /**\r\n     * An indicator used to reliably determine if an object is a Long or not.\r\n     * @type {boolean}\r\n     * @const\r\n     * @private\r\n     */\r\n    Long.prototype.__isLong__;\r\n\r\n    Object.defineProperty(Long.prototype, \"__isLong__\", {\r\n        value: true,\r\n        enumerable: false,\r\n        configurable: false\r\n    });\r\n\r\n    /**\r\n     * @function\r\n     * @param {*} obj Object\r\n     * @returns {boolean}\r\n     * @inner\r\n     */\r\n    function isLong(obj) {\r\n        return (obj && obj[\"__isLong__\"]) === true;\r\n    }\r\n\r\n    /**\r\n     * Tests if the specified object is a Long.\r\n     * @function\r\n     * @param {*} obj Object\r\n     * @returns {boolean}\r\n     */\r\n    Long.isLong = isLong;\r\n\r\n    /**\r\n     * A cache of the Long representations of small integer values.\r\n     * @type {!Object}\r\n     * @inner\r\n     */\r\n    var INT_CACHE = {};\r\n\r\n    /**\r\n     * A cache of the Long representations of small unsigned integer values.\r\n     * @type {!Object}\r\n     * @inner\r\n     */\r\n    var UINT_CACHE = {};\r\n\r\n    /**\r\n     * @param {number} value\r\n     * @param {boolean=} unsigned\r\n     * @returns {!Long}\r\n     * @inner\r\n     */\r\n    function fromInt(value, unsigned) {\r\n        var obj, cachedObj, cache;\r\n        if (unsigned) {\r\n            value >>>= 0;\r\n            if (cache = (0 <= value && value < 256)) {\r\n                cachedObj = UINT_CACHE[value];\r\n                if (cachedObj)\r\n                    return cachedObj;\r\n            }\r\n            obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n            if (cache)\r\n                UINT_CACHE[value] = obj;\r\n            return obj;\r\n        } else {\r\n            value |= 0;\r\n            if (cache = (-128 <= value && value < 128)) {\r\n                cachedObj = INT_CACHE[value];\r\n                if (cachedObj)\r\n                    return cachedObj;\r\n            }\r\n            obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n            if (cache)\r\n                INT_CACHE[value] = obj;\r\n            return obj;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns a Long representing the given 32 bit integer value.\r\n     * @function\r\n     * @param {number} value The 32 bit integer in question\r\n     * @param {boolean=} unsigned Whether unsigned or not, defaults to `false` for signed\r\n     * @returns {!Long} The corresponding Long value\r\n     */\r\n    Long.fromInt = fromInt;\r\n\r\n    /**\r\n     * @param {number} value\r\n     * @param {boolean=} unsigned\r\n     * @returns {!Long}\r\n     * @inner\r\n     */\r\n    function fromNumber(value, unsigned) {\r\n        if (isNaN(value) || !isFinite(value))\r\n            return unsigned ? UZERO : ZERO;\r\n        if (unsigned) {\r\n            if (value < 0)\r\n                return UZERO;\r\n            if (value >= TWO_PWR_64_DBL)\r\n                return MAX_UNSIGNED_VALUE;\r\n        } else {\r\n            if (value <= -TWO_PWR_63_DBL)\r\n                return MIN_VALUE;\r\n            if (value + 1 >= TWO_PWR_63_DBL)\r\n                return MAX_VALUE;\r\n        }\r\n        if (value < 0)\r\n            return fromNumber(-value, unsigned).neg();\r\n        return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n    }\r\n\r\n    /**\r\n     * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n     * @function\r\n     * @param {number} value The number in question\r\n     * @param {boolean=} unsigned Whether unsigned or not, defaults to `false` for signed\r\n     * @returns {!Long} The corresponding Long value\r\n     */\r\n    Long.fromNumber = fromNumber;\r\n\r\n    /**\r\n     * @param {number} lowBits\r\n     * @param {number} highBits\r\n     * @param {boolean=} unsigned\r\n     * @returns {!Long}\r\n     * @inner\r\n     */\r\n    function fromBits(lowBits, highBits, unsigned) {\r\n        return new Long(lowBits, highBits, unsigned);\r\n    }\r\n\r\n    /**\r\n     * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n     *  assumed to use 32 bits.\r\n     * @function\r\n     * @param {number} lowBits The low 32 bits\r\n     * @param {number} highBits The high 32 bits\r\n     * @param {boolean=} unsigned Whether unsigned or not, defaults to `false` for signed\r\n     * @returns {!Long} The corresponding Long value\r\n     */\r\n    Long.fromBits = fromBits;\r\n\r\n    /**\r\n     * @function\r\n     * @param {number} base\r\n     * @param {number} exponent\r\n     * @returns {number}\r\n     * @inner\r\n     */\r\n    var pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n    /**\r\n     * @param {string} str\r\n     * @param {(boolean|number)=} unsigned\r\n     * @param {number=} radix\r\n     * @returns {!Long}\r\n     * @inner\r\n     */\r\n    function fromString(str, unsigned, radix) {\r\n        if (str.length === 0)\r\n            throw Error('empty string');\r\n        if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n            return ZERO;\r\n        if (typeof unsigned === 'number') {\r\n            // For goog.math.long compatibility\r\n            radix = unsigned,\r\n            unsigned = false;\r\n        } else {\r\n            unsigned = !! unsigned;\r\n        }\r\n        radix = radix || 10;\r\n        if (radix < 2 || 36 < radix)\r\n            throw RangeError('radix');\r\n\r\n        var p;\r\n        if ((p = str.indexOf('-')) > 0)\r\n            throw Error('interior hyphen');\r\n        else if (p === 0) {\r\n            return fromString(str.substring(1), unsigned, radix).neg();\r\n        }\r\n\r\n        // Do several (8) digits each time through the loop, so as to\r\n        // minimize the calls to the very expensive emulated div.\r\n        var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n        var result = ZERO;\r\n        for (var i = 0; i < str.length; i += 8) {\r\n            var size = Math.min(8, str.length - i),\r\n                value = parseInt(str.substring(i, i + size), radix);\r\n            if (size < 8) {\r\n                var power = fromNumber(pow_dbl(radix, size));\r\n                result = result.mul(power).add(fromNumber(value));\r\n            } else {\r\n                result = result.mul(radixToPower);\r\n                result = result.add(fromNumber(value));\r\n            }\r\n        }\r\n        result.unsigned = unsigned;\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Returns a Long representation of the given string, written using the specified radix.\r\n     * @function\r\n     * @param {string} str The textual representation of the Long\r\n     * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to `false` for signed\r\n     * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n     * @returns {!Long} The corresponding Long value\r\n     */\r\n    Long.fromString = fromString;\r\n\r\n    /**\r\n     * @function\r\n     * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n     * @returns {!Long}\r\n     * @inner\r\n     */\r\n    function fromValue(val) {\r\n        if (val /* is compatible */ instanceof Long)\r\n            return val;\r\n        if (typeof val === 'number')\r\n            return fromNumber(val);\r\n        if (typeof val === 'string')\r\n            return fromString(val);\r\n        // Throws for non-objects, converts non-instanceof Long:\r\n        return fromBits(val.low, val.high, val.unsigned);\r\n    }\r\n\r\n    /**\r\n     * Converts the specified value to a Long.\r\n     * @function\r\n     * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n     * @returns {!Long}\r\n     */\r\n    Long.fromValue = fromValue;\r\n\r\n    // NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n    // no runtime penalty for these.\r\n\r\n    /**\r\n     * @type {number}\r\n     * @const\r\n     * @inner\r\n     */\r\n    var TWO_PWR_16_DBL = 1 << 16;\r\n\r\n    /**\r\n     * @type {number}\r\n     * @const\r\n     * @inner\r\n     */\r\n    var TWO_PWR_24_DBL = 1 << 24;\r\n\r\n    /**\r\n     * @type {number}\r\n     * @const\r\n     * @inner\r\n     */\r\n    var TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n    /**\r\n     * @type {number}\r\n     * @const\r\n     * @inner\r\n     */\r\n    var TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n    /**\r\n     * @type {number}\r\n     * @const\r\n     * @inner\r\n     */\r\n    var TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n    /**\r\n     * @type {!Long}\r\n     * @const\r\n     * @inner\r\n     */\r\n    var TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n    /**\r\n     * @type {!Long}\r\n     * @inner\r\n     */\r\n    var ZERO = fromInt(0);\r\n\r\n    /**\r\n     * Signed zero.\r\n     * @type {!Long}\r\n     */\r\n    Long.ZERO = ZERO;\r\n\r\n    /**\r\n     * @type {!Long}\r\n     * @inner\r\n     */\r\n    var UZERO = fromInt(0, true);\r\n\r\n    /**\r\n     * Unsigned zero.\r\n     * @type {!Long}\r\n     */\r\n    Long.UZERO = UZERO;\r\n\r\n    /**\r\n     * @type {!Long}\r\n     * @inner\r\n     */\r\n    var ONE = fromInt(1);\r\n\r\n    /**\r\n     * Signed one.\r\n     * @type {!Long}\r\n     */\r\n    Long.ONE = ONE;\r\n\r\n    /**\r\n     * @type {!Long}\r\n     * @inner\r\n     */\r\n    var UONE = fromInt(1, true);\r\n\r\n    /**\r\n     * Unsigned one.\r\n     * @type {!Long}\r\n     */\r\n    Long.UONE = UONE;\r\n\r\n    /**\r\n     * @type {!Long}\r\n     * @inner\r\n     */\r\n    var NEG_ONE = fromInt(-1);\r\n\r\n    /**\r\n     * Signed negative one.\r\n     * @type {!Long}\r\n     */\r\n    Long.NEG_ONE = NEG_ONE;\r\n\r\n    /**\r\n     * @type {!Long}\r\n     * @inner\r\n     */\r\n    var MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n    /**\r\n     * Maximum signed value.\r\n     * @type {!Long}\r\n     */\r\n    Long.MAX_VALUE = MAX_VALUE;\r\n\r\n    /**\r\n     * @type {!Long}\r\n     * @inner\r\n     */\r\n    var MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n    /**\r\n     * Maximum unsigned value.\r\n     * @type {!Long}\r\n     */\r\n    Long.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n    /**\r\n     * @type {!Long}\r\n     * @inner\r\n     */\r\n    var MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n    /**\r\n     * Minimum signed value.\r\n     * @type {!Long}\r\n     */\r\n    Long.MIN_VALUE = MIN_VALUE;\r\n\r\n    /**\r\n     * @alias Long.prototype\r\n     * @inner\r\n     */\r\n    var LongPrototype = Long.prototype;\r\n\r\n    /**\r\n     * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n     * @returns {number}\r\n     */\r\n    LongPrototype.toInt = function toInt() {\r\n        return this.unsigned ? this.low >>> 0 : this.low;\r\n    };\r\n\r\n    /**\r\n     * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n     * @returns {number}\r\n     */\r\n    LongPrototype.toNumber = function toNumber() {\r\n        if (this.unsigned)\r\n            return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n        return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n    };\r\n\r\n    /**\r\n     * Converts the Long to a string written in the specified radix.\r\n     * @param {number=} radix Radix (2-36), defaults to 10\r\n     * @returns {string}\r\n     * @override\r\n     * @throws {RangeError} If `radix` is out of range\r\n     */\r\n    LongPrototype.toString = function toString(radix) {\r\n        radix = radix || 10;\r\n        if (radix < 2 || 36 < radix)\r\n            throw RangeError('radix');\r\n        if (this.isZero())\r\n            return '0';\r\n        if (this.isNegative()) { // Unsigned Longs are never negative\r\n            if (this.eq(MIN_VALUE)) {\r\n                // We need to change the Long value before it can be negated, so we remove\r\n                // the bottom-most digit in this base and then recurse to do the rest.\r\n                var radixLong = fromNumber(radix),\r\n                    div = this.div(radixLong),\r\n                    rem1 = div.mul(radixLong).sub(this);\r\n                return div.toString(radix) + rem1.toInt().toString(radix);\r\n            } else\r\n                return '-' + this.neg().toString(radix);\r\n        }\r\n\r\n        // Do several (6) digits each time through the loop, so as to\r\n        // minimize the calls to the very expensive emulated div.\r\n        var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n            rem = this;\r\n        var result = '';\r\n        while (true) {\r\n            var remDiv = rem.div(radixToPower),\r\n                intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n                digits = intval.toString(radix);\r\n            rem = remDiv;\r\n            if (rem.isZero())\r\n                return digits + result;\r\n            else {\r\n                while (digits.length < 6)\r\n                    digits = '0' + digits;\r\n                result = '' + digits + result;\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Gets the high 32 bits as a signed integer.\r\n     * @returns {number} Signed high bits\r\n     */\r\n    LongPrototype.getHighBits = function getHighBits() {\r\n        return this.high;\r\n    };\r\n\r\n    /**\r\n     * Gets the high 32 bits as an unsigned integer.\r\n     * @returns {number} Unsigned high bits\r\n     */\r\n    LongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n        return this.high >>> 0;\r\n    };\r\n\r\n    /**\r\n     * Gets the low 32 bits as a signed integer.\r\n     * @returns {number} Signed low bits\r\n     */\r\n    LongPrototype.getLowBits = function getLowBits() {\r\n        return this.low;\r\n    };\r\n\r\n    /**\r\n     * Gets the low 32 bits as an unsigned integer.\r\n     * @returns {number} Unsigned low bits\r\n     */\r\n    LongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n        return this.low >>> 0;\r\n    };\r\n\r\n    /**\r\n     * Gets the number of bits needed to represent the absolute value of this Long.\r\n     * @returns {number}\r\n     */\r\n    LongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n        if (this.isNegative()) // Unsigned Longs are never negative\r\n            return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n        var val = this.high != 0 ? this.high : this.low;\r\n        for (var bit = 31; bit > 0; bit--)\r\n            if ((val & (1 << bit)) != 0)\r\n                break;\r\n        return this.high != 0 ? bit + 33 : bit + 1;\r\n    };\r\n\r\n    /**\r\n     * Tests if this Long's value equals zero.\r\n     * @returns {boolean}\r\n     */\r\n    LongPrototype.isZero = function isZero() {\r\n        return this.high === 0 && this.low === 0;\r\n    };\r\n\r\n    /**\r\n     * Tests if this Long's value is negative.\r\n     * @returns {boolean}\r\n     */\r\n    LongPrototype.isNegative = function isNegative() {\r\n        return !this.unsigned && this.high < 0;\r\n    };\r\n\r\n    /**\r\n     * Tests if this Long's value is positive.\r\n     * @returns {boolean}\r\n     */\r\n    LongPrototype.isPositive = function isPositive() {\r\n        return this.unsigned || this.high >= 0;\r\n    };\r\n\r\n    /**\r\n     * Tests if this Long's value is odd.\r\n     * @returns {boolean}\r\n     */\r\n    LongPrototype.isOdd = function isOdd() {\r\n        return (this.low & 1) === 1;\r\n    };\r\n\r\n    /**\r\n     * Tests if this Long's value is even.\r\n     * @returns {boolean}\r\n     */\r\n    LongPrototype.isEven = function isEven() {\r\n        return (this.low & 1) === 0;\r\n    };\r\n\r\n    /**\r\n     * Tests if this Long's value equals the specified's.\r\n     * @param {!Long|number|string} other Other value\r\n     * @returns {boolean}\r\n     */\r\n    LongPrototype.equals = function equals(other) {\r\n        if (!isLong(other))\r\n            other = fromValue(other);\r\n        if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n            return false;\r\n        return this.high === other.high && this.low === other.low;\r\n    };\r\n\r\n    /**\r\n     * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n     * @function\r\n     * @param {!Long|number|string} other Other value\r\n     * @returns {boolean}\r\n     */\r\n    LongPrototype.eq = LongPrototype.equals;\r\n\r\n    /**\r\n     * Tests if this Long's value differs from the specified's.\r\n     * @param {!Long|number|string} other Other value\r\n     * @returns {boolean}\r\n     */\r\n    LongPrototype.notEquals = function notEquals(other) {\r\n        return !this.eq(/* validates */ other);\r\n    };\r\n\r\n    /**\r\n     * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n     * @function\r\n     * @param {!Long|number|string} other Other value\r\n     * @returns {boolean}\r\n     */\r\n    LongPrototype.neq = LongPrototype.notEquals;\r\n\r\n    /**\r\n     * Tests if this Long's value is less than the specified's.\r\n     * @param {!Long|number|string} other Other value\r\n     * @returns {boolean}\r\n     */\r\n    LongPrototype.lessThan = function lessThan(other) {\r\n        return this.comp(/* validates */ other) < 0;\r\n    };\r\n\r\n    /**\r\n     * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n     * @function\r\n     * @param {!Long|number|string} other Other value\r\n     * @returns {boolean}\r\n     */\r\n    LongPrototype.lt = LongPrototype.lessThan;\r\n\r\n    /**\r\n     * Tests if this Long's value is less than or equal the specified's.\r\n     * @param {!Long|number|string} other Other value\r\n     * @returns {boolean}\r\n     */\r\n    LongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n        return this.comp(/* validates */ other) <= 0;\r\n    };\r\n\r\n    /**\r\n     * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n     * @function\r\n     * @param {!Long|number|string} other Other value\r\n     * @returns {boolean}\r\n     */\r\n    LongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n    /**\r\n     * Tests if this Long's value is greater than the specified's.\r\n     * @param {!Long|number|string} other Other value\r\n     * @returns {boolean}\r\n     */\r\n    LongPrototype.greaterThan = function greaterThan(other) {\r\n        return this.comp(/* validates */ other) > 0;\r\n    };\r\n\r\n    /**\r\n     * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n     * @function\r\n     * @param {!Long|number|string} other Other value\r\n     * @returns {boolean}\r\n     */\r\n    LongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n    /**\r\n     * Tests if this Long's value is greater than or equal the specified's.\r\n     * @param {!Long|number|string} other Other value\r\n     * @returns {boolean}\r\n     */\r\n    LongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n        return this.comp(/* validates */ other) >= 0;\r\n    };\r\n\r\n    /**\r\n     * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n     * @function\r\n     * @param {!Long|number|string} other Other value\r\n     * @returns {boolean}\r\n     */\r\n    LongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n    /**\r\n     * Compares this Long's value with the specified's.\r\n     * @param {!Long|number|string} other Other value\r\n     * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n     *  if the given one is greater\r\n     */\r\n    LongPrototype.compare = function compare(other) {\r\n        if (!isLong(other))\r\n            other = fromValue(other);\r\n        if (this.eq(other))\r\n            return 0;\r\n        var thisNeg = this.isNegative(),\r\n            otherNeg = other.isNegative();\r\n        if (thisNeg && !otherNeg)\r\n            return -1;\r\n        if (!thisNeg && otherNeg)\r\n            return 1;\r\n        // At this point the sign bits are the same\r\n        if (!this.unsigned)\r\n            return this.sub(other).isNegative() ? -1 : 1;\r\n        // Both are positive if at least one is unsigned\r\n        return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n    };\r\n\r\n    /**\r\n     * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n     * @function\r\n     * @param {!Long|number|string} other Other value\r\n     * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n     *  if the given one is greater\r\n     */\r\n    LongPrototype.comp = LongPrototype.compare;\r\n\r\n    /**\r\n     * Negates this Long's value.\r\n     * @returns {!Long} Negated Long\r\n     */\r\n    LongPrototype.negate = function negate() {\r\n        if (!this.unsigned && this.eq(MIN_VALUE))\r\n            return MIN_VALUE;\r\n        return this.not().add(ONE);\r\n    };\r\n\r\n    /**\r\n     * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n     * @function\r\n     * @returns {!Long} Negated Long\r\n     */\r\n    LongPrototype.neg = LongPrototype.negate;\r\n\r\n    /**\r\n     * Returns the sum of this and the specified Long.\r\n     * @param {!Long|number|string} addend Addend\r\n     * @returns {!Long} Sum\r\n     */\r\n    LongPrototype.add = function add(addend) {\r\n        if (!isLong(addend))\r\n            addend = fromValue(addend);\r\n\r\n        // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n        var a48 = this.high >>> 16;\r\n        var a32 = this.high & 0xFFFF;\r\n        var a16 = this.low >>> 16;\r\n        var a00 = this.low & 0xFFFF;\r\n\r\n        var b48 = addend.high >>> 16;\r\n        var b32 = addend.high & 0xFFFF;\r\n        var b16 = addend.low >>> 16;\r\n        var b00 = addend.low & 0xFFFF;\r\n\r\n        var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n        c00 += a00 + b00;\r\n        c16 += c00 >>> 16;\r\n        c00 &= 0xFFFF;\r\n        c16 += a16 + b16;\r\n        c32 += c16 >>> 16;\r\n        c16 &= 0xFFFF;\r\n        c32 += a32 + b32;\r\n        c48 += c32 >>> 16;\r\n        c32 &= 0xFFFF;\r\n        c48 += a48 + b48;\r\n        c48 &= 0xFFFF;\r\n        return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n    };\r\n\r\n    /**\r\n     * Returns the difference of this and the specified Long.\r\n     * @param {!Long|number|string} subtrahend Subtrahend\r\n     * @returns {!Long} Difference\r\n     */\r\n    LongPrototype.subtract = function subtract(subtrahend) {\r\n        if (!isLong(subtrahend))\r\n            subtrahend = fromValue(subtrahend);\r\n        return this.add(subtrahend.neg());\r\n    };\r\n\r\n    /**\r\n     * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n     * @function\r\n     * @param {!Long|number|string} subtrahend Subtrahend\r\n     * @returns {!Long} Difference\r\n     */\r\n    LongPrototype.sub = LongPrototype.subtract;\r\n\r\n    /**\r\n     * Returns the product of this and the specified Long.\r\n     * @param {!Long|number|string} multiplier Multiplier\r\n     * @returns {!Long} Product\r\n     */\r\n    LongPrototype.multiply = function multiply(multiplier) {\r\n        if (this.isZero())\r\n            return ZERO;\r\n        if (!isLong(multiplier))\r\n            multiplier = fromValue(multiplier);\r\n        if (multiplier.isZero())\r\n            return ZERO;\r\n        if (this.eq(MIN_VALUE))\r\n            return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n        if (multiplier.eq(MIN_VALUE))\r\n            return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n        if (this.isNegative()) {\r\n            if (multiplier.isNegative())\r\n                return this.neg().mul(multiplier.neg());\r\n            else\r\n                return this.neg().mul(multiplier).neg();\r\n        } else if (multiplier.isNegative())\r\n            return this.mul(multiplier.neg()).neg();\r\n\r\n        // If both longs are small, use float multiplication\r\n        if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n            return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n        // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n        // We can skip products that would overflow.\r\n\r\n        var a48 = this.high >>> 16;\r\n        var a32 = this.high & 0xFFFF;\r\n        var a16 = this.low >>> 16;\r\n        var a00 = this.low & 0xFFFF;\r\n\r\n        var b48 = multiplier.high >>> 16;\r\n        var b32 = multiplier.high & 0xFFFF;\r\n        var b16 = multiplier.low >>> 16;\r\n        var b00 = multiplier.low & 0xFFFF;\r\n\r\n        var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n        c00 += a00 * b00;\r\n        c16 += c00 >>> 16;\r\n        c00 &= 0xFFFF;\r\n        c16 += a16 * b00;\r\n        c32 += c16 >>> 16;\r\n        c16 &= 0xFFFF;\r\n        c16 += a00 * b16;\r\n        c32 += c16 >>> 16;\r\n        c16 &= 0xFFFF;\r\n        c32 += a32 * b00;\r\n        c48 += c32 >>> 16;\r\n        c32 &= 0xFFFF;\r\n        c32 += a16 * b16;\r\n        c48 += c32 >>> 16;\r\n        c32 &= 0xFFFF;\r\n        c32 += a00 * b32;\r\n        c48 += c32 >>> 16;\r\n        c32 &= 0xFFFF;\r\n        c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n        c48 &= 0xFFFF;\r\n        return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n    };\r\n\r\n    /**\r\n     * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n     * @function\r\n     * @param {!Long|number|string} multiplier Multiplier\r\n     * @returns {!Long} Product\r\n     */\r\n    LongPrototype.mul = LongPrototype.multiply;\r\n\r\n    /**\r\n     * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n     *  unsigned if this Long is unsigned.\r\n     * @param {!Long|number|string} divisor Divisor\r\n     * @returns {!Long} Quotient\r\n     */\r\n    LongPrototype.divide = function divide(divisor) {\r\n        if (!isLong(divisor))\r\n            divisor = fromValue(divisor);\r\n        if (divisor.isZero())\r\n            throw Error('division by zero');\r\n        if (this.isZero())\r\n            return this.unsigned ? UZERO : ZERO;\r\n        var approx, rem, res;\r\n        if (!this.unsigned) {\r\n            // This section is only relevant for signed longs and is derived from the\r\n            // closure library as a whole.\r\n            if (this.eq(MIN_VALUE)) {\r\n                if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                    return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n                else if (divisor.eq(MIN_VALUE))\r\n                    return ONE;\r\n                else {\r\n                    // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                    var halfThis = this.shr(1);\r\n                    approx = halfThis.div(divisor).shl(1);\r\n                    if (approx.eq(ZERO)) {\r\n                        return divisor.isNegative() ? ONE : NEG_ONE;\r\n                    } else {\r\n                        rem = this.sub(divisor.mul(approx));\r\n                        res = approx.add(rem.div(divisor));\r\n                        return res;\r\n                    }\r\n                }\r\n            } else if (divisor.eq(MIN_VALUE))\r\n                return this.unsigned ? UZERO : ZERO;\r\n            if (this.isNegative()) {\r\n                if (divisor.isNegative())\r\n                    return this.neg().div(divisor.neg());\r\n                return this.neg().div(divisor).neg();\r\n            } else if (divisor.isNegative())\r\n                return this.div(divisor.neg()).neg();\r\n            res = ZERO;\r\n        } else {\r\n            // The algorithm below has not been made for unsigned longs. It's therefore\r\n            // required to take special care of the MSB prior to running it.\r\n            if (!divisor.unsigned)\r\n                divisor = divisor.toUnsigned();\r\n            if (divisor.gt(this))\r\n                return UZERO;\r\n            if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n                return UONE;\r\n            res = UZERO;\r\n        }\r\n\r\n        // Repeat the following until the remainder is less than other:  find a\r\n        // floating-point that approximates remainder / other *from below*, add this\r\n        // into the result, and subtract it from the remainder.  It is critical that\r\n        // the approximate value is less than or equal to the real value so that the\r\n        // remainder never becomes negative.\r\n        rem = this;\r\n        while (rem.gte(divisor)) {\r\n            // Approximate the result of division. This may be a little greater or\r\n            // smaller than the actual value.\r\n            approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n            // We will tweak the approximate result by changing it in the 48-th digit or\r\n            // the smallest non-fractional digit, whichever is larger.\r\n            var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n                delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n            // Decrease the approximation until it is smaller than the remainder.  Note\r\n            // that if it is too large, the product overflows and is negative.\r\n                approxRes = fromNumber(approx),\r\n                approxRem = approxRes.mul(divisor);\r\n            while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n                approx -= delta;\r\n                approxRes = fromNumber(approx, this.unsigned);\r\n                approxRem = approxRes.mul(divisor);\r\n            }\r\n\r\n            // We know the answer can't be zero... and actually, zero would cause\r\n            // infinite recursion since we would make no progress.\r\n            if (approxRes.isZero())\r\n                approxRes = ONE;\r\n\r\n            res = res.add(approxRes);\r\n            rem = rem.sub(approxRem);\r\n        }\r\n        return res;\r\n    };\r\n\r\n    /**\r\n     * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n     * @function\r\n     * @param {!Long|number|string} divisor Divisor\r\n     * @returns {!Long} Quotient\r\n     */\r\n    LongPrototype.div = LongPrototype.divide;\r\n\r\n    /**\r\n     * Returns this Long modulo the specified.\r\n     * @param {!Long|number|string} divisor Divisor\r\n     * @returns {!Long} Remainder\r\n     */\r\n    LongPrototype.modulo = function modulo(divisor) {\r\n        if (!isLong(divisor))\r\n            divisor = fromValue(divisor);\r\n        return this.sub(this.div(divisor).mul(divisor));\r\n    };\r\n\r\n    /**\r\n     * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n     * @function\r\n     * @param {!Long|number|string} divisor Divisor\r\n     * @returns {!Long} Remainder\r\n     */\r\n    LongPrototype.mod = LongPrototype.modulo;\r\n\r\n    /**\r\n     * Returns the bitwise NOT of this Long.\r\n     * @returns {!Long}\r\n     */\r\n    LongPrototype.not = function not() {\r\n        return fromBits(~this.low, ~this.high, this.unsigned);\r\n    };\r\n\r\n    /**\r\n     * Returns the bitwise AND of this Long and the specified.\r\n     * @param {!Long|number|string} other Other Long\r\n     * @returns {!Long}\r\n     */\r\n    LongPrototype.and = function and(other) {\r\n        if (!isLong(other))\r\n            other = fromValue(other);\r\n        return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n    };\r\n\r\n    /**\r\n     * Returns the bitwise OR of this Long and the specified.\r\n     * @param {!Long|number|string} other Other Long\r\n     * @returns {!Long}\r\n     */\r\n    LongPrototype.or = function or(other) {\r\n        if (!isLong(other))\r\n            other = fromValue(other);\r\n        return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n    };\r\n\r\n    /**\r\n     * Returns the bitwise XOR of this Long and the given one.\r\n     * @param {!Long|number|string} other Other Long\r\n     * @returns {!Long}\r\n     */\r\n    LongPrototype.xor = function xor(other) {\r\n        if (!isLong(other))\r\n            other = fromValue(other);\r\n        return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n    };\r\n\r\n    /**\r\n     * Returns this Long with bits shifted to the left by the given amount.\r\n     * @param {number|!Long} numBits Number of bits\r\n     * @returns {!Long} Shifted Long\r\n     */\r\n    LongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n        if (isLong(numBits))\r\n            numBits = numBits.toInt();\r\n        if ((numBits &= 63) === 0)\r\n            return this;\r\n        else if (numBits < 32)\r\n            return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n        else\r\n            return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n    };\r\n\r\n    /**\r\n     * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n     * @function\r\n     * @param {number|!Long} numBits Number of bits\r\n     * @returns {!Long} Shifted Long\r\n     */\r\n    LongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n    /**\r\n     * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n     * @param {number|!Long} numBits Number of bits\r\n     * @returns {!Long} Shifted Long\r\n     */\r\n    LongPrototype.shiftRight = function shiftRight(numBits) {\r\n        if (isLong(numBits))\r\n            numBits = numBits.toInt();\r\n        if ((numBits &= 63) === 0)\r\n            return this;\r\n        else if (numBits < 32)\r\n            return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n        else\r\n            return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n    };\r\n\r\n    /**\r\n     * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n     * @function\r\n     * @param {number|!Long} numBits Number of bits\r\n     * @returns {!Long} Shifted Long\r\n     */\r\n    LongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n    /**\r\n     * Returns this Long with bits logically shifted to the right by the given amount.\r\n     * @param {number|!Long} numBits Number of bits\r\n     * @returns {!Long} Shifted Long\r\n     */\r\n    LongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n        if (isLong(numBits))\r\n            numBits = numBits.toInt();\r\n        numBits &= 63;\r\n        if (numBits === 0)\r\n            return this;\r\n        else {\r\n            var high = this.high;\r\n            if (numBits < 32) {\r\n                var low = this.low;\r\n                return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n            } else if (numBits === 32)\r\n                return fromBits(high, 0, this.unsigned);\r\n            else\r\n                return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n     * @function\r\n     * @param {number|!Long} numBits Number of bits\r\n     * @returns {!Long} Shifted Long\r\n     */\r\n    LongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n    /**\r\n     * Converts this Long to signed.\r\n     * @returns {!Long} Signed long\r\n     */\r\n    LongPrototype.toSigned = function toSigned() {\r\n        if (!this.unsigned)\r\n            return this;\r\n        return fromBits(this.low, this.high, false);\r\n    };\r\n\r\n    /**\r\n     * Converts this Long to unsigned.\r\n     * @returns {!Long} Unsigned long\r\n     */\r\n    LongPrototype.toUnsigned = function toUnsigned() {\r\n        if (this.unsigned)\r\n            return this;\r\n        return fromBits(this.low, this.high, true);\r\n    };\r\n\r\n    /**\r\n     * Converts this Long to its byte representation.\r\n     * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n     * @returns {!Array.<number>} Byte representation\r\n     */\r\n    LongPrototype.toBytes = function(le) {\r\n        return le ? this.toBytesLE() : this.toBytesBE();\r\n    }\r\n\r\n    /**\r\n     * Converts this Long to its little endian byte representation.\r\n     * @returns {!Array.<number>} Little endian byte representation\r\n     */\r\n    LongPrototype.toBytesLE = function() {\r\n        var hi = this.high,\r\n            lo = this.low;\r\n        return [\r\n             lo         & 0xff,\r\n            (lo >>>  8) & 0xff,\r\n            (lo >>> 16) & 0xff,\r\n            (lo >>> 24) & 0xff,\r\n             hi         & 0xff,\r\n            (hi >>>  8) & 0xff,\r\n            (hi >>> 16) & 0xff,\r\n            (hi >>> 24) & 0xff\r\n        ];\r\n    }\r\n\r\n    /**\r\n     * Converts this Long to its big endian byte representation.\r\n     * @returns {!Array.<number>} Big endian byte representation\r\n     */\r\n    LongPrototype.toBytesBE = function() {\r\n        var hi = this.high,\r\n            lo = this.low;\r\n        return [\r\n            (hi >>> 24) & 0xff,\r\n            (hi >>> 16) & 0xff,\r\n            (hi >>>  8) & 0xff,\r\n             hi         & 0xff,\r\n            (lo >>> 24) & 0xff,\r\n            (lo >>> 16) & 0xff,\r\n            (lo >>>  8) & 0xff,\r\n             lo         & 0xff\r\n        ];\r\n    }\r\n\r\n    return Long;\r\n});\r\n","let int8 = new Int8Array(4);\nlet int32 = new Int32Array(int8.buffer, 0, 1);\nlet float32 = new Float32Array(int8.buffer, 0, 1);\n\nexport const SHORT_MIN = -32768;\nexport const SHORT_MAX = 32768\n\nexport function intBitsToFloat(bits: number): number {\n    int32[0] = bits;\n    return float32[0];\n}\n\nexport function floatToIntBits(bits: number): number {\n    float32[0] = bits;\n    return int32[0];\n}\n\nlet int16 = new Int16Array(4);\nlet int64 = new Int32Array(int16.buffer, 0, 2);\nlet float64 = new Float64Array(int16.buffer, 0, 1);\n\nimport Long from \"long\"\n\nexport function longBitsToDouble(bits: Long): number {\n    int64[0] = bits.high;\n    int64[1] = bits.low;\n    return float64[0];\n}\n\nexport function doubleToLongBits(double: number): Long {\n    float64[0] = double;\n    return new Long(int64[1], int64[0]);\n}\n\n","/*\n * ASM: a very small and fast Java bytecode manipulation framework\n * Copyright (c) 2000-2011 INRIA, France Telecom\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n * 3. Neither the name of the copyright holders nor the names of its\n *    contributors may be used to endorse or promote products derived from\n *    this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\n * THE POSSIBILITY OF SUCH DAMAGE.\n */\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\n/**\n * A constant pool item. Constant pool items can be created with the 'newXXX'\n * methods in the {@link ClassWriter} class.\n *\n * @author Eric Bruneton\n */\nimport { ClassWriter } from \"./ClassWriter\";\nimport { floatToIntBits, doubleToLongBits } from \"./bits\";\nimport Long from \"long\";\nexport class Item {\n    /**\n     * Index of this item in the constant pool.\n     */\n    index: number;\n\n    /**\n     * Type of this constant pool item. A single class is used to represent all\n     * constant pool item types, in order to minimize the bytecode size of this\n     * package. The value of this field is one of {@link ClassWriter#INT},\n     * {@link ClassWriter#LONG}, {@link ClassWriter#FLOAT},\n     * {@link ClassWriter#DOUBLE}, {@link ClassWriter#UTF8},\n     * {@link ClassWriter#STR}, {@link ClassWriter#CLASS},\n     * {@link ClassWriter#NAME_TYPE}, {@link ClassWriter#FIELD},\n     * {@link ClassWriter#METH}, {@link ClassWriter#IMETH},\n     * {@link ClassWriter#MTYPE}, {@link ClassWriter#INDY}.\n     *\n     * MethodHandle constant 9 variations are stored using a range of 9 values\n     * from {@link ClassWriter#HANDLE_BASE} + 1 to\n     * {@link ClassWriter#HANDLE_BASE} + 9.\n     *\n     * Special Item types are used for Items that are stored in the ClassWriter\n     * {@link ClassWriter#typeTable}, instead of the constant pool, in order to\n     * avoid clashes with normal constant pool items in the ClassWriter constant\n     * pool's hash table. These special item types are\n     * {@link ClassWriter#TYPE_NORMAL}, {@link ClassWriter#TYPE_UNINIT} and\n     * {@link ClassWriter#TYPE_MERGED}.\n     */\n    type!: number;\n\n    /**\n     * Value of this item, for an integer item.\n     */\n    intVal: number = 0;\n\n    /**\n     * Value of this item, for a long item.\n     */\n    longVal: Long = Long.fromInt(0);\n\n    /**\n     * First part of the value of this item, for items that do not hold a\n     * primitive value.\n     */\n    strVal1: string = \"\";\n\n    /**\n     * Second part of the value of this item, for items that do not hold a\n     * primitive value.\n     */\n    strVal2: string = \"\";\n\n    /**\n     * Third part of the value of this item, for items that do not hold a\n     * primitive value.\n     */\n    strVal3: string = \"\";\n\n    /**\n     * The hash code value of this constant pool item.\n     */\n    __hashCode!: number;\n\n    /**\n     * Link to another constant pool item, used for collision lists in the\n     * constant pool's hash table.\n     */\n    next: Item | null = null;\n\n    /**\n     * Constructs a copy of the given item.\n     *\n     * @param index\n     * index of the item to be constructed.\n     * @param i\n     * the item that must be copied into the item to be constructed.\n     */\n    public constructor(index: number, i?: Item) {\n        this.index = index;\n        if (i) {\n            this.index = index;\n            this.type = i.type;\n            this.intVal = i.intVal;\n            this.longVal = i.longVal;\n            this.strVal1 = i.strVal1;\n            this.strVal2 = i.strVal2;\n            this.strVal3 = i.strVal3;\n            this.__hashCode = i.__hashCode;\n        }\n    }\n\n    /**\n     * Sets this item to an integer item.\n     *\n     * @param intVal\n     * the value of this item.\n     */\n    set$int(intVal: number) {\n        this.type = ClassWriter.INT;\n        this.intVal = intVal;\n        this.__hashCode = 2147483647 & (this.type + intVal);\n    }\n\n    /**\n     * Sets this item to a long item.\n     *\n     * @param longVal\n     * the value of this item.\n     */\n    set$long(longVal: Long) {\n        this.type = ClassWriter.LONG;\n        this.longVal = longVal;\n        this.__hashCode = 2147483647 & (this.type + (longVal.getLowBits()));\n    }\n\n    /**\n     * Sets this item to a float item.\n     *\n     * @param floatVal\n     * the value of this item.\n     */\n    set$float(floatVal: number) {\n        this.type = ClassWriter.FLOAT;\n        this.intVal = floatToIntBits(floatVal);\n        this.__hashCode = 2147483647 & (this.type + (floatVal | 0));\n    }\n\n    /**\n     * Sets this item to a double item.\n     *\n     * @param doubleVal\n     * the value of this item.\n     */\n    set$double(doubleVal: number) {\n        this.type = ClassWriter.DOUBLE;\n        this.longVal = doubleToLongBits(doubleVal);\n        this.__hashCode = 2147483647 & (this.type + (doubleVal | 0));\n    }\n\n    /**\n     * Sets this item to an item that do not hold a primitive value.\n     *\n     * @param type\n     * the type of this item.\n     * @param strVal1\n     * first part of the value of this item.\n     * @param strVal2\n     * second part of the value of this item.\n     * @param strVal3\n     * third part of the value of this item.\n     */\n    public set(type: number, strVal1?: string, strVal2?: string, strVal3?: string): any {\n        this.type = type;\n        this.strVal1 = strVal1 ?? \"\";\n        this.strVal2 = strVal2 ?? \"\";\n        this.strVal3 = strVal3 ?? \"\";\n        switch (type) {\n            case ClassWriter.CLASS:\n                this.intVal = 0;     // intVal of a class must be zero, see visitInnerClass\n            case ClassWriter.UTF8:\n            case ClassWriter.STR:\n            case ClassWriter.MTYPE:\n            case ClassWriter.TYPE_NORMAL:\n                this.__hashCode = 0x7FFFFFFF & (type + str_hash(this.strVal1));\n                return;\n            case ClassWriter.NAME_TYPE: {\n                this.__hashCode = 0x7FFFFFFF & (type + str_hash(this.strVal1)\n                    * str_hash(this.strVal2));\n                return;\n            }\n            // ClassWriter.FIELD:\n            // ClassWriter.METH:\n            // ClassWriter.IMETH:\n            // ClassWriter.HANDLE_BASE + 1..9\n            default:\n                this.__hashCode = 0x7FFFFFFF & (type + str_hash(this.strVal1)\n                    * str_hash(this.strVal2) * str_hash(this.strVal3));\n        }\n    }\n\n    /**\n     * Sets the item to an InvokeDynamic item.\n     *\n     * @param name\n     * invokedynamic's name.\n     * @param desc\n     * invokedynamic's desc.\n     * @param bsmIndex\n     * zero based index into the class attribute BootrapMethods.\n     */\n    setInvkDynItem(name: string, desc: string, bsmIndex: number) {\n        this.type = ClassWriter.INDY;\n        this.longVal = Long.fromInt(bsmIndex);\n        this.strVal1 = name;\n        this.strVal2 = desc;\n        this.__hashCode = 2147483647 & (ClassWriter.INDY + bsmIndex * (<any>this.strVal1.toString()) * (<any>this.strVal2.toString()));\n    }\n\n    /**\n     * Sets the item to a BootstrapMethod item.\n     *\n     * @param position\n     * position in byte in the class attribute BootrapMethods.\n     * @param hashCode\n     * hashcode of the item. This hashcode is processed from the\n     * hashcode of the bootstrap method and the hashcode of all\n     * bootstrap arguments.\n     */\n    setPosHash(position: number, hashCode: number) {\n        this.type = ClassWriter.BSM;\n        this.intVal = position;\n        this.__hashCode = hashCode;\n    }\n\n    /**\n     * Indicates if the given item is equal to this one. <i>This method assumes\n     * that the two items have the same {@link #type}</i>.\n     *\n     * @param i\n     * the item to be compared to this one. Both items must have the\n     * same {@link #type}.\n     * @return <tt>true</tt> if the given item if equal to this one,\n     * <tt>false</tt> otherwise.\n     */\n    isEqualTo(i: Item): boolean {\n        switch ((this.type)) {\n            case ClassWriter.UTF8:\n            case ClassWriter.STR:\n            case ClassWriter.CLASS:\n            case ClassWriter.MTYPE:\n            case ClassWriter.TYPE_NORMAL:\n                return (i.strVal1 === this.strVal1);\n            case ClassWriter.TYPE_MERGED:\n            case ClassWriter.LONG:\n            case ClassWriter.DOUBLE:\n                return i.longVal === this.longVal;\n            case ClassWriter.INT:\n            case ClassWriter.FLOAT:\n                return i.intVal === this.intVal;\n            case ClassWriter.TYPE_UNINIT:\n                return i.intVal === this.intVal && (i.strVal1 === this.strVal1);\n            case ClassWriter.NAME_TYPE:\n                return (i.strVal1 === this.strVal1) && (i.strVal2 === this.strVal2);\n            case ClassWriter.INDY:\n                {\n                    return i.longVal === this.longVal && (i.strVal1 === this.strVal1) && (i.strVal2 === this.strVal2);\n                };\n            default:\n                return (i.strVal1 === this.strVal1) && (i.strVal2 === this.strVal2) && (i.strVal3 === this.strVal3);\n        }\n    }\n}\n\n\nfunction str_hash(str: string): number {\n    let hash = 0;\n    if (str.length == 0) { return hash; }\n    for (let i = 0; i < str.length; i++) {\n        let char = str.charCodeAt(i);\n        hash = ((hash << 5) - hash) + char;\n        hash = hash & hash; // Convert to 32bit integer\n    }\n    return hash;\n}\n\n// String.prototype[\"hashCode\"] = function () {\n//     let hash = 0;\n//     if (this.length == 0) { return hash; }\n//     for (let i = 0; i < this.length; i++) {\n//         let char = this.charCodeAt(i);\n//         hash = ((hash << 5) - hash) + char;\n//         hash = hash & hash; // Convert to 32bit integer\n//     }\n//     return hash;\n// }\n\n","/*\n * ASM: a very small and fast Java bytecode manipulation framework\n * Copyright (c) 2000-2011 INRIA, France Telecom\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n * 3. Neither the name of the copyright holders nor the names of its\n *    contributors may be used to endorse or promote products derived from\n *    this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\n * THE POSSIBILITY OF SUCH DAMAGE.\n */\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\n/**\n * A visitor to visit a Java method. The methods of this class must be called in\n * the following order: ( <tt>visitParameter</tt> )* [\n * <tt>visitAnnotationDefault</tt> ] ( <tt>visitAnnotation</tt> |\n * <tt>visitParameterAnnotation</tt> <tt>visitTypeAnnotation</tt> |\n * <tt>visitAttribute</tt> )* [ <tt>visitCode</tt> ( <tt>visitFrame</tt> |\n * <tt>visit<i>X</i>Insn</tt> | <tt>visitLabel</tt> |\n * <tt>visitInsnAnnotation</tt> | <tt>visitTryCatchBlock</tt> |\n * <tt>visitTryCatchAnnotation</tt> | <tt>visitLocalVariable</tt> |\n * <tt>visitLocalVariableAnnotation</tt> | <tt>visitLineNumber</tt> )*\n * <tt>visitMaxs</tt> ] <tt>visitEnd</tt>. In addition, the\n * <tt>visit<i>X</i>Insn</tt> and <tt>visitLabel</tt> methods must be called in\n * the sequential order of the bytecode instructions of the visited code,\n * <tt>visitInsnAnnotation</tt> must be called <i>after</i> the annotated\n * instruction, <tt>visitTryCatchBlock</tt> must be called <i>before</i> the\n * labels passed as arguments have been visited,\n * <tt>visitTryCatchBlockAnnotation</tt> must be called <i>after</i> the\n * corresponding try catch block has been visited, and the\n * <tt>visitLocalVariable</tt>, <tt>visitLocalVariableAnnotation</tt> and\n * <tt>visitLineNumber</tt> methods must be called <i>after</i> the labels\n * passed as arguments have been visited.\n *\n * @author Eric Bruneton\n */\nimport { Opcodes } from \"./Opcodes\"\nimport { Handle } from \"./Handle\"\nimport { Label } from \"./Label\"\nimport { AnnotationVisitor } from \"./AnnotationVisitor\"\nimport { TypePath } from \"./TypePath\";\nimport { Attribute } from \"./Attribute\";\nexport abstract class MethodVisitor {\n    /**\n     * The ASM API version implemented by this visitor. The value of this field\n     * must be one of {@link Opcodes#ASM4} or {@link Opcodes#ASM5}.\n     */\n    api: number;\n\n    /**\n     * The method visitor to which this visitor must delegate method calls. May\n     * be null.\n     */\n    mv: MethodVisitor | null;\n\n    /**\n     * Constructs a new {@link MethodVisitor}.\n     *\n     * @param api\n     * the ASM API version implemented by this visitor. Must be one\n     * of {@link Opcodes#ASM4} or {@link Opcodes#ASM5}.\n     * @param mv\n     * the method visitor to which this visitor must delegate method\n     * calls. May be null.\n     */\n    public constructor(api: number, mv: MethodVisitor | null = null) {\n        this.api = 0;\n        if (api !== Opcodes.ASM4 && api !== Opcodes.ASM5) {\n            throw new Error();\n        }\n        this.api = api;\n        this.mv = mv;\n    }\n\n    /**\n     * Visits a parameter of this method.\n     *\n     * @param name\n     * parameter name or null if none is provided.\n     * @param access\n     * the parameter's access flags, only <tt>ACC_FINAL</tt>,\n     * <tt>ACC_SYNTHETIC</tt> or/and <tt>ACC_MANDATED</tt> are\n     * allowed (see {@link Opcodes}).\n     */\n    public visitParameter(name: string | null, access: number) {\n        if (this.api < Opcodes.ASM5) {\n            throw new Error();\n        }\n        if (this.mv != null) {\n            this.mv.visitParameter(name, access);\n        }\n    }\n\n    /**\n     * Visits the default value of this annotation interface method.\n     *\n     * @return a visitor to the visit the actual default value of this\n     * annotation interface method, or <tt>null</tt> if this visitor is\n     * not interested in visiting this default value. The 'name'\n     * parameters passed to the methods of this annotation visitor are\n     * ignored. Moreover, exacly one visit method must be called on this\n     * annotation visitor, followed by visitEnd.\n     */\n    public visitAnnotationDefault(): AnnotationVisitor | null {\n        if (this.mv != null) {\n            return this.mv.visitAnnotationDefault();\n        }\n        return null;\n    }\n\n    /**\n     * Visits an annotation of this method.\n     *\n     * @param desc\n     * the class descriptor of the annotation class.\n     * @param visible\n     * <tt>true</tt> if the annotation is visible at runtime.\n     * @return a visitor to visit the annotation values, or <tt>null</tt> if\n     * this visitor is not interested in visiting this annotation.\n     */\n    public visitAnnotation(desc: string | null, visible: boolean): AnnotationVisitor | null {\n        if (this.mv != null) {\n            return this.mv.visitAnnotation(desc, visible);\n        }\n        return null;\n    }\n\n    /**\n     * Visits an annotation on a type in the method signature.\n     *\n     * @param typeRef\n     * a reference to the annotated type. The sort of this type\n     * reference must be {@link TypeReference#METHOD_TYPE_PARAMETER\n     * METHOD_TYPE_PARAMETER},\n     * {@link TypeReference#METHOD_TYPE_PARAMETER_BOUND\n     * METHOD_TYPE_PARAMETER_BOUND},\n     * {@link TypeReference#METHOD_RETURN METHOD_RETURN},\n     * {@link TypeReference#METHOD_RECEIVER METHOD_RECEIVER},\n     * {@link TypeReference#METHOD_FORMAL_PARAMETER\n     * METHOD_FORMAL_PARAMETER} or {@link TypeReference#THROWS\n     * THROWS}. See {@link TypeReference}.\n     * @param typePath\n     * the path to the annotated type argument, wildcard bound, array\n     * element type, or static inner type within 'typeRef'. May be\n     * <tt>null</tt> if the annotation targets 'typeRef' as a whole.\n     * @param desc\n     * the class descriptor of the annotation class.\n     * @param visible\n     * <tt>true</tt> if the annotation is visible at runtime.\n     * @return a visitor to visit the annotation values, or <tt>null</tt> if\n     * this visitor is not interested in visiting this annotation.\n     */\n    public visitTypeAnnotation(typeRef: number, typePath: TypePath | null, desc: string | null, visible: boolean): AnnotationVisitor | null {\n        if (this.api < Opcodes.ASM5) {\n            throw new Error();\n        }\n        if (this.mv != null) {\n            return this.mv.visitTypeAnnotation(typeRef, typePath, desc, visible);\n        }\n        return null;\n    }\n\n    /**\n     * Visits an annotation of a parameter this method.\n     *\n     * @param parameter\n     * the parameter index.\n     * @param desc\n     * the class descriptor of the annotation class.\n     * @param visible\n     * <tt>true</tt> if the annotation is visible at runtime.\n     * @return a visitor to visit the annotation values, or <tt>null</tt> if\n     * this visitor is not interested in visiting this annotation.\n     */\n    public visitParameterAnnotation(parameter: number, desc: string | null, visible: boolean): AnnotationVisitor | null {\n        if (this.mv != null) {\n            return this.mv.visitParameterAnnotation(parameter, desc, visible);\n        }\n        return null;\n    }\n\n    /**\n     * Visits a non standard attribute of this method.\n     *\n     * @param attr\n     * an attribute.\n     */\n    public visitAttribute(attr: Attribute) {\n        if (this.mv != null) {\n            this.mv.visitAttribute(attr);\n        }\n    }\n\n    /**\n     * Starts the visit of the method's code, if any (i.e. non abstract method).\n     */\n    public visitCode() {\n        if (this.mv != null) {\n            this.mv.visitCode();\n        }\n    }\n\n    /**\n     * Visits the current state of the local variables and operand stack\n     * elements. This method must(*) be called <i>just before</i> any\n     * instruction <b>i</b> that follows an unconditional branch instruction\n     * such as GOTO or THROW, that is the target of a jump instruction, or that\n     * starts an exception handler block. The visited types must describe the\n     * values of the local variables and of the operand stack elements <i>just\n     * before</i> <b>i</b> is executed.<br>\n     * <br>\n     * (*) this is mandatory only for classes whose version is greater than or\n     * equal to {@link Opcodes#V1_6 V1_6}. <br>\n     * <br>\n     * The frames of a method must be given either in expanded form, or in\n     * compressed form (all frames must use the same format, i.e. you must not\n     * mix expanded and compressed frames within a single method):\n     * <ul>\n     * <li>In expanded form, all frames must have the F_NEW type.</li>\n     * <li>In compressed form, frames are basically \"deltas\" from the state of\n     * the previous frame:\n     * <ul>\n     * <li>{@link Opcodes#F_SAME} representing frame with exactly the same\n     * locals as the previous frame and with the empty stack.</li>\n     * <li>{@link Opcodes#F_SAME1} representing frame with exactly the same\n     * locals as the previous frame and with single value on the stack (\n     * <code>nStack</code> is 1 and <code>stack[0]</code> contains value for the\n     * type of the stack item).</li>\n     * <li>{@link Opcodes#F_APPEND} representing frame with current locals are\n     * the same as the locals in the previous frame, except that additional\n     * locals are defined (<code>nLocal</code> is 1, 2 or 3 and\n     * <code>local</code> elements contains values representing added types).</li>\n     * <li>{@link Opcodes#F_CHOP} representing frame with current locals are the\n     * same as the locals in the previous frame, except that the last 1-3 locals\n     * are absent and with the empty stack (<code>nLocals</code> is 1, 2 or 3).</li>\n     * <li>{@link Opcodes#F_FULL} representing complete frame data.</li>\n     * </ul>\n     * </li>\n     * </ul>\n     * <br>\n     * In both cases the first frame, corresponding to the method's parameters\n     * and access flags, is implicit and must not be visited. Also, it is\n     * illegal to visit two or more frames for the same code location (i.e., at\n     * least one instruction must be visited between two calls to visitFrame).\n     *\n     * @param type\n     * the type of this stack map frame. Must be\n     * {@link Opcodes#F_NEW} for expanded frames, or\n     * {@link Opcodes#F_FULL}, {@link Opcodes#F_APPEND},\n     * {@link Opcodes#F_CHOP}, {@link Opcodes#F_SAME} or\n     * {@link Opcodes#F_APPEND}, {@link Opcodes#F_SAME1} for\n     * compressed frames.\n     * @param nLocal\n     * the number of local variables in the visited frame.\n     * @param local\n     * the local variable types in this frame. This array must not be\n     * modified. Primitive types are represented by\n     * {@link Opcodes#TOP}, {@link Opcodes#INTEGER},\n     * {@link Opcodes#FLOAT}, {@link Opcodes#LONG},\n     * {@link Opcodes#DOUBLE},{@link Opcodes#NULL} or\n     * {@link Opcodes#UNINITIALIZED_THIS} (long and double are\n     * represented by a single element). Reference types are\n     * represented by String objects (representing internal names),\n     * and uninitialized types by Label objects (this label\n     * designates the NEW instruction that created this uninitialized\n     * value).\n     * @param nStack\n     * the number of operand stack elements in the visited frame.\n     * @param stack\n     * the operand stack types in this frame. This array must not be\n     * modified. Its content has the same format as the \"local\"\n     * array.\n     * @throws IllegalStateException\n     * if a frame is visited just after another one, without any\n     * instruction between the two (unless this frame is a\n     * Opcodes#F_SAME frame, in which case it is silently ignored).\n     */\n    public visitFrame(type?: any, nLocal?: any, local?: any, nStack?: any, stack?: any): any {\n        if (((typeof type === \"number\") || type === null) && ((typeof nLocal === \"number\") || nLocal === null) && ((local != null && local instanceof Array) || local === null) && ((typeof nStack === \"number\") || nStack === null) && ((stack != null && stack instanceof Array) || stack === null)) {\n            let __args = Array.prototype.slice.call(arguments);\n            return <any>(() => {\n                if (this.mv != null) {\n                    this.mv.visitFrame(type, nLocal, local, nStack, stack);\n                }\n            })();\n        } else { throw new Error(\"invalid overload\"); }\n    }\n\n    /**\n     * Visits a zero operand instruction.\n     *\n     * @param opcode\n     * the opcode of the instruction to be visited. This opcode is\n     * either NOP, ACONST_NULL, ICONST_M1, ICONST_0, ICONST_1,\n     * ICONST_2, ICONST_3, ICONST_4, ICONST_5, LCONST_0, LCONST_1,\n     * FCONST_0, FCONST_1, FCONST_2, DCONST_0, DCONST_1, IALOAD,\n     * LALOAD, FALOAD, DALOAD, AALOAD, BALOAD, CALOAD, SALOAD,\n     * IASTORE, LASTORE, FASTORE, DASTORE, AASTORE, BASTORE, CASTORE,\n     * SASTORE, POP, POP2, DUP, DUP_X1, DUP_X2, DUP2, DUP2_X1,\n     * DUP2_X2, SWAP, IADD, LADD, FADD, DADD, ISUB, LSUB, FSUB, DSUB,\n     * IMUL, LMUL, FMUL, DMUL, IDIV, LDIV, FDIV, DDIV, IREM, LREM,\n     * FREM, DREM, INEG, LNEG, FNEG, DNEG, ISHL, LSHL, ISHR, LSHR,\n     * IUSHR, LUSHR, IAND, LAND, IOR, LOR, IXOR, LXOR, I2L, I2F, I2D,\n     * L2I, L2F, L2D, F2I, F2L, F2D, D2I, D2L, D2F, I2B, I2C, I2S,\n     * LCMP, FCMPL, FCMPG, DCMPL, DCMPG, IRETURN, LRETURN, FRETURN,\n     * DRETURN, ARETURN, RETURN, ARRAYLENGTH, ATHROW, MONITORENTER,\n     * or MONITOREXIT.\n     */\n    public visitInsn(opcode: number) {\n        if (this.mv != null) {\n            this.mv.visitInsn(opcode);\n        }\n    }\n\n    /**\n     * Visits an instruction with a single int operand.\n     *\n     * @param opcode\n     * the opcode of the instruction to be visited. This opcode is\n     * either BIPUSH, SIPUSH or NEWARRAY.\n     * @param operand\n     * the operand of the instruction to be visited.<br>\n     * When opcode is BIPUSH, operand value should be between\n     * Byte.MIN_VALUE and Byte.MAX_VALUE.<br>\n     * When opcode is SIPUSH, operand value should be between\n     * Short.MIN_VALUE and Short.MAX_VALUE.<br>\n     * When opcode is NEWARRAY, operand value should be one of\n     * {@link Opcodes#T_BOOLEAN}, {@link Opcodes#T_CHAR},\n     * {@link Opcodes#T_FLOAT}, {@link Opcodes#T_DOUBLE},\n     * {@link Opcodes#T_BYTE}, {@link Opcodes#T_SHORT},\n     * {@link Opcodes#T_INT} or {@link Opcodes#T_LONG}.\n     */\n    public visitIntInsn(opcode: number, operand: number) {\n        if (this.mv != null) {\n            this.mv.visitIntInsn(opcode, operand);\n        }\n    }\n\n    /**\n     * Visits a local variable instruction. A local variable instruction is an\n     * instruction that loads or stores the value of a local variable.\n     *\n     * @param opcode\n     * the opcode of the local variable instruction to be visited.\n     * This opcode is either ILOAD, LLOAD, FLOAD, DLOAD, ALOAD,\n     * ISTORE, LSTORE, FSTORE, DSTORE, ASTORE or RET.\n     * @param var\n     * the operand of the instruction to be visited. This operand is\n     * the index of a local variable.\n     */\n    public visitVarInsn(opcode: number, __var: number) {\n        if (this.mv != null) {\n            this.mv.visitVarInsn(opcode, __var);\n        }\n    }\n\n    /**\n     * Visits a type instruction. A type instruction is an instruction that\n     * takes the internal name of a class as parameter.\n     *\n     * @param opcode\n     * the opcode of the type instruction to be visited. This opcode\n     * is either NEW, ANEWARRAY, CHECKCAST or INSTANCEOF.\n     * @param type\n     * the operand of the instruction to be visited. This operand\n     * must be the internal name of an object or array class (see\n     * {@link Type#getInternalName() getInternalName}).\n     */\n    public visitTypeInsn(opcode: number, type: string) {\n        if (this.mv != null) {\n            this.mv.visitTypeInsn(opcode, type);\n        }\n    }\n\n    /**\n     * Visits a field instruction. A field instruction is an instruction that\n     * loads or stores the value of a field of an object.\n     *\n     * @param opcode\n     * the opcode of the type instruction to be visited. This opcode\n     * is either GETSTATIC, PUTSTATIC, GETFIELD or PUTFIELD.\n     * @param owner\n     * the internal name of the field's owner class (see\n     * {@link Type#getInternalName() getInternalName}).\n     * @param name\n     * the field's name.\n     * @param desc\n     * the field's descriptor (see {@link Type Type}).\n     */\n    public visitFieldInsn(opcode: number, owner: string, name: string | null, desc: string | null) {\n        if (this.mv != null) {\n            this.mv.visitFieldInsn(opcode, owner, name, desc);\n        }\n    }\n\n    /**\n     * Visits a method instruction. A method instruction is an instruction that\n     * invokes a method.\n     *\n     * @param opcode\n     * the opcode of the type instruction to be visited. This opcode\n     * is either INVOKEVIRTUAL, INVOKESPECIAL, INVOKESTATIC or\n     * INVOKEINTERFACE.\n     * @param owner\n     * the internal name of the method's owner class (see\n     * {@link Type#getInternalName() getInternalName}).\n     * @param name\n     * the method's name.\n     * @param desc\n     * the method's descriptor (see {@link Type Type}).\n     */\n    public visitMethodInsn$int$java_lang_String$java_lang_String$java_lang_String(opcode: number, owner: string, name: string, desc: string) {\n        if (this.api >= Opcodes.ASM5) {\n            let itf: boolean = opcode === Opcodes.INVOKEINTERFACE;\n            this.visitMethodInsn(opcode, owner, name, desc, itf);\n            return;\n        }\n        if (this.mv != null) {\n            this.mv.visitMethodInsn(opcode, owner, name, desc);\n        }\n    }\n\n    /**\n     * Visits a method instruction. A method instruction is an instruction that\n     * invokes a method.\n     *\n     * @param opcode\n     * the opcode of the type instruction to be visited. This opcode\n     * is either INVOKEVIRTUAL, INVOKESPECIAL, INVOKESTATIC or\n     * INVOKEINTERFACE.\n     * @param owner\n     * the internal name of the method's owner class (see\n     * {@link Type#getInternalName() getInternalName}).\n     * @param name\n     * the method's name.\n     * @param desc\n     * the method's descriptor (see {@link Type Type}).\n     * @param itf\n     * if the method's owner class is an interface.\n     */\n    public visitMethodInsn(opcode?: any, owner?: any, name?: any, desc?: any, itf?: any): any {\n        if (((typeof opcode === \"number\") || opcode === null) && ((typeof owner === \"string\") || owner === null) && ((typeof name === \"string\") || name === null) && ((typeof desc === \"string\") || desc === null) && ((typeof itf === \"boolean\") || itf === null)) {\n            let __args = Array.prototype.slice.call(arguments);\n            return <any>(() => {\n                if (this.api < Opcodes.ASM5) {\n                    if (itf !== (opcode === Opcodes.INVOKEINTERFACE)) {\n                        throw new Error(\"INVOKESPECIAL/STATIC on interfaces require ASM 5\");\n                    }\n                    this.visitMethodInsn(opcode, owner, name, desc);\n                    return;\n                }\n                if (this.mv != null) {\n                    this.mv.visitMethodInsn(opcode, owner, name, desc, itf);\n                }\n            })();\n        } else if (((typeof opcode === \"number\") || opcode === null) && ((typeof owner === \"string\") || owner === null) && ((typeof name === \"string\") || name === null) && ((typeof desc === \"string\") || desc === null) && itf === undefined) {\n            return <any>this.visitMethodInsn$int$java_lang_String$java_lang_String$java_lang_String(opcode, owner, name, desc);\n        } else { throw new Error(\"invalid overload\"); }\n    }\n\n    /**\n     * Visits an invokedynamic instruction.\n     *\n     * @param name\n     * the method's name.\n     * @param desc\n     * the method's descriptor (see {@link Type Type}).\n     * @param bsm\n     * the bootstrap method.\n     * @param bsmArgs\n     * the bootstrap method constant arguments. Each argument must be\n     * an {@link Integer}, {@link Float}, {@link Long},\n     * {@link Double}, {@link String}, {@link Type} or {@link Handle}\n     * value. This method is allowed to modify the content of the\n     * array so a caller should expect that this array may change.\n     */\n    public visitInvokeDynamicInsn(name: string, desc: string, bsm: Handle, ...bsmArgs: any[]) {\n        if (this.mv != null) {\n            this.mv.visitInvokeDynamicInsn(name, desc, bsm, ...bsmArgs);\n        }\n    }\n\n    /**\n     * Visits a jump instruction. A jump instruction is an instruction that may\n     * jump to another instruction.\n     *\n     * @param opcode\n     * the opcode of the type instruction to be visited. This opcode\n     * is either IFEQ, IFNE, IFLT, IFGE, IFGT, IFLE, IF_ICMPEQ,\n     * IF_ICMPNE, IF_ICMPLT, IF_ICMPGE, IF_ICMPGT, IF_ICMPLE,\n     * IF_ACMPEQ, IF_ACMPNE, GOTO, JSR, IFNULL or IFNONNULL.\n     * @param label\n     * the operand of the instruction to be visited. This operand is\n     * a label that designates the instruction to which the jump\n     * instruction may jump.\n     */\n    public visitJumpInsn(opcode: number, label: Label) {\n        if (this.mv != null) {\n            this.mv.visitJumpInsn(opcode, label);\n        }\n    }\n\n    /**\n     * Visits a label. A label designates the instruction that will be visited\n     * just after it.\n     *\n     * @param label\n     * a {@link Label Label} object.\n     */\n    public visitLabel(label: Label) {\n        if (this.mv != null) {\n            this.mv.visitLabel(label);\n        }\n    }\n\n    /**\n     * Visits a LDC instruction. Note that new constant types may be added in\n     * future versions of the Java Virtual Machine. To easily detect new\n     * constant types, implementations of this method should check for\n     * unexpected constant types, like this:\n     *\n     * <pre>\n     * if (cst instanceof Integer) {\n     * // ...\n     * } else if (cst instanceof Float) {\n     * // ...\n     * } else if (cst instanceof Long) {\n     * // ...\n     * } else if (cst instanceof Double) {\n     * // ...\n     * } else if (cst instanceof String) {\n     * // ...\n     * } else if (cst instanceof Type) {\n     * int sort = ((Type) cst).getSort();\n     * if (sort == Type.OBJECT) {\n     * // ...\n     * } else if (sort == Type.ARRAY) {\n     * // ...\n     * } else if (sort == Type.METHOD) {\n     * // ...\n     * } else {\n     * // throw an exception\n     * }\n     * } else if (cst instanceof Handle) {\n     * // ...\n     * } else {\n     * // throw an exception\n     * }\n     * </pre>\n     *\n     * @param cst\n     * the constant to be loaded on the stack. This parameter must be\n     * a non null {@link Integer}, a {@link Float}, a {@link Long}, a\n     * {@link Double}, a {@link String}, a {@link Type} of OBJECT or\n     * ARRAY sort for <tt>.class</tt> constants, for classes whose\n     * version is 49.0, a {@link Type} of METHOD sort or a\n     * {@link Handle} for MethodType and MethodHandle constants, for\n     * classes whose version is 51.0.\n     */\n    public visitLdcInsn(cst: any) {\n        if (this.mv != null) {\n            this.mv.visitLdcInsn(cst);\n        }\n    }\n\n    /**\n     * Visits an IINC instruction.\n     *\n     * @param var\n     * index of the local variable to be incremented.\n     * @param increment\n     * amount to increment the local variable by.\n     */\n    public visitIincInsn(__var: number, increment: number) {\n        if (this.mv != null) {\n            this.mv.visitIincInsn(__var, increment);\n        }\n    }\n\n    /**\n     * Visits a TABLESWITCH instruction.\n     *\n     * @param min\n     * the minimum key value.\n     * @param max\n     * the maximum key value.\n     * @param dflt\n     * beginning of the default handler block.\n     * @param labels\n     * beginnings of the handler blocks. <tt>labels[i]</tt> is the\n     * beginning of the handler block for the <tt>min + i</tt> key.\n     */\n    public visitTableSwitchInsn(min: number, max: number, dflt: Label, ...labels: Label[]) {\n        if (this.mv != null) {\n            this.mv.visitTableSwitchInsn(min, max, dflt, ...labels);\n        }\n    }\n\n    /**\n     * Visits a LOOKUPSWITCH instruction.\n     *\n     * @param dflt\n     * beginning of the default handler block.\n     * @param keys\n     * the values of the keys.\n     * @param labels\n     * beginnings of the handler blocks. <tt>labels[i]</tt> is the\n     * beginning of the handler block for the <tt>keys[i]</tt> key.\n     */\n    public visitLookupSwitchInsn(dflt: Label, keys: number[], labels: Label[]) {\n        if (this.mv != null) {\n            this.mv.visitLookupSwitchInsn(dflt, keys, labels);\n        }\n    }\n\n    /**\n     * Visits a MULTIANEWARRAY instruction.\n     *\n     * @param desc\n     * an array type descriptor (see {@link Type Type}).\n     * @param dims\n     * number of dimensions of the array to allocate.\n     */\n    public visitMultiANewArrayInsn(desc: string, dims: number) {\n        if (this.mv != null) {\n            this.mv.visitMultiANewArrayInsn(desc, dims);\n        }\n    }\n\n    /**\n     * Visits an annotation on an instruction. This method must be called just\n     * <i>after</i> the annotated instruction. It can be called several times\n     * for the same instruction.\n     *\n     * @param typeRef\n     * a reference to the annotated type. The sort of this type\n     * reference must be {@link TypeReference#INSTANCEOF INSTANCEOF},\n     * {@link TypeReference#NEW NEW},\n     * {@link TypeReference#CONSTRUCTOR_REFERENCE\n     * CONSTRUCTOR_REFERENCE}, {@link TypeReference#METHOD_REFERENCE\n     * METHOD_REFERENCE}, {@link TypeReference#CAST CAST},\n     * {@link TypeReference#CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT\n     * CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT},\n     * {@link TypeReference#METHOD_INVOCATION_TYPE_ARGUMENT\n     * METHOD_INVOCATION_TYPE_ARGUMENT},\n     * {@link TypeReference#CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT\n     * CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT}, or\n     * {@link TypeReference#METHOD_REFERENCE_TYPE_ARGUMENT\n     * METHOD_REFERENCE_TYPE_ARGUMENT}. See {@link TypeReference}.\n     * @param typePath\n     * the path to the annotated type argument, wildcard bound, array\n     * element type, or static inner type within 'typeRef'. May be\n     * <tt>null</tt> if the annotation targets 'typeRef' as a whole.\n     * @param desc\n     * the class descriptor of the annotation class.\n     * @param visible\n     * <tt>true</tt> if the annotation is visible at runtime.\n     * @return a visitor to visit the annotation values, or <tt>null</tt> if\n     * this visitor is not interested in visiting this annotation.\n     */\n    public visitInsnAnnotation(typeRef: number, typePath: TypePath | null, desc: string | null, visible: boolean): AnnotationVisitor | null {\n        if (this.api < Opcodes.ASM5) {\n            throw new Error();\n        }\n        if (this.mv != null) {\n            return this.mv.visitInsnAnnotation(typeRef, typePath, desc, visible);\n        }\n        return null;\n    }\n\n    /**\n     * Visits a try catch block.\n     *\n     * @param start\n     * beginning of the exception handler's scope (inclusive).\n     * @param end\n     * end of the exception handler's scope (exclusive).\n     * @param handler\n     * beginning of the exception handler's code.\n     * @param type\n     * internal name of the type of exceptions handled by the\n     * handler, or <tt>null</tt> to catch any exceptions (for\n     * \"finally\" blocks).\n     * @throws IllegalArgumentException\n     * if one of the labels has already been visited by this visitor\n     * (by the {@link #visitLabel visitLabel} method).\n     */\n    public visitTryCatchBlock(start: Label, end: Label, handler: Label, type: string | null) {\n        if (this.mv != null) {\n            this.mv.visitTryCatchBlock(start, end, handler, type);\n        }\n    }\n\n    /**\n     * Visits an annotation on an exception handler type. This method must be\n     * called <i>after</i> the {@link #visitTryCatchBlock} for the annotated\n     * exception handler. It can be called several times for the same exception\n     * handler.\n     *\n     * @param typeRef\n     * a reference to the annotated type. The sort of this type\n     * reference must be {@link TypeReference#EXCEPTION_PARAMETER\n     * EXCEPTION_PARAMETER}. See {@link TypeReference}.\n     * @param typePath\n     * the path to the annotated type argument, wildcard bound, array\n     * element type, or static inner type within 'typeRef'. May be\n     * <tt>null</tt> if the annotation targets 'typeRef' as a whole.\n     * @param desc\n     * the class descriptor of the annotation class.\n     * @param visible\n     * <tt>true</tt> if the annotation is visible at runtime.\n     * @return a visitor to visit the annotation values, or <tt>null</tt> if\n     * this visitor is not interested in visiting this annotation.\n     */\n    public visitTryCatchAnnotation(typeRef: number, typePath: TypePath | null, desc: string | null, visible: boolean): AnnotationVisitor | null {\n        if (this.api < Opcodes.ASM5) {\n            throw new Error();\n        }\n        if (this.mv != null) {\n            return this.mv.visitTryCatchAnnotation(typeRef, typePath, desc, visible);\n        }\n        return null;\n    }\n\n    /**\n     * Visits a local variable declaration.\n     *\n     * @param name\n     * the name of a local variable.\n     * @param desc\n     * the type descriptor of this local variable.\n     * @param signature\n     * the type signature of this local variable. May be\n     * <tt>null</tt> if the local variable type does not use generic\n     * types.\n     * @param start\n     * the first instruction corresponding to the scope of this local\n     * variable (inclusive).\n     * @param end\n     * the last instruction corresponding to the scope of this local\n     * variable (exclusive).\n     * @param index\n     * the local variable's index.\n     * @throws IllegalArgumentException\n     * if one of the labels has not already been visited by this\n     * visitor (by the {@link #visitLabel visitLabel} method).\n     */\n    public visitLocalVariable(name: string | null, desc: string | null, signature: string | null, start: Label, end: Label, index: number) {\n        if (this.mv != null) {\n            this.mv.visitLocalVariable(name, desc, signature, start, end, index);\n        }\n    }\n\n    /**\n     * Visits an annotation on a local variable type.\n     *\n     * @param typeRef\n     * a reference to the annotated type. The sort of this type\n     * reference must be {@link TypeReference#LOCAL_VARIABLE\n     * LOCAL_VARIABLE} or {@link TypeReference#RESOURCE_VARIABLE\n     * RESOURCE_VARIABLE}. See {@link TypeReference}.\n     * @param typePath\n     * the path to the annotated type argument, wildcard bound, array\n     * element type, or static inner type within 'typeRef'. May be\n     * <tt>null</tt> if the annotation targets 'typeRef' as a whole.\n     * @param start\n     * the fist instructions corresponding to the continuous ranges\n     * that make the scope of this local variable (inclusive).\n     * @param end\n     * the last instructions corresponding to the continuous ranges\n     * that make the scope of this local variable (exclusive). This\n     * array must have the same size as the 'start' array.\n     * @param index\n     * the local variable's index in each range. This array must have\n     * the same size as the 'start' array.\n     * @param desc\n     * the class descriptor of the annotation class.\n     * @param visible\n     * <tt>true</tt> if the annotation is visible at runtime.\n     * @return a visitor to visit the annotation values, or <tt>null</tt> if\n     * this visitor is not interested in visiting this annotation.\n     */\n    public visitLocalVariableAnnotation(typeRef: number, typePath: TypePath | null, start: Label[], end: Label[], index: number[], desc: string | null, visible: boolean): AnnotationVisitor | null {\n        if (this.api < Opcodes.ASM5) {\n            throw new Error();\n        }\n        if (this.mv != null) {\n            return this.mv.visitLocalVariableAnnotation(typeRef, typePath, start, end, index, desc, visible);\n        }\n        return null;\n    }\n\n    /**\n     * Visits a line number declaration.\n     *\n     * @param line\n     * a line number. This number refers to the source file from\n     * which the class was compiled.\n     * @param start\n     * the first instruction corresponding to this line number.\n     * @throws IllegalArgumentException\n     * if <tt>start</tt> has not already been visited by this\n     * visitor (by the {@link #visitLabel visitLabel} method).\n     */\n    public visitLineNumber(line: number, start: Label) {\n        if (this.mv != null) {\n            this.mv.visitLineNumber(line, start);\n        }\n    }\n\n    /**\n     * Visits the maximum stack size and the maximum number of local variables\n     * of the method.\n     *\n     * @param maxStack\n     * maximum stack size of the method.\n     * @param maxLocals\n     * maximum number of local variables for the method.\n     */\n    public visitMaxs(maxStack: number, maxLocals: number) {\n        if (this.mv != null) {\n            this.mv.visitMaxs(maxStack, maxLocals);\n        }\n    }\n\n    /**\n     * Visits the end of the method. This method, which is the last one to be\n     * called, is used to inform the visitor that all the annotations and\n     * attributes of the method have been visited.\n     */\n    public visitEnd() {\n        if (this.mv != null) {\n            this.mv.visitEnd();\n        }\n    }\n}\n","/*\n * ASM: a very small and fast Java bytecode manipulation framework\n * Copyright (c) 2000-2011 INRIA, France Telecom\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n * 3. Neither the name of the copyright holders nor the names of its\n *    contributors may be used to endorse or promote products derived from\n *    this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\n * THE POSSIBILITY OF SUCH DAMAGE.\n */\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\n/**\n * Information about the input and output stack map frames of a basic block.\n *\n * @author Eric Bruneton\n */\nimport { Opcodes } from \"./Opcodes\";\nimport { ClassWriter } from \"./ClassWriter\";\nimport { MethodWriter } from \"./MethodWriter\";\nimport { Type } from \"./Type\";\nimport { Label } from \"./Label\";\nimport { Item } from \"./Item\";\nimport { assert } from \"./utils\";\nexport class Frame {\n    static __static_initialized: boolean = false;\n    static __static_initialize() { if (!Frame.__static_initialized) { Frame.__static_initialized = true; Frame.__static_initializer_0(); } }\n\n    /**\n     * Mask to get the dimension of a frame type. This dimension is a signed\n     * integer between -8 and 7.\n     */\n    static DIM: number = -268435456;\n\n    /**\n     * Constant to be added to a type to get a type with one more dimension.\n     */\n    static ARRAY_OF: number = 268435456;\n\n    /**\n     * Constant to be added to a type to get a type with one less dimension.\n     */\n    static ELEMENT_OF: number = -268435456;\n\n    /**\n     * Mask to get the kind of a frame type.\n     *\n     * @see #BASE\n     * @see #LOCAL\n     * @see #STACK\n     */\n    static KIND: number = 251658240;\n\n    /**\n     * Flag used for LOCAL and STACK types. Indicates that if this type happens\n     * to be a long or double type (during the computations of input frames),\n     * then it must be set to TOP because the second word of this value has been\n     * reused to store other data in the basic block. Hence the first word no\n     * longer stores a valid long or double value.\n     */\n    static TOP_IF_LONG_OR_DOUBLE: number = 8388608;\n\n    /**\n     * Mask to get the value of a frame type.\n     */\n    static VALUE: number = 8388607;\n\n    /**\n     * Mask to get the kind of base types.\n     */\n    static BASE_KIND: number = 267386880;\n\n    /**\n     * Mask to get the value of base types.\n     */\n    static BASE_VALUE: number = 1048575;\n\n    /**\n     * Kind of the types that are not relative to an input stack map frame.\n     */\n    static BASE: number = 16777216;\n\n    /**\n     * Base kind of the base reference types. The BASE_VALUE of such types is an\n     * index into the type table.\n     */\n    static OBJECT: number;\n\n    public static OBJECT_$LI$(): number { Frame.__static_initialize(); if (Frame.OBJECT == null) { Frame.OBJECT = Frame.BASE | 7340032; } return Frame.OBJECT; };\n\n    /**\n     * Base kind of the uninitialized base types. The BASE_VALUE of such types\n     * in an index into the type table (the Item at that index contains both an\n     * instruction offset and an internal class name).\n     */\n    static UNINITIALIZED: number;\n\n    public static UNINITIALIZED_$LI$(): number { Frame.__static_initialize(); if (Frame.UNINITIALIZED == null) { Frame.UNINITIALIZED = Frame.BASE | 8388608; } return Frame.UNINITIALIZED; };\n\n    /**\n     * Kind of the types that are relative to the local variable types of an\n     * input stack map frame. The value of such types is a local variable index.\n     */\n    static LOCAL: number = 33554432;\n\n    /**\n     * Kind of the the types that are relative to the stack of an input stack\n     * map frame. The value of such types is a position relatively to the top of\n     * this stack.\n     */\n    static STACK: number = 50331648;\n\n    /**\n     * The TOP type. This is a BASE type.\n     */\n    static TOP: number;\n\n    public static TOP_$LI$(): number { Frame.__static_initialize(); if (Frame.TOP == null) { Frame.TOP = Frame.BASE | 0; } return Frame.TOP; };\n\n    /**\n     * The BOOLEAN type. This is a BASE type mainly used for array types.\n     */\n    static BOOLEAN: number;\n\n    public static BOOLEAN_$LI$(): number { Frame.__static_initialize(); if (Frame.BOOLEAN == null) { Frame.BOOLEAN = Frame.BASE | 9; } return Frame.BOOLEAN; };\n\n    /**\n     * The BYTE type. This is a BASE type mainly used for array types.\n     */\n    static BYTE: number;\n\n    public static BYTE_$LI$(): number { Frame.__static_initialize(); if (Frame.BYTE == null) { Frame.BYTE = Frame.BASE | 10; } return Frame.BYTE; };\n\n    /**\n     * The CHAR type. This is a BASE type mainly used for array types.\n     */\n    static CHAR: number;\n\n    public static CHAR_$LI$(): number { Frame.__static_initialize(); if (Frame.CHAR == null) { Frame.CHAR = Frame.BASE | 11; } return Frame.CHAR; };\n\n    /**\n     * The SHORT type. This is a BASE type mainly used for array types.\n     */\n    static SHORT: number;\n\n    public static SHORT_$LI$(): number { Frame.__static_initialize(); if (Frame.SHORT == null) { Frame.SHORT = Frame.BASE | 12; } return Frame.SHORT; };\n\n    /**\n     * The INTEGER type. This is a BASE type.\n     */\n    static INTEGER: number;\n\n    public static INTEGER_$LI$(): number { Frame.__static_initialize(); if (Frame.INTEGER == null) { Frame.INTEGER = Frame.BASE | 1; } return Frame.INTEGER; };\n\n    /**\n     * The FLOAT type. This is a BASE type.\n     */\n    static FLOAT: number;\n\n    public static FLOAT_$LI$(): number { Frame.__static_initialize(); if (Frame.FLOAT == null) { Frame.FLOAT = Frame.BASE | 2; } return Frame.FLOAT; };\n\n    /**\n     * The DOUBLE type. This is a BASE type.\n     */\n    static DOUBLE: number;\n\n    public static DOUBLE_$LI$(): number { Frame.__static_initialize(); if (Frame.DOUBLE == null) { Frame.DOUBLE = Frame.BASE | 3; } return Frame.DOUBLE; };\n\n    /**\n     * The LONG type. This is a BASE type.\n     */\n    static LONG: number;\n\n    public static LONG_$LI$(): number { Frame.__static_initialize(); if (Frame.LONG == null) { Frame.LONG = Frame.BASE | 4; } return Frame.LONG; };\n\n    /**\n     * The NULL type. This is a BASE type.\n     */\n    static NULL: number;\n\n    public static NULL_$LI$(): number { Frame.__static_initialize(); if (Frame.NULL == null) { Frame.NULL = Frame.BASE | 5; } return Frame.NULL; };\n\n    /**\n     * The UNINITIALIZED_THIS type. This is a BASE type.\n     */\n    static UNINITIALIZED_THIS: number;\n\n    public static UNINITIALIZED_THIS_$LI$(): number {\n        Frame.__static_initialize();\n        if (Frame.UNINITIALIZED_THIS == null) {\n            Frame.UNINITIALIZED_THIS = Frame.BASE | 6;\n        } return Frame.UNINITIALIZED_THIS;\n    };\n\n    /**\n     * The stack size variation corresponding to each JVM instruction. This\n     * stack variation is equal to the size of the values produced by an\n     * instruction, minus the size of the values consumed by this instruction.\n     */\n    static SIZE: number[];\n\n    public static SIZE_$LI$(): number[] {\n        Frame.__static_initialize();\n        return Frame.SIZE;\n    };\n\n    static __static_initializer_0() {\n        let i: number;\n        let b: number[] = new Array(202);\n        let s: string = \"EFFFFFFFFGGFFFGGFFFEEFGFGFEEEEEEEEEEEEEEEEEEEEDEDEDDDDDCDCDEEEEEEEEEEEEEEEEEEEEBABABBBBDCFFFGGGEDCDCDCDCDCDCDCDCDCDCEEEEDDDDDDDCDCDCEFEFDDEEFFDEDEEEBDDBBDDDDDDCCCCCCCCEFEDDDCDCDEEEEEEEEEEFEEEEEEDDEEDDEE\";\n        for (i = 0; i < b.length; ++i) {\n            b[i] = (s.charAt(i)).charCodeAt(0) - (\"E\").charCodeAt(0);\n        }\n        Frame.SIZE = b;\n    }\n\n    /**\n     * The label (i.e. basic block) to which these input and output stack map\n     * frames correspond.\n     */\n    owner: Label;\n\n    /**\n     * The input stack map frame locals.\n     */\n    inputLocals: number[] = [];\n\n    /**\n     * The input stack map frame stack.\n     */\n    inputStack: number[] = [];\n\n    /**\n     * The output stack map frame locals.\n     */\n    private outputLocals: number[] = [];\n\n    /**\n     * The output stack map frame stack.\n     */\n    private outputStack: number[] = [];\n\n    /**\n     * Relative size of the output stack. The exact semantics of this field\n     * depends on the algorithm that is used.\n     *\n     * When only the maximum stack size is computed, this field is the size of\n     * the output stack relatively to the top of the input stack.\n     *\n     * When the stack map frames are completely computed, this field is the\n     * actual number of types in {@link #outputStack}.\n     */\n    outputStackTop: number;\n\n    /**\n     * Number of types that are initialized in the basic block.\n     *\n     * @see #initializations\n     */\n    private initializationCount: number;\n\n    /**\n     * The types that are initialized in the basic block. A constructor\n     * invocation on an UNINITIALIZED or UNINITIALIZED_THIS type must replace\n     * <i>every occurence</i> of this type in the local variables and in the\n     * operand stack. This cannot be done during the first phase of the\n     * algorithm since, during this phase, the local variables and the operand\n     * stack are not completely computed. It is therefore necessary to store the\n     * types on which constructors are invoked in the basic block, in order to\n     * do this replacement during the second phase of the algorithm, where the\n     * frames are fully computed. Note that this array can contain types that\n     * are relative to input locals or to the input stack (see below for the\n     * description of the algorithm).\n     */\n    private initializations: number[] | null = null;\n\n    /**\n     * Sets this frame to the given value.\n     *\n     * @param cw\n     * the ClassWriter to which this label belongs.\n     * @param nLocal\n     * the number of local variables.\n     * @param local\n     * the local variable types. Primitive types are represented by\n     * {@link Opcodes#TOP}, {@link Opcodes#INTEGER},\n     * {@link Opcodes#FLOAT}, {@link Opcodes#LONG},\n     * {@link Opcodes#DOUBLE},{@link Opcodes#NULL} or\n     * {@link Opcodes#UNINITIALIZED_THIS} (long and double are\n     * represented by a single element). Reference types are\n     * represented by String objects (representing internal names),\n     * and uninitialized types by Label objects (this label\n     * designates the NEW instruction that created this uninitialized\n     * value).\n     * @param nStack\n     * the number of operand stack elements.\n     * @param stack\n     * the operand stack types (same format as the \"local\" array).\n     */\n    public set(cw?: any, nLocal?: any, local?: any, nStack?: any, stack?: any): any {\n        if (((cw != null && cw instanceof ClassWriter) || cw === null) && ((typeof nLocal === \"number\") || nLocal === null) && ((local != null && local instanceof Array) || local === null) && ((typeof nStack === \"number\") || nStack === null) && ((stack != null && stack instanceof Array) || stack === null)) {\n            let __args = Array.prototype.slice.call(arguments);\n            return <any>(() => {\n                let i: number = Frame.convert(cw, nLocal, local, this.inputLocals);\n                while ((i < local.length)) {\n                    this.inputLocals[i++] = Frame.TOP_$LI$();\n                };\n                let nStackTop: number = 0;\n                for (let j: number = 0; j < nStack; ++j) {\n                    if (stack[j] === Opcodes.LONG || stack[j] === Opcodes.DOUBLE) {\n                        ++nStackTop;\n                    }\n                }\n                this.inputStack = new Array(nStack + nStackTop);\n                Frame.convert(cw, nStack, stack, this.inputStack);\n                this.outputStackTop = 0;\n                this.initializationCount = 0;\n            })();\n        } else if (((typeof cw === \"number\") || cw === null) && ((typeof nLocal === \"number\") || nLocal === null) && local === undefined && nStack === undefined && stack === undefined) {\n            return <any>this.set$int$int(cw, nLocal);\n        } else if (((cw != null && cw instanceof Frame) || cw === null) && nLocal === undefined && local === undefined && nStack === undefined && stack === undefined) {\n            return <any>this.set$Frame(cw);\n        } else { throw new Error(\"invalid overload\"); }\n    }\n\n    /**\n     * Converts types from the MethodWriter.visitFrame() format to the Frame\n     * format.\n     *\n     * @param cw\n     * the ClassWriter to which this label belongs.\n     * @param nInput\n     * the number of types to convert.\n     * @param input\n     * the types to convert. Primitive types are represented by\n     * {@link Opcodes#TOP}, {@link Opcodes#INTEGER},\n     * {@link Opcodes#FLOAT}, {@link Opcodes#LONG},\n     * {@link Opcodes#DOUBLE},{@link Opcodes#NULL} or\n     * {@link Opcodes#UNINITIALIZED_THIS} (long and double are\n     * represented by a single element). Reference types are\n     * represented by String objects (representing internal names),\n     * and uninitialized types by Label objects (this label\n     * designates the NEW instruction that created this uninitialized\n     * value).\n     * @param output\n     * where to store the converted types.\n     * @return the number of output elements.\n     */\n    private static convert(cw: ClassWriter, nInput: number, input: any[], output: number[]): number {\n        let i: number = 0;\n        for (let j: number = 0; j < nInput; ++j) {\n            if (typeof input[j] === \"number\") {\n                output[i++] = Frame.BASE | /* intValue */((<number>input[j]) | 0);\n                if (input[j] === Opcodes.LONG || input[j] === Opcodes.DOUBLE) {\n                    output[i++] = Frame.TOP_$LI$();\n                }\n            } else if (typeof input[j] === \"string\") {\n                output[i++] = Frame.type(cw, Type.getObjectType(<string>input[j]).getDescriptor());\n            } else {\n                output[i++] = Frame.UNINITIALIZED_$LI$() | cw.addUninitializedType(\"\", (<Label>input[j]).position);\n            }\n        }\n        return i;\n    }\n\n    /**\n     * Sets this frame to the value of the given frame. WARNING: after this\n     * method is called the two frames share the same data structures. It is\n     * recommended to discard the given frame f to avoid unexpected side\n     * effects.\n     *\n     * @param f\n     * The new frame value.\n     */\n    set$Frame(f: Frame) {\n        this.inputLocals = f.inputLocals;\n        this.inputStack = f.inputStack;\n        this.outputLocals = f.outputLocals;\n        this.outputStack = f.outputStack;\n        this.outputStackTop = f.outputStackTop;\n        this.initializationCount = f.initializationCount;\n        this.initializations = f.initializations;\n    }\n\n    /**\n     * Returns the output frame local variable type at the given index.\n     *\n     * @param local\n     * the index of the local that must be returned.\n     * @return the output frame local variable type at the given index.\n     */\n    private get(local: number): number {\n        if (this.outputLocals == null || local >= this.outputLocals.length) {\n            return Frame.LOCAL | local;\n        } else {\n            let type: number = this.outputLocals[local];\n            if (type === 0) {\n                type = this.outputLocals[local] = Frame.LOCAL | local;\n            }\n            return type;\n        }\n    }\n\n    /**\n     * Sets the output frame local variable type at the given index.\n     *\n     * @param local\n     * the index of the local that must be set.\n     * @param type\n     * the value of the local that must be set.\n     */\n    private set$int$int(local: number, type: number) {\n        if (this.outputLocals == null) {\n            this.outputLocals = new Array(10);\n        }\n        let n: number = this.outputLocals.length;\n        if (local >= n) {\n            let t: number[] = new Array(Math.max(local + 1, 2 * n));\n            for (let i = 0; i < n; i++) {\n                t[i] = this.outputLocals[i];\n            }\n            // java.lang.System.arraycopy(this.outputLocals, 0, t, 0, n);\n            this.outputLocals = t;\n        }\n        this.outputLocals[local] = type;\n    }\n\n    /**\n     * Pushes a new type onto the output frame stack.\n     *\n     * @param type\n     * the type that must be pushed.\n     */\n    private push$int(type: number) {\n        if (this.outputStack == null) {\n            this.outputStack = new Array(10);\n        }\n        let n: number = this.outputStack.length;\n        if (this.outputStackTop >= n) {\n            let t: number[] = new Array(Math.max(this.outputStackTop + 1, 2 * n));\n            for (let i = 0; i < n; i++) {\n                t[i] = this.outputStack[i];\n            }\n            // java.lang.System.arraycopy(this.outputStack, 0, t, 0, n);\n            this.outputStack = t;\n        }\n        this.outputStack[this.outputStackTop++] = type;\n        assert(this.owner);\n        let top: number = this.owner.inputStackTop + this.outputStackTop;\n        if (top > this.owner.outputStackMax) {\n            this.owner.outputStackMax = top;\n        }\n    }\n\n    /**\n     * Pushes a new type onto the output frame stack.\n     *\n     * @param cw\n     * the ClassWriter to which this label belongs.\n     * @param desc\n     * the descriptor of the type to be pushed. Can also be a method\n     * descriptor (in this case this method pushes its return type\n     * onto the output frame stack).\n     */\n    public push(cw?: any, desc?: any): any {\n        if (((cw != null && cw instanceof ClassWriter) || cw === null) && ((typeof desc === \"string\") || desc === null)) {\n            let __args = Array.prototype.slice.call(arguments);\n            return <any>(() => {\n                let type: number = Frame.type(cw, desc);\n                if (type !== 0) {\n                    this.push(type);\n                    if (type === Frame.LONG_$LI$() || type === Frame.DOUBLE_$LI$()) {\n                        this.push(Frame.TOP_$LI$());\n                    }\n                }\n            })();\n        } else if (((typeof cw === \"number\") || cw === null) && desc === undefined) {\n            return <any>this.push$int(cw);\n        } else { throw new Error(\"invalid overload\"); }\n    }\n\n    /**\n     * Returns the int encoding of the given type.\n     *\n     * @param cw\n     * the ClassWriter to which this label belongs.\n     * @param desc\n     * a type descriptor.\n     * @return the int encoding of the given type.\n     */\n    private static type(cw: ClassWriter, desc: string): number {\n        let t: string;\n        let index: number = desc.charAt(0) === \"(\" ? desc.indexOf(\")\") + 1 : 0;\n        switch ((desc.charAt(index))) {\n            case \"V\":\n                return 0;\n            case \"Z\":\n            case \"C\":\n            case \"B\":\n            case \"S\":\n            case \"I\":\n                return Frame.INTEGER_$LI$();\n            case \"F\":\n                return Frame.FLOAT_$LI$();\n            case \"J\":\n                return Frame.LONG_$LI$();\n            case \"D\":\n                return Frame.DOUBLE_$LI$();\n            case \"L\":\n                t = desc.substring(index + 1, desc.length - 1);\n                return Frame.OBJECT_$LI$() | cw.addType(t);\n            default:\n                let data: number;\n                let dims: number = index + 1;\n                while ((desc.charAt(dims) === \"[\")) {\n                    ++dims;\n                };\n                switch ((desc.charAt(dims))) {\n                    case \"Z\":\n                        data = Frame.BOOLEAN_$LI$();\n                        break;\n                    case \"C\":\n                        data = Frame.CHAR_$LI$();\n                        break;\n                    case \"B\":\n                        data = Frame.BYTE_$LI$();\n                        break;\n                    case \"S\":\n                        data = Frame.SHORT_$LI$();\n                        break;\n                    case \"I\":\n                        data = Frame.INTEGER_$LI$();\n                        break;\n                    case \"F\":\n                        data = Frame.FLOAT_$LI$();\n                        break;\n                    case \"J\":\n                        data = Frame.LONG_$LI$();\n                        break;\n                    case \"D\":\n                        data = Frame.DOUBLE_$LI$();\n                        break;\n                    default:\n                        t = desc.substring(dims + 1, desc.length - 1);\n                        data = Frame.OBJECT_$LI$() | cw.addType(t);\n                }\n                return (dims - index) << 28 | data;\n        }\n    }\n\n    /**\n     * Pops a type from the output frame stack and returns its value.\n     *\n     * @return the type that has been popped from the output frame stack.\n     */\n    private pop$(): number {\n        if (this.outputStackTop > 0) {\n            return this.outputStack[--this.outputStackTop];\n        } else {\n            return Frame.STACK | -(--this.owner.inputStackTop);\n        }\n    }\n\n    /**\n     * Pops the given number of types from the output frame stack.\n     *\n     * @param elements\n     * the number of types that must be popped.\n     */\n    private pop$int(elements: number) {\n        if (this.outputStackTop >= elements) {\n            this.outputStackTop -= elements;\n        } else {\n            this.owner.inputStackTop -= elements - this.outputStackTop;\n            this.outputStackTop = 0;\n        }\n    }\n\n    /**\n     * Pops a type from the output frame stack.\n     *\n     * @param desc\n     * the descriptor of the type to be popped. Can also be a method\n     * descriptor (in this case this method pops the types\n     * corresponding to the method arguments).\n     */\n    public pop(desc?: string | number): any {\n        if (((typeof desc === \"string\") || desc === null)) {\n            let __args = Array.prototype.slice.call(arguments);\n            return <any>(() => {\n                let c: string = desc.charAt(0);\n                if (c === \"(\") {\n                    this.pop((Type.getArgumentsAndReturnSizes(desc) >> 2) - 1);\n                } else if (c === \"J\" || c === \"D\") {\n                    this.pop(2);\n                } else {\n                    this.pop(1);\n                }\n            })();\n        } else if (((typeof desc === \"number\") || desc === null)) {\n            return this.pop$int(desc);\n        } else if (desc === undefined) {\n            return this.pop$();\n        } else { throw new Error(\"invalid overload\"); }\n    }\n\n    /**\n     * Adds a new type to the list of types on which a constructor is invoked in\n     * the basic block.\n     *\n     * @param var\n     * a type on a which a constructor is invoked.\n     */\n    private init$int(__var: number) {\n        if (this.initializations == null) {\n            this.initializations = new Array(2);\n        }\n        let n: number = this.initializations.length;\n        if (this.initializationCount >= n) {\n            let t: number[] = new Array(Math.max(this.initializationCount + 1, 2 * n));\n            for (let i = 0; i < n; i++) {\n                t[i] = this.initializations[i];\n            }\n            // java.lang.System.arraycopy(this.initializations, 0, t, 0, n);\n            this.initializations = t;\n        }\n        this.initializations[this.initializationCount++] = __var;\n    }\n\n    /**\n     * Replaces the given type with the appropriate type if it is one of the\n     * types on which a constructor is invoked in the basic block.\n     *\n     * @param cw\n     * the ClassWriter to which this label belongs.\n     * @param t\n     * a type\n     * @return t or, if t is one of the types on which a constructor is invoked\n     * in the basic block, the type corresponding to this constructor.\n     */\n    public init(cw?: any, t?: any): any {\n        if (((cw != null && cw instanceof ClassWriter) || cw === null) && ((typeof t === \"number\") || t === null)) {\n            let __args = Array.prototype.slice.call(arguments);\n            return (() => {\n                let s: number;\n                if (t === Frame.UNINITIALIZED_THIS_$LI$()) {\n                    s = Frame.OBJECT_$LI$() | cw.addType(cw.thisName);\n                } else if ((t & (Frame.DIM | Frame.BASE_KIND)) === Frame.UNINITIALIZED_$LI$()) {\n                    let type: string = cw.typeTable[t & Frame.BASE_VALUE].strVal1;\n                    s = Frame.OBJECT_$LI$() | cw.addType(type);\n                } else {\n                    return t;\n                }\n                for (let j: number = 0; j < this.initializationCount; ++j) {\n                    let u: number = this.initializations![j];\n                    let dim: number = u & Frame.DIM;\n                    let kind: number = u & Frame.KIND;\n                    if (kind === Frame.LOCAL) {\n                        u = dim + this.inputLocals[u & Frame.VALUE];\n                    } else if (kind === Frame.STACK) {\n                        u = dim + this.inputStack[this.inputStack.length - (u & Frame.VALUE)];\n                    }\n                    if (t === u) {\n                        return s;\n                    }\n                }\n                return t;\n            })();\n        } else if (((typeof cw === \"number\") || cw === null) && t === undefined) {\n            return <any>this.init$int(cw);\n        } else { throw new Error(\"invalid overload\"); }\n    }\n\n    /**\n     * Initializes the input frame of the first basic block from the method\n     * descriptor.\n     *\n     * @param cw\n     * the ClassWriter to which this label belongs.\n     * @param access\n     * the access flags of the method to which this label belongs.\n     * @param args\n     * the formal parameter types of this method.\n     * @param maxLocals\n     * the maximum number of local variables of this method.\n     */\n    initInputFrame(cw: ClassWriter, access: number, args: Type[], maxLocals: number) {\n        this.inputLocals = new Array(maxLocals);\n        this.inputStack = new Array(0);\n        let i: number = 0;\n        if ((access & Opcodes.ACC_STATIC) === 0) {\n            if ((access & MethodWriter.ACC_CONSTRUCTOR) === 0) {\n                this.inputLocals[i++] = Frame.OBJECT_$LI$() | cw.addType(cw.thisName);\n            } else {\n                this.inputLocals[i++] = Frame.UNINITIALIZED_THIS_$LI$();\n            }\n        }\n        for (let j: number = 0; j < args.length; ++j) {\n            let t: number = Frame.type(cw, args[j].getDescriptor());\n            this.inputLocals[i++] = t;\n            if (t === Frame.LONG_$LI$() || t === Frame.DOUBLE_$LI$()) {\n                this.inputLocals[i++] = Frame.TOP_$LI$();\n            }\n        }\n        while ((i < maxLocals)) {\n            this.inputLocals[i++] = Frame.TOP_$LI$();\n        };\n    }\n\n    /**\n     * Simulates the action of the given instruction on the output stack frame.\n     *\n     * @param opcode\n     * the opcode of the instruction.\n     * @param arg\n     * the operand of the instruction, if any.\n     * @param cw\n     * the class writer to which this label belongs.\n     * @param item\n     * the operand of the instructions, if any.\n     */\n    execute(opcode: number, arg: number, cw: ClassWriter | null, item: Item | null) {\n        let t1: number;\n        let t2: number;\n        let t3: number;\n        let t4: number;\n        switch ((opcode)) {\n            case Opcodes.NOP:\n            case Opcodes.INEG:\n            case Opcodes.LNEG:\n            case Opcodes.FNEG:\n            case Opcodes.DNEG:\n            case Opcodes.I2B:\n            case Opcodes.I2C:\n            case Opcodes.I2S:\n            case Opcodes.GOTO:\n            case Opcodes.RETURN:\n                break;\n            case Opcodes.ACONST_NULL:\n                this.push(Frame.NULL_$LI$());\n                break;\n            case Opcodes.ICONST_M1:\n            case Opcodes.ICONST_0:\n            case Opcodes.ICONST_1:\n            case Opcodes.ICONST_2:\n            case Opcodes.ICONST_3:\n            case Opcodes.ICONST_4:\n            case Opcodes.ICONST_5:\n            case Opcodes.BIPUSH:\n            case Opcodes.SIPUSH:\n            case Opcodes.ILOAD:\n                this.push(Frame.INTEGER_$LI$());\n                break;\n            case Opcodes.LCONST_0:\n            case Opcodes.LCONST_1:\n            case Opcodes.LLOAD:\n                this.push(Frame.LONG_$LI$());\n                this.push(Frame.TOP_$LI$());\n                break;\n            case Opcodes.FCONST_0:\n            case Opcodes.FCONST_1:\n            case Opcodes.FCONST_2:\n            case Opcodes.FLOAD:\n                this.push(Frame.FLOAT_$LI$());\n                break;\n            case Opcodes.DCONST_0:\n            case Opcodes.DCONST_1:\n            case Opcodes.DLOAD:\n                this.push(Frame.DOUBLE_$LI$());\n                this.push(Frame.TOP_$LI$());\n                break;\n            case Opcodes.LDC:\n                assert(cw);\n                assert(item);\n                switch ((item.type)) {\n                    case ClassWriter.INT:\n                        this.push(Frame.INTEGER_$LI$());\n                        break;\n                    case ClassWriter.LONG:\n                        this.push(Frame.LONG_$LI$());\n                        this.push(Frame.TOP_$LI$());\n                        break;\n                    case ClassWriter.FLOAT:\n                        this.push(Frame.FLOAT_$LI$());\n                        break;\n                    case ClassWriter.DOUBLE:\n                        this.push(Frame.DOUBLE_$LI$());\n                        this.push(Frame.TOP_$LI$());\n                        break;\n                    case ClassWriter.CLASS:\n                        this.push(Frame.OBJECT_$LI$() | cw.addType(\"java/lang/Class\"));\n                        break;\n                    case ClassWriter.STR:\n                        this.push(Frame.OBJECT_$LI$() | cw.addType(\"java/lang/String\"));\n                        break;\n                    case ClassWriter.MTYPE:\n                        this.push(Frame.OBJECT_$LI$() | cw.addType(\"java/lang/invoke/MethodType\"));\n                        break;\n                    default:\n                        this.push(Frame.OBJECT_$LI$() | cw.addType(\"java/lang/invoke/MethodHandle\"));\n                }\n                break;\n            case Opcodes.ALOAD:\n                this.push(this.get(arg));\n                break;\n            case Opcodes.IALOAD:\n            case Opcodes.BALOAD:\n            case Opcodes.CALOAD:\n            case Opcodes.SALOAD:\n                this.pop(2);\n                this.push(Frame.INTEGER_$LI$());\n                break;\n            case Opcodes.LALOAD:\n            case Opcodes.D2L:\n                this.pop(2);\n                this.push(Frame.LONG_$LI$());\n                this.push(Frame.TOP_$LI$());\n                break;\n            case Opcodes.FALOAD:\n                this.pop(2);\n                this.push(Frame.FLOAT_$LI$());\n                break;\n            case Opcodes.DALOAD:\n            case Opcodes.L2D:\n                this.pop(2);\n                this.push(Frame.DOUBLE_$LI$());\n                this.push(Frame.TOP_$LI$());\n                break;\n            case Opcodes.AALOAD:\n                this.pop(1);\n                t1 = this.pop();\n                this.push(Frame.ELEMENT_OF + t1);\n                break;\n            case Opcodes.ISTORE:\n            case Opcodes.FSTORE:\n            case Opcodes.ASTORE:\n                t1 = this.pop();\n                this.set(arg, t1);\n                if (arg > 0) {\n                    t2 = this.get(arg - 1);\n                    if (t2 === Frame.LONG_$LI$() || t2 === Frame.DOUBLE_$LI$()) {\n                        this.set(arg - 1, Frame.TOP_$LI$());\n                    } else if ((t2 & Frame.KIND) !== Frame.BASE) {\n                        this.set(arg - 1, t2 | Frame.TOP_IF_LONG_OR_DOUBLE);\n                    }\n                }\n                break;\n            case Opcodes.LSTORE:\n            case Opcodes.DSTORE:\n                this.pop(1);\n                t1 = this.pop();\n                this.set(arg, t1);\n                this.set(arg + 1, Frame.TOP_$LI$());\n                if (arg > 0) {\n                    t2 = this.get(arg - 1);\n                    if (t2 === Frame.LONG_$LI$() || t2 === Frame.DOUBLE_$LI$()) {\n                        this.set(arg - 1, Frame.TOP_$LI$());\n                    } else if ((t2 & Frame.KIND) !== Frame.BASE) {\n                        this.set(arg - 1, t2 | Frame.TOP_IF_LONG_OR_DOUBLE);\n                    }\n                }\n                break;\n            case Opcodes.IASTORE:\n            case Opcodes.BASTORE:\n            case Opcodes.CASTORE:\n            case Opcodes.SASTORE:\n            case Opcodes.FASTORE:\n            case Opcodes.AASTORE:\n                this.pop(3);\n                break;\n            case Opcodes.LASTORE:\n            case Opcodes.DASTORE:\n                this.pop(4);\n                break;\n            case Opcodes.POP:\n            case Opcodes.IFEQ:\n            case Opcodes.IFNE:\n            case Opcodes.IFLT:\n            case Opcodes.IFGE:\n            case Opcodes.IFGT:\n            case Opcodes.IFLE:\n            case Opcodes.IRETURN:\n            case Opcodes.FRETURN:\n            case Opcodes.ARETURN:\n            case Opcodes.TABLESWITCH:\n            case Opcodes.LOOKUPSWITCH:\n            case Opcodes.ATHROW:\n            case Opcodes.MONITORENTER:\n            case Opcodes.MONITOREXIT:\n            case Opcodes.IFNULL:\n            case Opcodes.IFNONNULL:\n                this.pop(1);\n                break;\n            case Opcodes.POP2:\n            case Opcodes.IF_ICMPEQ:\n            case Opcodes.IF_ICMPNE:\n            case Opcodes.IF_ICMPLT:\n            case Opcodes.IF_ICMPGE:\n            case Opcodes.IF_ICMPGT:\n            case Opcodes.IF_ICMPLE:\n            case Opcodes.IF_ACMPEQ:\n            case Opcodes.IF_ACMPNE:\n            case Opcodes.LRETURN:\n            case Opcodes.DRETURN:\n                this.pop(2);\n                break;\n            case Opcodes.DUP:\n                t1 = this.pop();\n                this.push(t1);\n                this.push(t1);\n                break;\n            case Opcodes.DUP_X1:\n                t1 = this.pop();\n                t2 = this.pop();\n                this.push(t1);\n                this.push(t2);\n                this.push(t1);\n                break;\n            case Opcodes.DUP_X2:\n                t1 = this.pop();\n                t2 = this.pop();\n                t3 = this.pop();\n                this.push(t1);\n                this.push(t3);\n                this.push(t2);\n                this.push(t1);\n                break;\n            case Opcodes.DUP2:\n                t1 = this.pop();\n                t2 = this.pop();\n                this.push(t2);\n                this.push(t1);\n                this.push(t2);\n                this.push(t1);\n                break;\n            case Opcodes.DUP2_X1:\n                t1 = this.pop();\n                t2 = this.pop();\n                t3 = this.pop();\n                this.push(t2);\n                this.push(t1);\n                this.push(t3);\n                this.push(t2);\n                this.push(t1);\n                break;\n            case Opcodes.DUP2_X2:\n                t1 = this.pop();\n                t2 = this.pop();\n                t3 = this.pop();\n                t4 = this.pop();\n                this.push(t2);\n                this.push(t1);\n                this.push(t4);\n                this.push(t3);\n                this.push(t2);\n                this.push(t1);\n                break;\n            case Opcodes.SWAP:\n                t1 = this.pop();\n                t2 = this.pop();\n                this.push(t1);\n                this.push(t2);\n                break;\n            case Opcodes.IADD:\n            case Opcodes.ISUB:\n            case Opcodes.IMUL:\n            case Opcodes.IDIV:\n            case Opcodes.IREM:\n            case Opcodes.IAND:\n            case Opcodes.IOR:\n            case Opcodes.IXOR:\n            case Opcodes.ISHL:\n            case Opcodes.ISHR:\n            case Opcodes.IUSHR:\n            case Opcodes.L2I:\n            case Opcodes.D2I:\n            case Opcodes.FCMPL:\n            case Opcodes.FCMPG:\n                this.pop(2);\n                this.push(Frame.INTEGER_$LI$());\n                break;\n            case Opcodes.LADD:\n            case Opcodes.LSUB:\n            case Opcodes.LMUL:\n            case Opcodes.LDIV:\n            case Opcodes.LREM:\n            case Opcodes.LAND:\n            case Opcodes.LOR:\n            case Opcodes.LXOR:\n                this.pop(4);\n                this.push(Frame.LONG_$LI$());\n                this.push(Frame.TOP_$LI$());\n                break;\n            case Opcodes.FADD:\n            case Opcodes.FSUB:\n            case Opcodes.FMUL:\n            case Opcodes.FDIV:\n            case Opcodes.FREM:\n            case Opcodes.L2F:\n            case Opcodes.D2F:\n                this.pop(2);\n                this.push(Frame.FLOAT_$LI$());\n                break;\n            case Opcodes.DADD:\n            case Opcodes.DSUB:\n            case Opcodes.DMUL:\n            case Opcodes.DDIV:\n            case Opcodes.DREM:\n                this.pop(4);\n                this.push(Frame.DOUBLE_$LI$());\n                this.push(Frame.TOP_$LI$());\n                break;\n            case Opcodes.LSHL:\n            case Opcodes.LSHR:\n            case Opcodes.LUSHR:\n                this.pop(3);\n                this.push(Frame.LONG_$LI$());\n                this.push(Frame.TOP_$LI$());\n                break;\n            case Opcodes.IINC:\n                this.set(arg, Frame.INTEGER_$LI$());\n                break;\n            case Opcodes.I2L:\n            case Opcodes.F2L:\n                this.pop(1);\n                this.push(Frame.LONG_$LI$());\n                this.push(Frame.TOP_$LI$());\n                break;\n            case Opcodes.I2F:\n                this.pop(1);\n                this.push(Frame.FLOAT_$LI$());\n                break;\n            case Opcodes.I2D:\n            case Opcodes.F2D:\n                this.pop(1);\n                this.push(Frame.DOUBLE_$LI$());\n                this.push(Frame.TOP_$LI$());\n                break;\n            case Opcodes.F2I:\n            case Opcodes.ARRAYLENGTH:\n            case Opcodes.INSTANCEOF:\n                this.pop(1);\n                this.push(Frame.INTEGER_$LI$());\n                break;\n            case Opcodes.LCMP:\n            case Opcodes.DCMPL:\n            case Opcodes.DCMPG:\n                this.pop(4);\n                this.push(Frame.INTEGER_$LI$());\n                break;\n            case Opcodes.JSR:\n            case Opcodes.RET:\n                throw new Error(\"JSR/RET are not supported with computeFrames option\");\n            case Opcodes.GETSTATIC:\n                assert(item);\n                this.push(cw, item.strVal3);\n                break;\n            case Opcodes.PUTSTATIC:\n                assert(item);\n                this.pop(item.strVal3);\n                break;\n            case Opcodes.GETFIELD:\n                assert(item);\n                this.pop(1);\n                this.push(cw, item.strVal3);\n                break;\n            case Opcodes.PUTFIELD:\n                assert(item);\n                this.pop(item.strVal3);\n                this.pop();\n                break;\n            case Opcodes.INVOKEVIRTUAL:\n            case Opcodes.INVOKESPECIAL:\n            case Opcodes.INVOKESTATIC:\n            case Opcodes.INVOKEINTERFACE:\n                assert(item);\n                this.pop(item.strVal3);\n                if (opcode !== Opcodes.INVOKESTATIC) {\n                    t1 = this.pop();\n                    if (opcode === Opcodes.INVOKESPECIAL && item.strVal2.charAt(0) === \"<\") {\n                        this.init(t1);\n                    }\n                }\n                this.push(cw, item.strVal3);\n                break;\n            case Opcodes.INVOKEDYNAMIC:\n                assert(item);\n                this.pop(item.strVal2);\n                this.push(cw, item.strVal2);\n                break;\n            case Opcodes.NEW:\n                assert(item);\n                assert(cw);\n                this.push(Frame.UNINITIALIZED_$LI$() | cw.addUninitializedType(item.strVal1, arg));\n                break;\n            case Opcodes.NEWARRAY:\n                this.pop();\n                switch ((arg)) {\n                    case Opcodes.T_BOOLEAN:\n                        this.push(Frame.ARRAY_OF | Frame.BOOLEAN_$LI$());\n                        break;\n                    case Opcodes.T_CHAR:\n                        this.push(Frame.ARRAY_OF | Frame.CHAR_$LI$());\n                        break;\n                    case Opcodes.T_BYTE:\n                        this.push(Frame.ARRAY_OF | Frame.BYTE_$LI$());\n                        break;\n                    case Opcodes.T_SHORT:\n                        this.push(Frame.ARRAY_OF | Frame.SHORT_$LI$());\n                        break;\n                    case Opcodes.T_INT:\n                        this.push(Frame.ARRAY_OF | Frame.INTEGER_$LI$());\n                        break;\n                    case Opcodes.T_FLOAT:\n                        this.push(Frame.ARRAY_OF | Frame.FLOAT_$LI$());\n                        break;\n                    case Opcodes.T_DOUBLE:\n                        this.push(Frame.ARRAY_OF | Frame.DOUBLE_$LI$());\n                        break;\n                    default:\n                        this.push(Frame.ARRAY_OF | Frame.LONG_$LI$());\n                        break;\n                }\n                break;\n            case Opcodes.ANEWARRAY:\n                assert(item);\n                assert(cw);\n                let s: string = item.strVal1;\n                this.pop();\n                if (s.charAt(0) === \"[\") {\n                    this.push(cw, \"[\" + s);\n                } else {\n                    this.push(Frame.ARRAY_OF | Frame.OBJECT_$LI$() | cw.addType(s));\n                }\n                break;\n            case Opcodes.CHECKCAST:\n                assert(item);\n                s = item.strVal1;\n                this.pop();\n                if (s.charAt(0) === \"[\") {\n                    this.push(cw, s);\n                } else {\n                    assert(cw);\n                    this.push(Frame.OBJECT_$LI$() | cw.addType(s));\n                }\n                break;\n            default:\n                assert(item);\n                this.pop(arg);\n                this.push(cw, item.strVal1);\n                break;\n        }\n    }\n\n    /**\n     * Merges the input frame of the given basic block with the input and output\n     * frames of this basic block. Returns <tt>true</tt> if the input frame of\n     * the given label has been changed by this operation.\n     *\n     * @param cw\n     * the ClassWriter to which this label belongs.\n     * @param frame\n     * the basic block whose input frame must be updated.\n     * @param edge\n     * the kind of the {@link Edge} between this label and 'label'.\n     * See {@link Edge#info}.\n     * @return <tt>true</tt> if the input frame of the given label has been\n     * changed by this operation.\n     */\n    merge(cw: ClassWriter, frame: Frame, edge: number): boolean {\n        let changed: boolean = false;\n        let i: number;\n        let s: number;\n        let dim: number;\n        let kind: number;\n        let t: number;\n        let nLocal: number = this.inputLocals.length;\n        let nStack: number = this.inputStack.length;\n        if (frame.inputLocals == null) {\n            frame.inputLocals = new Array(nLocal);\n            changed = true;\n        }\n        for (i = 0; i < nLocal; ++i) {\n            if (this.outputLocals != null && i < this.outputLocals.length) {\n                s = this.outputLocals[i];\n                if (s === 0) {\n                    t = this.inputLocals[i];\n                } else {\n                    dim = s & Frame.DIM;\n                    kind = s & Frame.KIND;\n                    if (kind === Frame.BASE) {\n                        t = s;\n                    } else {\n                        if (kind === Frame.LOCAL) {\n                            t = dim + this.inputLocals[s & Frame.VALUE];\n                        } else {\n                            t = dim + this.inputStack[nStack - (s & Frame.VALUE)];\n                        }\n                        if ((s & Frame.TOP_IF_LONG_OR_DOUBLE) !== 0 && (t === Frame.LONG_$LI$() || t === Frame.DOUBLE_$LI$())) {\n                            t = Frame.TOP_$LI$();\n                        }\n                    }\n                }\n            } else {\n                t = this.inputLocals[i];\n            }\n            if (this.initializations != null) {\n                t = this.init(cw, t);\n            }\n            changed = changed || Frame.merge(cw, t, frame.inputLocals, i);\n        }\n        if (edge > 0) {\n            for (i = 0; i < nLocal; ++i) {\n                t = this.inputLocals[i];\n                changed = changed || Frame.merge(cw, t, frame.inputLocals, i);\n            }\n            if (frame.inputStack == null) {\n                frame.inputStack = new Array(1);\n                changed = true;\n            }\n            changed = changed || Frame.merge(cw, edge, frame.inputStack, 0);\n            return changed;\n        }\n        let nInputStack: number = this.inputStack.length + this.owner.inputStackTop;\n        if (frame.inputStack == null) {\n            frame.inputStack = new Array(nInputStack + this.outputStackTop);\n            changed = true;\n        }\n        for (i = 0; i < nInputStack; ++i) {\n            t = this.inputStack[i];\n            if (this.initializations != null) {\n                t = this.init(cw, t);\n            }\n            changed = changed || Frame.merge(cw, t, frame.inputStack, i);\n        }\n        for (i = 0; i < this.outputStackTop; ++i) {\n            s = this.outputStack[i];\n            dim = s & Frame.DIM;\n            kind = s & Frame.KIND;\n            if (kind === Frame.BASE) {\n                t = s;\n            } else {\n                if (kind === Frame.LOCAL) {\n                    t = dim + this.inputLocals[s & Frame.VALUE];\n                } else {\n                    t = dim + this.inputStack[nStack - (s & Frame.VALUE)];\n                }\n                if ((s & Frame.TOP_IF_LONG_OR_DOUBLE) !== 0 && (t === Frame.LONG_$LI$() || t === Frame.DOUBLE_$LI$())) {\n                    t = Frame.TOP_$LI$();\n                }\n            }\n            if (this.initializations != null) {\n                t = this.init(cw, t);\n            }\n            changed = changed || Frame.merge(cw, t, frame.inputStack, nInputStack + i);\n        }\n        return changed;\n    }\n\n    /**\n     * Merges the type at the given index in the given type array with the given\n     * type. Returns <tt>true</tt> if the type array has been modified by this\n     * operation.\n     *\n     * @param cw\n     * the ClassWriter to which this label belongs.\n     * @param t\n     * the type with which the type array element must be merged.\n     * @param types\n     * an array of types.\n     * @param index\n     * the index of the type that must be merged in 'types'.\n     * @return <tt>true</tt> if the type array has been modified by this\n     * operation.\n     */\n    private static merge(cw: ClassWriter, t: number, types: number[], index: number): boolean {\n        let u: number = types[index];\n        if (u === t) {\n            return false;\n        }\n        if ((t & ~Frame.DIM) === Frame.NULL_$LI$()) {\n            if (u === Frame.NULL_$LI$()) {\n                return false;\n            }\n            t = Frame.NULL_$LI$();\n        }\n        if (u === 0) {\n            types[index] = t;\n            return true;\n        }\n        let v: number;\n        if ((u & Frame.BASE_KIND) === Frame.OBJECT_$LI$() || (u & Frame.DIM) !== 0) {\n            if (t === Frame.NULL_$LI$()) {\n                return false;\n            } else if ((t & (Frame.DIM | Frame.BASE_KIND)) === (u & (Frame.DIM | Frame.BASE_KIND))) {\n                if ((u & Frame.BASE_KIND) === Frame.OBJECT_$LI$()) {\n                    v = (t & Frame.DIM) | Frame.OBJECT_$LI$() | cw.getMergedType(t & Frame.BASE_VALUE, u & Frame.BASE_VALUE);\n                } else {\n                    let vdim: number = Frame.ELEMENT_OF + (u & Frame.DIM);\n                    v = vdim | Frame.OBJECT_$LI$() | cw.addType(\"java/lang/Object\");\n                }\n            } else if ((t & Frame.BASE_KIND) === Frame.OBJECT_$LI$() || (t & Frame.DIM) !== 0) {\n                let tdim: number = (((t & Frame.DIM) === 0 || (t & Frame.BASE_KIND) === Frame.OBJECT_$LI$()) ? 0 : Frame.ELEMENT_OF) + (t & Frame.DIM);\n                let udim: number = (((u & Frame.DIM) === 0 || (u & Frame.BASE_KIND) === Frame.OBJECT_$LI$()) ? 0 : Frame.ELEMENT_OF) + (u & Frame.DIM);\n                v = Math.min(tdim, udim) | Frame.OBJECT_$LI$() | cw.addType(\"java/lang/Object\");\n            } else {\n                v = Frame.TOP_$LI$();\n            }\n        } else if (u === Frame.NULL_$LI$()) {\n            v = (t & Frame.BASE_KIND) === Frame.OBJECT_$LI$() || (t & Frame.DIM) !== 0 ? t : Frame.TOP_$LI$();\n        } else {\n            v = Frame.TOP_$LI$();\n        }\n        if (u !== v) {\n            types[index] = v;\n            return true;\n        }\n        return false;\n    }\n\n    constructor(owner: Label) {\n        this.outputStackTop = 0;\n        this.initializationCount = 0;\n        this.owner = owner;\n    }\n}\n\nFrame.SIZE_$LI$();\n\nFrame.UNINITIALIZED_THIS_$LI$();\n\nFrame.NULL_$LI$();\n\nFrame.LONG_$LI$();\n\nFrame.DOUBLE_$LI$();\n\nFrame.FLOAT_$LI$();\n\nFrame.INTEGER_$LI$();\n\nFrame.SHORT_$LI$();\n\nFrame.CHAR_$LI$();\n\nFrame.BYTE_$LI$();\n\nFrame.BOOLEAN_$LI$();\n\nFrame.TOP_$LI$();\n\nFrame.UNINITIALIZED_$LI$();\n\nFrame.OBJECT_$LI$();\n\nFrame.__static_initialize();\n","/*\n * ASM: a very small and fast Java bytecode manipulation framework\n * Copyright (c) 2000-2011 INRIA, France Telecom\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n * 3. Neither the name of the copyright holders nor the names of its\n *    contributors may be used to endorse or promote products derived from\n *    this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\n * THE POSSIBILITY OF SUCH DAMAGE.\n */\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\n/**\n * An edge in the control flow graph of a method body. See {@link Label Label}.\n *\n * @author Eric Bruneton\n */\nimport { Label } from \"./Label\"\nexport class Edge {\n    /**\n     * Denotes a normal control flow graph edge.\n     */\n    static readonly NORMAL: number = 0;\n\n    /**\n     * Denotes a control flow graph edge corresponding to an exception handler.\n     * More precisely any {@link Edge} whose {@link #info} is strictly positive\n     * corresponds to an exception handler. The actual value of {@link #info} is\n     * the index, in the {@link ClassWriter} type table, of the exception that\n     * is catched.\n     */\n    static readonly EXCEPTION: number = 2147483647;\n\n    /**\n     * Information about this control flow graph edge. If\n     * {@link ClassWriter#COMPUTE_MAXS} is used this field is the (relative)\n     * stack size in the basic block from which this edge originates. This size\n     * is equal to the stack size at the \"jump\" instruction to which this edge\n     * corresponds, relatively to the stack size at the beginning of the\n     * originating basic block. If {@link ClassWriter#COMPUTE_FRAMES} is used,\n     * this field is the kind of this control flow graph edge (i.e. NORMAL or\n     * EXCEPTION).\n     */\n    info: number = 0;\n\n    /**\n     * The successor block of the basic block from which this edge originates.\n     */\n    successor!: Label | null;\n\n    /**\n     * The next edge in the list of successors of the originating basic block.\n     * See {@link Label#successors successors}.\n     */\n    next: Edge | null = null;\n\n    constructor() {\n        this.info = 0;\n    }\n}\n\n\n\n","/*\n * ASM: a very small and fast Java bytecode manipulation framework\n * Copyright (c) 2000-2011 INRIA, France Telecom\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n * 3. Neither the name of the copyright holders nor the names of its\n *    contributors may be used to endorse or promote products derived from\n *    this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\n * THE POSSIBILITY OF SUCH DAMAGE.\n */\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\n/**\n * A label represents a position in the bytecode of a method. Labels are used\n * for jump, goto, and switch instructions, and for try catch blocks. A label\n * designates the <i>instruction</i> that is just after. Note however that there\n * can be other elements between a label and the instruction it designates (such\n * as other labels, stack map frames, line numbers, etc.).\n *\n * @author Eric Bruneton\n */\nimport { Edge } from \"./Edge\"\nimport { MethodWriter } from \"./MethodWriter\";\nimport { Opcodes } from \"./Opcodes\";\nimport { ByteVector } from \"./ByteVector\";\nimport { Frame } from \"./Frame\";\nimport { ClassReader } from \"./ClassReader\";\nimport * as bits from \"./bits\";\nimport { assert } from \"./utils\";\nexport class Label {\n    /**\n     * Indicates if this label is only used for debug attributes. Such a label\n     * is not the start of a basic block, the target of a jump instruction, or\n     * an exception handler. It can be safely ignored in control flow graph\n     * analysis algorithms (for optimization purposes).\n     */\n    static DEBUG: number = 1;\n\n    /**\n     * Indicates if the position of this label is known.\n     */\n    static RESOLVED: number = 2;\n\n    /**\n     * Indicates if this label has been updated, after instruction resizing.\n     */\n    static RESIZED: number = 4;\n\n    /**\n     * Indicates if this basic block has been pushed in the basic block stack.\n     * See {@link MethodWriter#visitMaxs visitMaxs}.\n     */\n    static PUSHED: number = 8;\n\n    /**\n     * Indicates if this label is the target of a jump instruction, or the start\n     * of an exception handler.\n     */\n    static TARGET: number = 16;\n\n    /**\n     * Indicates if a stack map frame must be stored for this label.\n     */\n    static STORE: number = 32;\n\n    /**\n     * Indicates if this label corresponds to a reachable basic block.\n     */\n    static REACHABLE: number = 64;\n\n    /**\n     * Indicates if this basic block ends with a JSR instruction.\n     */\n    static JSR: number = 128;\n\n    /**\n     * Indicates if this basic block ends with a RET instruction.\n     */\n    static RET: number = 256;\n\n    /**\n     * Indicates if this basic block is the start of a subroutine.\n     */\n    static SUBROUTINE: number = 512;\n\n    /**\n     * Indicates if this subroutine basic block has been visited by a\n     * visitSubroutine(null, ...) call.\n     */\n    static VISITED: number = 1024;\n\n    /**\n     * Indicates if this subroutine basic block has been visited by a\n     * visitSubroutine(!null, ...) call.\n     */\n    static VISITED2: number = 2048;\n\n    /**\n     * Field used to associate user information to a label. Warning: this field\n     * is used by the ASM tree package. In order to use it with the ASM tree\n     * package you must override the\n     * {@link org.objectweb.asm.tree.MethodNode#getLabelNode} method.\n     */\n    public info: any;\n\n    /**\n     * Flags that indicate the status of this label.\n     *\n     * @see #DEBUG\n     * @see #RESOLVED\n     * @see #RESIZED\n     * @see #PUSHED\n     * @see #TARGET\n     * @see #STORE\n     * @see #REACHABLE\n     * @see #JSR\n     * @see #RET\n     */\n    status: number;\n\n    /**\n     * The line number corresponding to this label, if known. If there are\n     * several lines, each line is stored in a separate label, all linked via\n     * their next field (these links are created in ClassReader and removed just\n     * before visitLabel is called, so that this does not impact the rest of the\n     * code).\n     */\n    line: number;\n\n    /**\n     * The position of this label in the code, if known.\n     */\n    position: number;\n\n    /**\n     * Number of forward references to this label, times two.\n     */\n    private referenceCount: number;\n\n    /**\n     * Informations about forward references. Each forward reference is\n     * described by two consecutive integers in this array: the first one is the\n     * position of the first byte of the bytecode instruction that contains the\n     * forward reference, while the second is the position of the first byte of\n     * the forward reference itself. In fact the sign of the first integer\n     * indicates if this reference uses 2 or 4 bytes, and its absolute value\n     * gives the position of the bytecode instruction. This array is also used\n     * as a bitset to store the subroutines to which a basic block belongs. This\n     * information is needed in {@linked MethodWriter#visitMaxs}, after all\n     * forward references have been resolved. Hence the same array can be used\n     * for both purposes without problems.\n     */\n    private srcAndRefPositions: number[] | null = null;\n\n    /**\n     * Start of the output stack relatively to the input stack. The exact\n     * semantics of this field depends on the algorithm that is used.\n     *\n     * When only the maximum stack size is computed, this field is the number of\n     * elements in the input stack.\n     *\n     * When the stack map frames are completely computed, this field is the\n     * offset of the first output stack element relatively to the top of the\n     * input stack. This offset is always negative or null. A null offset means\n     * that the output stack must be appended to the input stack. A -n offset\n     * means that the first n output stack elements must replace the top n input\n     * stack elements, and that the other elements must be appended to the input\n     * stack.\n     */\n    inputStackTop: number;\n\n    /**\n     * Maximum height reached by the output stack, relatively to the top of the\n     * input stack. This maximum is always positive or null.\n     */\n    outputStackMax: number;\n\n    /**\n     * Information about the input and output stack map frames of this basic\n     * block. This field is only used when {@link ClassWriter#COMPUTE_FRAMES}\n     * option is used.\n     */\n    frame: Frame | null = null;\n\n    /**\n     * The successor of this label, in the order they are visited. This linked\n     * list does not include labels used for debug info only. If\n     * {@link ClassWriter#COMPUTE_FRAMES} option is used then, in addition, it\n     * does not contain successive labels that denote the same bytecode position\n     * (in this case only the first label appears in this list).\n     */\n    successor!: Label;\n\n    /**\n     * The successors of this node in the control flow graph. These successors\n     * are stored in a linked list of {@link Edge Edge} objects, linked to each\n     * other by their {@link Edge#next} field.\n     */\n    successors!: Edge;\n\n    /**\n     * The next basic block in the basic block stack. This stack is used in the\n     * main loop of the fix point algorithm used in the second step of the\n     * control flow analysis algorithms. It is also used in\n     * {@link #visitSubroutine} to avoid using a recursive method, and in\n     * ClassReader to temporarily store multiple source lines for a label.\n     *\n     * @see MethodWriter#visitMaxs\n     */\n    next: Label | null = null;\n\n    /**\n     * Constructs a new label.\n     */\n    public constructor() {\n        this.status = 0;\n        this.line = 0;\n        this.position = 0;\n        this.referenceCount = 0;\n        this.inputStackTop = 0;\n        this.outputStackMax = 0;\n    }\n\n    /**\n     * Returns the offset corresponding to this label. This offset is computed\n     * from the start of the method's bytecode. <i>This method is intended for\n     * {@link Attribute} sub classes, and is normally not needed by class\n     * generators or adapters.</i>\n     *\n     * @return the offset corresponding to this label.\n     * @throws IllegalStateException\n     * if this label is not resolved yet.\n     */\n    public getOffset(): number {\n        if ((this.status & Label.RESOLVED) === 0) {\n            throw new Error(\"Label offset position has not been resolved yet\");\n        }\n        return this.position;\n    }\n\n    /**\n     * Puts a reference to this label in the bytecode of a method. If the\n     * position of the label is known, the offset is computed and written\n     * directly. Otherwise, a null offset is written and a new forward reference\n     * is declared for this label.\n     *\n     * @param owner\n     * the code writer that calls this method.\n     * @param out\n     * the bytecode of the method.\n     * @param source\n     * the position of first byte of the bytecode instruction that\n     * contains this label.\n     * @param wideOffset\n     * <tt>true</tt> if the reference must be stored in 4 bytes, or\n     * <tt>false</tt> if it must be stored with 2 bytes.\n     * @throws IllegalArgumentException\n     * if this label has not been created by the given code writer.\n     */\n    put(owner: MethodWriter, out: ByteVector, source: number, wideOffset: boolean) {\n        if ((this.status & Label.RESOLVED) === 0) {\n            if (wideOffset) {\n                this.addReference(-1 - source, out.length);\n                out.putInt(-1);\n            } else {\n                this.addReference(source, out.length);\n                out.putShort(-1);\n            }\n        } else {\n            if (wideOffset) {\n                out.putInt(this.position - source);\n            } else {\n                out.putShort(this.position - source);\n            }\n        }\n    }\n\n    /**\n     * Adds a forward reference to this label. This method must be called only\n     * for a true forward reference, i.e. only if this label is not resolved\n     * yet. For backward references, the offset of the reference can be, and\n     * must be, computed and stored directly.\n     *\n     * @param sourcePosition\n     * the position of the referencing instruction. This position\n     * will be used to compute the offset of this forward reference.\n     * @param referencePosition\n     * the position where the offset for this forward reference must\n     * be stored.\n     */\n    private addReference(sourcePosition: number, referencePosition: number) {\n        if (this.srcAndRefPositions == null) {\n            this.srcAndRefPositions = new Array(6);\n        }\n        if (this.referenceCount >= this.srcAndRefPositions.length) {\n            let a: number[] = new Array(this.srcAndRefPositions.length + 6);\n            a.concat(this.srcAndRefPositions);\n            // java.lang.System.arraycopy(this.srcAndRefPositions, 0, a, 0, this.srcAndRefPositions.length);\n            this.srcAndRefPositions = a;\n        }\n        this.srcAndRefPositions[this.referenceCount++] = sourcePosition;\n        this.srcAndRefPositions[this.referenceCount++] = referencePosition;\n    }\n\n    /**\n     * Resolves all forward references to this label. This method must be called\n     * when this label is added to the bytecode of the method, i.e. when its\n     * position becomes known. This method fills in the blanks that where left\n     * in the bytecode by each forward reference previously added to this label.\n     *\n     * @param owner\n     * the code writer that calls this method.\n     * @param position\n     * the position of this label in the bytecode.\n     * @param data\n     * the bytecode of the method.\n     * @return <tt>true</tt> if a blank that was left for this label was to\n     * small to store the offset. In such a case the corresponding jump\n     * instruction is replaced with a pseudo instruction (using unused\n     * opcodes) using an unsigned two bytes offset. These pseudo\n     * instructions will be replaced with standard bytecode instructions\n     * with wider offsets (4 bytes instead of 2), in ClassReader.\n     * @throws IllegalArgumentException\n     * if this label has already been resolved, or if it has not\n     * been created by the given code writer.\n     */\n    resolve(owner: MethodWriter, position: number, data: Uint8Array): boolean {\n        assert(this.srcAndRefPositions);\n        let needUpdate: boolean = false;\n        this.status |= Label.RESOLVED;\n        this.position = position;\n        let i: number = 0;\n        while ((i < this.referenceCount)) {\n            let source: number = this.srcAndRefPositions[i++];\n            let reference: number = this.srcAndRefPositions[i++];\n            let offset: number;\n            if (source >= 0) {\n                offset = position - source;\n                if (offset < bits.SHORT_MIN || offset > bits.SHORT_MAX) {\n                    let opcode: number = data[reference - 1] & 255;\n                    if (opcode <= Opcodes.JSR) {\n                        data[reference - 1] = ((opcode + 49) | 0);\n                    } else {\n                        data[reference - 1] = ((opcode + 20) | 0);\n                    }\n                    needUpdate = true;\n                }\n                data[reference++] = ((offset >>> 8) | 0);\n                data[reference] = (offset | 0);\n            } else {\n                offset = position + source + 1;\n                data[reference++] = ((offset >>> 24) | 0);\n                data[reference++] = ((offset >>> 16) | 0);\n                data[reference++] = ((offset >>> 8) | 0);\n                data[reference] = (offset | 0);\n            }\n        };\n        return needUpdate;\n    }\n\n    /**\n     * Returns the first label of the series to which this label belongs. For an\n     * isolated label or for the first label in a series of successive labels,\n     * this method returns the label itself. For other labels it returns the\n     * first label of the series.\n     *\n     * @return the first label of the series to which this label belongs.\n     */\n    getFirst(): Label {\n        return !ClassReader.FRAMES || this.frame == null ? this : this.frame.owner;\n    }\n\n    /**\n     * Returns true is this basic block belongs to the given subroutine.\n     *\n     * @param id\n     * a subroutine id.\n     * @return true is this basic block belongs to the given subroutine.\n     */\n    inSubroutine(id: number): boolean {\n        assert(this.srcAndRefPositions);\n        if ((this.status & Label.VISITED) !== 0) {\n            return (this.srcAndRefPositions[((id >>> 32) | 0)] & (id | 0)) !== 0;\n        }\n        return false;\n    }\n\n    /**\n     * Returns true if this basic block and the given one belong to a common\n     * subroutine.\n     *\n     * @param block\n     * another basic block.\n     * @return true if this basic block and the given one belong to a common\n     * subroutine.\n     */\n    inSameSubroutine(block: Label): boolean {\n        if ((this.status & Label.VISITED) === 0 || (block.status & Label.VISITED) === 0) {\n            return false;\n        }\n        assert(this.srcAndRefPositions);\n        assert(block.srcAndRefPositions);\n        for (let i: number = 0; i < this.srcAndRefPositions.length; ++i) {\n            if ((this.srcAndRefPositions[i] & block.srcAndRefPositions[i]) !== 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Marks this basic block as belonging to the given subroutine.\n     *\n     * @param id\n     * a subroutine id.\n     * @param nbSubroutines\n     * the total number of subroutines in the method.\n     */\n    addToSubroutine(id: number, nbSubroutines: number) {\n        assert(this.srcAndRefPositions);\n        if ((this.status & Label.VISITED) === 0) {\n            this.status |= Label.VISITED;\n            this.srcAndRefPositions = new Array((nbSubroutines / 32 | 0) + 1);\n        }\n        this.srcAndRefPositions[((id >>> 32) | 0)] |= (id | 0);\n    }\n\n    /**\n     * Finds the basic blocks that belong to a given subroutine, and marks these\n     * blocks as belonging to this subroutine. This method follows the control\n     * flow graph to find all the blocks that are reachable from the current\n     * block WITHOUT following any JSR target.\n     *\n     * @param JSR\n     * a JSR block that jumps to this subroutine. If this JSR is not\n     * null it is added to the successor of the RET blocks found in\n     * the subroutine.\n     * @param id\n     * the id of this subroutine.\n     * @param nbSubroutines\n     * the total number of subroutines in the method.\n     */\n    visitSubroutine(JSR: Label | null, id: number, nbSubroutines: number) {\n        let stack: Label | null = this;\n        while ((stack != null)) {\n            let l: Label = stack;\n            stack = l.next;\n            l.next = null;\n            if (JSR != null) {\n                if ((l.status & Label.VISITED2) !== 0) {\n                    continue;\n                }\n                l.status |= Label.VISITED2;\n                if ((l.status & Label.RET) !== 0) {\n                    if (!l.inSameSubroutine(JSR)) {\n                        let e: Edge = new Edge();\n                        e.info = l.inputStackTop;\n                        e.successor = JSR.successors.successor;\n                        e.next = l.successors;\n                        l.successors = e;\n                    }\n                }\n            } else {\n                if (l.inSubroutine(id)) {\n                    continue;\n                }\n                l.addToSubroutine(id, nbSubroutines);\n            }\n            let e: Edge | null = l.successors;\n            while ((e != null)) {\n                if ((l.status & Label.JSR) === 0 || (l.successors && e !== l.successors.next)) {\n                    if (e.successor && e.successor.next == null) {\n                        e.successor.next = stack;\n                        stack = e.successor;\n                    }\n                }\n                e = e.next;\n            };\n        };\n    }\n\n    /**\n     * Returns a string representation of this label.\n     *\n     * @return a string representation of this label.\n     */\n    public toString(): string {\n        return \"Lable\"\n        // return \"L\" + java.lang.System.identityHashCode(this);\n    }\n}\n","/*\n * ASM: a very small and fast Java bytecode manipulation framework\n * Copyright (c) 2000-2011 INRIA, France Telecom\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n * 3. Neither the name of the copyright holders nor the names of its\n *    contributors may be used to endorse or promote products derived from\n *    this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\n * THE POSSIBILITY OF SUCH DAMAGE.\n */\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\n/**\n * Information about the input stack map frame at the \"current\" instruction of a\n * method. This is implemented as a Frame subclass for a \"basic block\"\n * containing only one instruction.\n *\n * @author Eric Bruneton\n */\nimport { Frame } from \"./Frame\";\nimport { ClassWriter } from \"./ClassWriter\";\nimport { Item } from \"./Item\";\nimport { assert } from \"./utils\";\n\nexport class CurrentFrame extends Frame {\n    /**\n     * Sets this CurrentFrame to the input stack map frame of the next \"current\"\n     * instruction, i.e. the instruction just after the given one. It is assumed\n     * that the value of this object when this method is called is the stack map\n     * frame status just before the given instruction is executed.\n     */\n    execute(opcode : number, arg : number, cw : ClassWriter, item : Item) {\n        super.execute(opcode, arg, cw, item);\n        let successor : Frame = new Frame(null as any);\n        this.merge(cw, successor, 0);\n        this.set$Frame(successor);\n        this.owner.inputStackTop = 0;\n    }\n}\n","/*\n * ASM: a very small and fast Java bytecode manipulation framework\n * Copyright (c) 2000-2011 INRIA, France Telecom\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n * 3. Neither the name of the copyright holders nor the names of its\n *    contributors may be used to endorse or promote products derived from\n *    this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\n * THE POSSIBILITY OF SUCH DAMAGE.\n */\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\n/**\n * A {@link MethodVisitor} that generates methods in bytecode form. Each visit\n * method of this class appends the bytecode corresponding to the visited\n * instruction to a byte vector, in the order these methods are called.\n *\n * @author Eric Bruneton\n * @author Eugene Kuleshov\n */\nimport { MethodVisitor } from \"./MethodVisitor\"\nimport { ByteVector } from \"./ByteVector\";\nimport { Attribute } from \"./Attribute\";\nimport { AnnotationWriter } from \"./AnnotationWriter\";\nimport { AnnotationVisitor } from \"./AnnotationVisitor\";\nimport { ClassReader } from \"./ClassReader\";\nimport { Opcodes } from \"./Opcodes\";\nimport { Frame } from \"./Frame\";\nimport { Type } from \"./Type\";\nimport { Edge } from \"./Edge\";\nimport { Label } from \"./Label\";\nimport { TypePath } from \"./TypePath\";\nimport { Item } from \"./Item\";\nimport { ClassWriter } from \"./ClassWriter\";\nimport { Handle } from \"./Handle\";\nimport { CurrentFrame } from \"./CurrentFrame\";\nimport * as bits from \"./bits\";\nimport { assert } from \"./utils\";\nexport class MethodWriter extends MethodVisitor {\n    /**\n     * Pseudo access flag used to denote constructors.\n     */\n    static ACC_CONSTRUCTOR: number = 524288;\n\n    /**\n     * Frame has exactly the same locals as the previous stack map frame and\n     * number of stack items is zero.\n     */\n    static SAME_FRAME: number = 0;\n\n    /**\n     * Frame has exactly the same locals as the previous stack map frame and\n     * number of stack items is 1\n     */\n    static SAME_LOCALS_1_STACK_ITEM_FRAME: number = 64;\n\n    /**\n     * Reserved for future use\n     */\n    static RESERVED: number = 128;\n\n    /**\n     * Frame has exactly the same locals as the previous stack map frame and\n     * number of stack items is 1. Offset is bigger then 63;\n     */\n    static SAME_LOCALS_1_STACK_ITEM_FRAME_EXTENDED: number = 247;\n\n    /**\n     * Frame where current locals are the same as the locals in the previous\n     * frame, except that the k last locals are absent. The value of k is given\n     * by the formula 251-frame_type.\n     */\n    static CHOP_FRAME: number = 248;\n\n    /**\n     * Frame has exactly the same locals as the previous stack map frame and\n     * number of stack items is zero. Offset is bigger then 63;\n     */\n    static SAME_FRAME_EXTENDED: number = 251;\n\n    /**\n     * Frame where current locals are the same as the locals in the previous\n     * frame, except that k additional locals are defined. The value of k is\n     * given by the formula frame_type-251.\n     */\n    static APPEND_FRAME: number = 252;\n\n    /**\n     * Full frame\n     */\n    static FULL_FRAME: number = 255;\n\n    /**\n     * Indicates that the stack map frames must be recomputed from scratch. In\n     * this case the maximum stack size and number of local variables is also\n     * recomputed from scratch.\n     *\n     * @see #compute\n     */\n    static FRAMES: number = 0;\n\n    /**\n     * Indicates that the stack map frames of type F_INSERT must be computed.\n     * The other frames are not (re)computed. They should all be of type F_NEW\n     * and should be sufficient to compute the content of the F_INSERT frames,\n     * together with the bytecode instructions between a F_NEW and a F_INSERT\n     * frame - and without any knowledge of the type hierarchy (by definition of\n     * F_INSERT).\n     *\n     * @see #compute\n     */\n    static INSERTED_FRAMES: number = 1;\n\n    /**\n     * Indicates that the maximum stack size and number of local variables must\n     * be automatically computed.\n     *\n     * @see #compute\n     */\n    static MAXS: number = 2;\n\n    /**\n     * Indicates that nothing must be automatically computed.\n     *\n     * @see #compute\n     */\n    static NOTHING: number = 3;\n\n    /**\n     * The class writer to which this method must be added.\n     */\n    cw: ClassWriter;\n\n    /**\n     * Access flags of this method.\n     */\n    private access: number;\n\n    /**\n     * The index of the constant pool item that contains the name of this\n     * method.\n     */\n    private name: number;\n\n    /**\n     * The index of the constant pool item that contains the descriptor of this\n     * method.\n     */\n    private desc: number;\n\n    /**\n     * The descriptor of this method.\n     */\n    private descriptor: string;\n\n    /**\n     * The signature of this method.\n     */\n    signature: string | null = null;\n\n    /**\n     * If not zero, indicates that the code of this method must be copied from\n     * the ClassReader associated to this writer in <code>cw.cr</code>. More\n     * precisely, this field gives the index of the first byte to copied from\n     * <code>cw.cr.b</code>.\n     */\n    classReaderOffset: number;\n\n    /**\n     * If not zero, indicates that the code of this method must be copied from\n     * the ClassReader associated to this writer in <code>cw.cr</code>. More\n     * precisely, this field gives the number of bytes to copied from\n     * <code>cw.cr.b</code>.\n     */\n    classReaderLength: number;\n\n    /**\n     * Number of exceptions that can be thrown by this method.\n     */\n    exceptionCount: number;\n\n    /**\n     * The exceptions that can be thrown by this method. More precisely, this\n     * array contains the indexes of the constant pool items that contain the\n     * internal names of these exception classes.\n     */\n    exceptions: number[] | null = null;\n\n    /**\n     * The annotation default attribute of this method. May be <tt>null</tt>.\n     */\n    private annd: ByteVector | null = null;\n\n    /**\n     * The runtime visible annotations of this method. May be <tt>null</tt>.\n     */\n    private anns: AnnotationWriter | null = null;\n\n    /**\n     * The runtime invisible annotations of this method. May be <tt>null</tt>.\n     */\n    private ianns: AnnotationWriter | null = null;\n\n    /**\n     * The runtime visible type annotations of this method. May be <tt>null</tt>\n     * .\n     */\n    private tanns: AnnotationWriter | null = null;\n\n    /**\n     * The runtime invisible type annotations of this method. May be\n     * <tt>null</tt>.\n     */\n    private itanns: AnnotationWriter | null = null;\n\n    /**\n     * The runtime visible parameter annotations of this method. May be\n     * <tt>null</tt>.\n     */\n    private panns: AnnotationWriter[] | null = null;\n\n    /**\n     * The runtime invisible parameter annotations of this method. May be\n     * <tt>null</tt>.\n     */\n    private ipanns: AnnotationWriter[] | null = null;\n\n    /**\n     * The number of synthetic parameters of this method.\n     */\n    private synthetics: number;\n\n    /**\n     * The non standard attributes of the method.\n     */\n    private attrs: Attribute | null = null;\n\n    /**\n     * The bytecode of this method.\n     */\n    private code: ByteVector = new ByteVector();\n\n    /**\n     * Maximum stack size of this method.\n     */\n    private maxStack: number;\n\n    /**\n     * Maximum number of local variables for this method.\n     */\n    private maxLocals: number;\n\n    /**\n     * Number of local variables in the current stack map frame.\n     */\n    private currentLocals: number;\n\n    /**\n     * Number of stack map frames in the StackMapTable attribute.\n     */\n    private frameCount: number;\n\n    /**\n     * The StackMapTable attribute.\n     */\n    private stackMap: ByteVector | null = null;\n\n    /**\n     * The offset of the last frame that was written in the StackMapTable\n     * attribute.\n     */\n    private previousFrameOffset: number;\n\n    /**\n     * The last frame that was written in the StackMapTable attribute.\n     *\n     * @see #frame\n     */\n    private previousFrame: number[] | null = null;\n\n    /**\n     * The current stack map frame. The first element contains the offset of the\n     * instruction to which the frame corresponds, the second element is the\n     * number of locals and the third one is the number of stack elements. The\n     * local variables start at index 3 and are followed by the operand stack\n     * values. In summary frame[0] = offset, frame[1] = nLocal, frame[2] =\n     * nStack, frame[3] = nLocal. All types are encoded as integers, with the\n     * same format as the one used in {@link Label}, but limited to BASE types.\n     */\n    private frame: number[] | null = null;\n\n    /**\n     * Number of elements in the exception handler list.\n     */\n    private handlerCount: number;\n\n    /**\n     * The first element in the exception handler list.\n     */\n    private firstHandler: Handler | null = null;\n\n    /**\n     * The last element in the exception handler list.\n     */\n    private lastHandler: Handler | null = null;\n\n    /**\n     * Number of entries in the MethodParameters attribute.\n     */\n    private methodParametersCount: number;\n\n    /**\n     * The MethodParameters attribute.\n     */\n    private methodParameters: ByteVector | null = null;\n\n    /**\n     * Number of entries in the LocalVariableTable attribute.\n     */\n    private localVarCount: number;\n\n    /**\n     * The LocalVariableTable attribute.\n     */\n    private localVar: ByteVector | null = null;\n\n    /**\n     * Number of entries in the LocalVariableTypeTable attribute.\n     */\n    private localVarTypeCount: number;\n\n    /**\n     * The LocalVariableTypeTable attribute.\n     */\n    private localVarType: ByteVector | null = null;\n\n    /**\n     * Number of entries in the LineNumberTable attribute.\n     */\n    private lineNumberCount: number;\n\n    /**\n     * The LineNumberTable attribute.\n     */\n    private lineNumber: ByteVector | null = null;\n\n    /**\n     * The start offset of the last visited instruction.\n     */\n    private lastCodeOffset: number;\n\n    /**\n     * The runtime visible type annotations of the code. May be <tt>null</tt>.\n     */\n    private ctanns: AnnotationWriter | null = null;\n\n    /**\n     * The runtime invisible type annotations of the code. May be <tt>null</tt>.\n     */\n    private ictanns: AnnotationWriter | null = null;\n\n    /**\n     * The non standard attributes of the method's code.\n     */\n    private cattrs: Attribute | null = null;\n\n    /**\n     * The number of subroutines in this method.\n     */\n    private subroutines: number;\n\n    /**\n     * Indicates what must be automatically computed.\n     *\n     * @see #FRAMES\n     * @see #INSERTED_FRAMES\n     * @see #MAXS\n     * @see #NOTHING\n     */\n    private compute: number;\n\n    /**\n     * A list of labels. This list is the list of basic blocks in the method,\n     * i.e. a list of Label objects linked to each other by their\n     * {@link Label#successor} field, in the order they are visited by\n     * {@link MethodVisitor#visitLabel}, and starting with the first basic\n     * block.\n     */\n    private labels: Label | null = null;\n\n    /**\n     * The previous basic block.\n     */\n    private previousBlock: Label | null = null;\n\n    /**\n     * The current basic block.\n     */\n    private currentBlock: Label | null = null;\n\n    /**\n     * The (relative) stack size after the last visited instruction. This size\n     * is relative to the beginning of the current basic block, i.e., the true\n     * stack size after the last visited instruction is equal to the\n     * {@link Label#inputStackTop beginStackSize} of the current basic block\n     * plus <tt>stackSize</tt>.\n     */\n    private stackSize: number;\n\n    /**\n     * The (relative) maximum stack size after the last visited instruction.\n     * This size is relative to the beginning of the current basic block, i.e.,\n     * the true maximum stack size after the last visited instruction is equal\n     * to the {@link Label#inputStackTop beginStackSize} of the current basic\n     * block plus <tt>stackSize</tt>.\n     */\n    private maxStackSize: number;\n\n    /**\n     * Constructs a new {@link MethodWriter}.\n     *\n     * @param cw\n     * the class writer in which the method must be added.\n     * @param access\n     * the method's access flags (see {@link Opcodes}).\n     * @param name\n     * the method's name.\n     * @param desc\n     * the method's descriptor (see {@link Type}).\n     * @param signature\n     * the method's signature. May be <tt>null</tt>.\n     * @param exceptions\n     * the internal names of the method's exceptions. May be\n     * <tt>null</tt>.\n     * @param compute\n     * Indicates what must be automatically computed (see #compute).\n     */\n    constructor(cw: ClassWriter, access: number, name: string, desc: string, signature: string, exceptions: string[], compute: number) {\n        super(Opcodes.ASM5);\n        this.access = 0;\n        this.name = 0;\n        this.desc = 0;\n        this.classReaderOffset = 0;\n        this.classReaderLength = 0;\n        this.exceptionCount = 0;\n        this.synthetics = 0;\n        this.maxStack = 0;\n        this.maxLocals = 0;\n        this.currentLocals = 0;\n        this.frameCount = 0;\n        this.previousFrameOffset = 0;\n        this.handlerCount = 0;\n        this.methodParametersCount = 0;\n        this.localVarCount = 0;\n        this.localVarTypeCount = 0;\n        this.lineNumberCount = 0;\n        this.lastCodeOffset = 0;\n        this.subroutines = 0;\n        this.compute = 0;\n        this.stackSize = 0;\n        this.maxStackSize = 0;\n        if (cw.firstMethod == null) {\n            cw.firstMethod = this;\n        } else {\n            cw.lastMethod.mv = this;\n        }\n        cw.lastMethod = this;\n        this.cw = cw;\n        this.access = access;\n        if ((\"<init>\" === name)) {\n            this.access |= MethodWriter.ACC_CONSTRUCTOR;\n        }\n        this.name = cw.newUTF8(name);\n        this.desc = cw.newUTF8(desc);\n        this.descriptor = desc;\n        if (ClassReader.SIGNATURES) {\n            this.signature = signature;\n        }\n        if (exceptions != null && exceptions.length > 0) {\n            this.exceptionCount = exceptions.length;\n            this.exceptions = new Array(this.exceptionCount);\n            for (let i: number = 0; i < this.exceptionCount; ++i) {\n                this.exceptions[i] = cw.newClass(exceptions[i]);\n            }\n        }\n        this.compute = compute;\n        if (compute !== MethodWriter.NOTHING) {\n            let size: number = Type.getArgumentsAndReturnSizes(this.descriptor) >> 2;\n            if ((access & Opcodes.ACC_STATIC) !== 0) {\n                --size;\n            }\n            this.maxLocals = size;\n            this.currentLocals = size;\n            this.labels = new Label();\n            this.labels.status |= Label.PUSHED;\n            this.visitLabel(this.labels);\n        }\n    }\n\n    public visitParameter(name: string, access: number) {\n        if (this.methodParameters == null) {\n            this.methodParameters = new ByteVector();\n        }\n        ++this.methodParametersCount;\n        this.methodParameters.putShort((name == null) ? 0 : this.cw.newUTF8(name)).putShort(access);\n    }\n\n    public visitAnnotationDefault(): AnnotationVisitor | null {\n        if (!ClassReader.ANNOTATIONS) {\n            return null;\n        }\n        this.annd = new ByteVector();\n        return new AnnotationWriter(this.cw, false, this.annd, null, 0);\n    }\n\n    public visitAnnotation(desc: string, visible: boolean): AnnotationVisitor | null {\n        if (!ClassReader.ANNOTATIONS) {\n            return null;\n        }\n        let bv: ByteVector = new ByteVector();\n        bv.putShort(this.cw.newUTF8(desc)).putShort(0);\n        let aw: AnnotationWriter = new AnnotationWriter(this.cw, true, bv, bv, 2);\n        if (visible) {\n            aw.next = this.anns;\n            this.anns = aw;\n        } else {\n            aw.next = this.ianns;\n            this.ianns = aw;\n        }\n        return aw;\n    }\n\n    public visitTypeAnnotation(typeRef: number, typePath: TypePath, desc: string, visible: boolean): AnnotationVisitor | null {\n        if (!ClassReader.ANNOTATIONS) {\n            return null;\n        }\n        let bv: ByteVector = new ByteVector();\n        AnnotationWriter.putTarget(typeRef, typePath, bv);\n        bv.putShort(this.cw.newUTF8(desc)).putShort(0);\n        let aw: AnnotationWriter = new AnnotationWriter(this.cw, true, bv, bv, bv.length - 2);\n        if (visible) {\n            aw.next = this.tanns;\n            this.tanns = aw;\n        } else {\n            aw.next = this.itanns;\n            this.itanns = aw;\n        }\n        return aw;\n    }\n\n    public visitParameterAnnotation(parameter: number, desc: string, visible: boolean): AnnotationVisitor | null {\n        if (!ClassReader.ANNOTATIONS) {\n            return null;\n        }\n        let bv: ByteVector = new ByteVector();\n        if ((\"Ljava/lang/Synthetic;\" === desc)) {\n            this.synthetics = Math.max(this.synthetics, parameter + 1);\n            return new AnnotationWriter(this.cw, false, bv, null, 0);\n        }\n        bv.putShort(this.cw.newUTF8(desc)).putShort(0);\n        let aw: AnnotationWriter = new AnnotationWriter(this.cw, true, bv, bv, 2);\n        if (visible) {\n            if (this.panns == null) {\n                this.panns = new Array(Type.getArgumentTypes(this.descriptor).length);\n            }\n            aw.next = this.panns[parameter];\n            this.panns[parameter] = aw;\n        } else {\n            if (this.ipanns == null) {\n                this.ipanns = new Array(Type.getArgumentTypes(this.descriptor).length);\n            }\n            aw.next = this.ipanns[parameter];\n            this.ipanns[parameter] = aw;\n        }\n        return aw;\n    }\n\n    public visitAttribute(attr: Attribute) {\n        if (attr.isCodeAttribute()) {\n            attr.next = this.cattrs;\n            this.cattrs = attr;\n        } else {\n            attr.next = this.attrs;\n            this.attrs = attr;\n        }\n    }\n\n    public visitCode() {\n    }\n\n    public visitFrame(type?: any, nLocal?: any, local?: any, nStack?: any, stack?: any): any {\n        assert(this.frame)\n        if (((typeof type === \"number\") || type === null) && ((typeof nLocal === \"number\") || nLocal === null) && ((local != null && local instanceof Array) || local === null) && ((typeof nStack === \"number\") || nStack === null) && ((stack != null && stack instanceof Array) || stack === null)) {\n            let __args = Array.prototype.slice.call(arguments);\n            return <any>(() => {\n                if (!ClassReader.FRAMES || this.compute === MethodWriter.FRAMES) {\n                    return;\n                }\n                if (this.compute === MethodWriter.INSERTED_FRAMES) {\n                    if (this.currentBlock && this.currentBlock.frame == null) {\n                        this.currentBlock.frame = new CurrentFrame(this.currentBlock);\n                        this.currentBlock.frame.initInputFrame(this.cw, this.access, Type.getArgumentTypes(this.descriptor), nLocal);\n                        this.visitImplicitFirstFrame();\n                    } else {\n                        assert(this.currentBlock);\n                        if (type === Opcodes.F_NEW) {\n                            assert(this.currentBlock.frame);\n                            this.currentBlock.frame.set(this.cw, nLocal, local, nStack, stack);\n                        } else {\n                        }\n                        this.visitFrame(this.currentBlock.frame);\n                    }\n                } else if (type === Opcodes.F_NEW) {\n                    if (this.previousFrame == null) {\n                        this.visitImplicitFirstFrame();\n                    }\n                    this.currentLocals = nLocal;\n                    let frameIndex: number = this.startFrame(this.code.length, nLocal, nStack);\n                    for (let i: number = 0; i < nLocal; ++i) {\n                        if (typeof local[i] === \"string\") {\n                            this.frame[frameIndex++] = Frame.OBJECT_$LI$() | this.cw.addType(<string>local[i]);\n                        } else if (typeof local[i] === \"number\") {\n                            this.frame[frameIndex++] = /* intValue */((<number>local[i]) | 0);\n                        } else {\n                            this.frame[frameIndex++] = Frame.UNINITIALIZED_$LI$() | this.cw.addUninitializedType(\"\", (<Label>local[i]).position);\n                        }\n                    }\n                    for (let i: number = 0; i < nStack; ++i) {\n                        if (typeof stack[i] === \"string\") {\n                            this.frame[frameIndex++] = Frame.OBJECT_$LI$() | this.cw.addType(<string>stack[i]);\n                        } else if (typeof stack[i] === \"number\") {\n                            this.frame[frameIndex++] = /* intValue */((<number>stack[i]) | 0);\n                        } else {\n                            this.frame[frameIndex++] = Frame.UNINITIALIZED_$LI$() | this.cw.addUninitializedType(\"\", (<Label>stack[i]).position);\n                        }\n                    }\n                    this.endFrame();\n                } else {\n                    let delta: number;\n                    if (this.stackMap == null) {\n                        this.stackMap = new ByteVector();\n                        delta = this.code.length;\n                    } else {\n                        delta = this.code.length - this.previousFrameOffset - 1;\n                        if (delta < 0) {\n                            if (type === Opcodes.F_SAME) {\n                                return;\n                            } else {\n                                throw new Error();\n                            }\n                        }\n                    }\n                    switch ((type)) {\n                        case Opcodes.F_FULL:\n                            this.currentLocals = nLocal;\n                            this.stackMap.putByte(MethodWriter.FULL_FRAME).putShort(delta).putShort(nLocal);\n                            for (let i: number = 0; i < nLocal; ++i) {\n                                this.writeFrameType(local[i]);\n                            }\n                            this.stackMap.putShort(nStack);\n                            for (let i: number = 0; i < nStack; ++i) {\n                                this.writeFrameType(stack[i]);\n                            }\n                            break;\n                        case Opcodes.F_APPEND:\n                            this.currentLocals += nLocal;\n                            this.stackMap.putByte(MethodWriter.SAME_FRAME_EXTENDED + nLocal).putShort(delta);\n                            for (let i: number = 0; i < nLocal; ++i) {\n                                this.writeFrameType(local[i]);\n                            }\n                            break;\n                        case Opcodes.F_CHOP:\n                            this.currentLocals -= nLocal;\n                            this.stackMap.putByte(MethodWriter.SAME_FRAME_EXTENDED - nLocal).putShort(delta);\n                            break;\n                        case Opcodes.F_SAME:\n                            if (delta < 64) {\n                                this.stackMap.putByte(delta);\n                            } else {\n                                this.stackMap.putByte(MethodWriter.SAME_FRAME_EXTENDED).putShort(delta);\n                            }\n                            break;\n                        case Opcodes.F_SAME1:\n                            if (delta < 64) {\n                                this.stackMap.putByte(MethodWriter.SAME_LOCALS_1_STACK_ITEM_FRAME + delta);\n                            } else {\n                                this.stackMap.putByte(MethodWriter.SAME_LOCALS_1_STACK_ITEM_FRAME_EXTENDED).putShort(delta);\n                            }\n                            this.writeFrameType(stack[0]);\n                            break;\n                    }\n                    this.previousFrameOffset = this.code.length;\n                    ++this.frameCount;\n                }\n                this.maxStack = Math.max(this.maxStack, nStack);\n                this.maxLocals = Math.max(this.maxLocals, this.currentLocals);\n            })();\n        } else if (((type != null && type instanceof Frame) || type === null) && nLocal === undefined && local === undefined && nStack === undefined && stack === undefined) {\n            return <any>this.visitFrame$Frame(type);\n        } else { throw new Error(\"invalid overload\"); }\n    }\n\n    public visitInsn(opcode: number) {\n        this.lastCodeOffset = this.code.length;\n        this.code.putByte(opcode);\n        if (this.currentBlock != null) {\n            if (this.compute === MethodWriter.FRAMES || this.compute === MethodWriter.INSERTED_FRAMES) {\n                assert(this.currentBlock.frame);\n                this.currentBlock.frame.execute(opcode, 0, null, null);\n            } else {\n                let size: number = this.stackSize + Frame.SIZE_$LI$()[opcode];\n                if (size > this.maxStackSize) {\n                    this.maxStackSize = size;\n                }\n                this.stackSize = size;\n            }\n            if ((opcode >= Opcodes.IRETURN && opcode <= Opcodes.RETURN) || opcode === Opcodes.ATHROW) {\n                this.noSuccessor();\n            }\n        }\n    }\n\n    public visitIntInsn(opcode: number, operand: number) {\n        this.lastCodeOffset = this.code.length;\n        if (this.currentBlock != null) {\n            if (this.compute === MethodWriter.FRAMES || this.compute === MethodWriter.INSERTED_FRAMES) {\n                assert(this.currentBlock.frame);\n                this.currentBlock.frame.execute(opcode, operand, null, null);\n            } else if (opcode !== Opcodes.NEWARRAY) {\n                let size: number = this.stackSize + 1;\n                if (size > this.maxStackSize) {\n                    this.maxStackSize = size;\n                }\n                this.stackSize = size;\n            }\n        }\n        if (opcode === Opcodes.SIPUSH) {\n            this.code.put12(opcode, operand);\n        } else {\n            this.code.put11(opcode, operand);\n        }\n    }\n\n    public visitVarInsn(opcode: number, __var: number) {\n        this.lastCodeOffset = this.code.length;\n        if (this.currentBlock != null) {\n            if (this.compute === MethodWriter.FRAMES || this.compute === MethodWriter.INSERTED_FRAMES) {\n                assert(this.currentBlock.frame);\n                this.currentBlock.frame.execute(opcode, __var, null, null);\n            } else {\n                if (opcode === Opcodes.RET) {\n                    this.currentBlock.status |= Label.RET;\n                    this.currentBlock.inputStackTop = this.stackSize;\n                    this.noSuccessor();\n                } else {\n                    let size: number = this.stackSize + Frame.SIZE_$LI$()[opcode];\n                    if (size > this.maxStackSize) {\n                        this.maxStackSize = size;\n                    }\n                    this.stackSize = size;\n                }\n            }\n        }\n        if (this.compute !== MethodWriter.NOTHING) {\n            let n: number;\n            if (opcode === Opcodes.LLOAD || opcode === Opcodes.DLOAD || opcode === Opcodes.LSTORE || opcode === Opcodes.DSTORE) {\n                n = __var + 2;\n            } else {\n                n = __var + 1;\n            }\n            if (n > this.maxLocals) {\n                this.maxLocals = n;\n            }\n        }\n        if (__var < 4 && opcode !== Opcodes.RET) {\n            let opt: number;\n            if (opcode < Opcodes.ISTORE) {\n                opt = 26 + ((opcode - Opcodes.ILOAD) << 2) + __var;\n            } else {\n                opt = 59 + ((opcode - Opcodes.ISTORE) << 2) + __var;\n            }\n            this.code.putByte(opt);\n        } else if (__var >= 256) {\n            this.code.putByte(196).put12(opcode, __var);\n        } else {\n            this.code.put11(opcode, __var);\n        }\n        if (opcode >= Opcodes.ISTORE && this.compute === MethodWriter.FRAMES && this.handlerCount > 0) {\n            this.visitLabel(new Label());\n        }\n    }\n\n    public visitTypeInsn(opcode: number, type: string) {\n        this.lastCodeOffset = this.code.length;\n        let i: Item = this.cw.newClassItem(type);\n        if (this.currentBlock != null) {\n            if (this.compute === MethodWriter.FRAMES || this.compute === MethodWriter.INSERTED_FRAMES) {\n                assert(this.currentBlock.frame);\n                this.currentBlock.frame.execute(opcode, this.code.length, this.cw, i);\n            } else if (opcode === Opcodes.NEW) {\n                let size: number = this.stackSize + 1;\n                if (size > this.maxStackSize) {\n                    this.maxStackSize = size;\n                }\n                this.stackSize = size;\n            }\n        }\n        this.code.put12(opcode, i.index);\n    }\n\n    public visitFieldInsn(opcode: number, owner: string, name: string, desc: string) {\n        this.lastCodeOffset = this.code.length;\n        let i: Item = this.cw.newFieldItem(owner, name, desc);\n        if (this.currentBlock != null) {\n            if (this.compute === MethodWriter.FRAMES || this.compute === MethodWriter.INSERTED_FRAMES) {\n                assert(this.currentBlock.frame);\n                this.currentBlock.frame.execute(opcode, 0, this.cw, i);\n            } else {\n                let size: number;\n                let c: string = desc.charAt(0);\n                switch ((opcode)) {\n                    case Opcodes.GETSTATIC:\n                        size = this.stackSize + (c === \"D\" || c === \"J\" ? 2 : 1);\n                        break;\n                    case Opcodes.PUTSTATIC:\n                        size = this.stackSize + (c === \"D\" || c === \"J\" ? -2 : -1);\n                        break;\n                    case Opcodes.GETFIELD:\n                        size = this.stackSize + (c === \"D\" || c === \"J\" ? 1 : 0);\n                        break;\n                    default:\n                        size = this.stackSize + (c === \"D\" || c === \"J\" ? -3 : -2);\n                        break;\n                }\n                if (size > this.maxStackSize) {\n                    this.maxStackSize = size;\n                }\n                this.stackSize = size;\n            }\n        }\n        this.code.put12(opcode, i.index);\n    }\n\n    public visitMethodInsn(opcode?: any, owner?: any, name?: any, desc?: any, itf?: any): any {\n        if (((typeof opcode === \"number\") || opcode === null) && ((typeof owner === \"string\") || owner === null) && ((typeof name === \"string\") || name === null) && ((typeof desc === \"string\") || desc === null) && ((typeof itf === \"boolean\") || itf === null)) {\n            let __args = Array.prototype.slice.call(arguments);\n            return <any>(() => {\n                this.lastCodeOffset = this.code.length;\n                let i: Item = this.cw.newMethodItem(owner, name, desc, itf);\n                let argSize: number = i.intVal;\n                if (this.currentBlock != null) {\n                    if (this.compute === MethodWriter.FRAMES || this.compute === MethodWriter.INSERTED_FRAMES) {\n                        assert(this.currentBlock.frame);\n                        this.currentBlock.frame.execute(opcode, 0, this.cw, i);\n                    } else {\n                        if (argSize === 0) {\n                            argSize = Type.getArgumentsAndReturnSizes(desc);\n                            i.intVal = argSize;\n                        }\n                        let size: number;\n                        if (opcode === Opcodes.INVOKESTATIC) {\n                            size = this.stackSize - (argSize >> 2) + (argSize & 3) + 1;\n                        } else {\n                            size = this.stackSize - (argSize >> 2) + (argSize & 3);\n                        }\n                        if (size > this.maxStackSize) {\n                            this.maxStackSize = size;\n                        }\n                        this.stackSize = size;\n                    }\n                }\n                if (opcode === Opcodes.INVOKEINTERFACE) {\n                    if (argSize === 0) {\n                        argSize = Type.getArgumentsAndReturnSizes(desc);\n                        i.intVal = argSize;\n                    }\n                    this.code.put12(Opcodes.INVOKEINTERFACE, i.index).put11(argSize >> 2, 0);\n                } else {\n                    this.code.put12(opcode, i.index);\n                }\n            })();\n        } else if (((typeof opcode === \"number\") || opcode === null) && ((typeof owner === \"string\") || owner === null) && ((typeof name === \"string\") || name === null) && ((typeof desc === \"string\") || desc === null) && itf === undefined) {\n            return <any>this.visitMethodInsn$int$java_lang_String$java_lang_String$java_lang_String(opcode, owner, name, desc);\n        } else { throw new Error(\"invalid overload\"); }\n    }\n\n    public visitInvokeDynamicInsn(name: string, desc: string, bsm: Handle, ...bsmArgs: any[]) {\n        this.lastCodeOffset = this.code.length;\n        let i: Item = this.cw.newInvokeDynamicItem(name, desc, bsm, ...bsmArgs);\n        let argSize: number = i.intVal;\n        if (this.currentBlock != null) {\n            if (this.compute === MethodWriter.FRAMES || this.compute === MethodWriter.INSERTED_FRAMES) {\n                assert(this.currentBlock.frame);\n                this.currentBlock.frame.execute(Opcodes.INVOKEDYNAMIC, 0, this.cw, i);\n            } else {\n                if (argSize === 0) {\n                    argSize = Type.getArgumentsAndReturnSizes(desc);\n                    i.intVal = argSize;\n                }\n                let size: number = this.stackSize - (argSize >> 2) + (argSize & 3) + 1;\n                if (size > this.maxStackSize) {\n                    this.maxStackSize = size;\n                }\n                this.stackSize = size;\n            }\n        }\n        this.code.put12(Opcodes.INVOKEDYNAMIC, i.index);\n        this.code.putShort(0);\n    }\n\n    public visitJumpInsn(opcode: number, label: Label) {\n        let isWide: boolean = opcode >= 200;\n        opcode = isWide ? opcode - 33 : opcode;\n        this.lastCodeOffset = this.code.length;\n        let nextInsn: Label | null = null;\n        if (this.currentBlock != null) {\n            if (this.compute === MethodWriter.FRAMES) {\n                assert(this.currentBlock.frame);\n                this.currentBlock.frame.execute(opcode, 0, null, null);\n                label.getFirst().status |= Label.TARGET;\n                this.addSuccessor(Edge.NORMAL, label);\n                if (opcode !== Opcodes.GOTO) {\n                    nextInsn = new Label();\n                }\n            } else if (this.compute === MethodWriter.INSERTED_FRAMES) {\n                this.currentBlock.frame!.execute(opcode, 0, null, null);\n            } else {\n                if (opcode === Opcodes.JSR) {\n                    if ((label.status & Label.SUBROUTINE) === 0) {\n                        label.status |= Label.SUBROUTINE;\n                        ++this.subroutines;\n                    }\n                    this.currentBlock.status |= Label.JSR;\n                    this.addSuccessor(this.stackSize + 1, label);\n                    nextInsn = new Label();\n                } else {\n                    this.stackSize += Frame.SIZE_$LI$()[opcode];\n                    this.addSuccessor(this.stackSize, label);\n                }\n            }\n        }\n        if ((label.status & Label.RESOLVED) !== 0 && label.position - this.code.length < bits.SHORT_MIN) {\n            if (opcode === Opcodes.GOTO) {\n                this.code.putByte(200);\n            } else if (opcode === Opcodes.JSR) {\n                this.code.putByte(201);\n            } else {\n                if (nextInsn != null) {\n                    nextInsn.status |= Label.TARGET;\n                }\n                this.code.putByte(opcode <= 166 ? ((opcode + 1) ^ 1) - 1 : opcode ^ 1);\n                this.code.putShort(8);\n                this.code.putByte(200);\n            }\n            label.put(this, this.code, this.code.length - 1, true);\n        } else if (isWide) {\n            this.code.putByte(opcode + 33);\n            label.put(this, this.code, this.code.length - 1, true);\n        } else {\n            this.code.putByte(opcode);\n            label.put(this, this.code, this.code.length - 1, false);\n        }\n        if (this.currentBlock != null) {\n            if (nextInsn != null) {\n                this.visitLabel(nextInsn);\n            }\n            if (opcode === Opcodes.GOTO) {\n                this.noSuccessor();\n            }\n        }\n    }\n\n    public visitLabel(label: Label) {\n        this.cw.hasAsmInsns = this.cw.hasAsmInsns || label.resolve(this, this.code.length, this.code.data);\n        if ((label.status & Label.DEBUG) !== 0) {\n            return;\n        }\n        if (this.compute === MethodWriter.FRAMES) {\n            if (this.currentBlock != null) {\n                if (label.position === this.currentBlock.position) {\n                    this.currentBlock.status |= (label.status & Label.TARGET);\n                    label.frame = this.currentBlock.frame;\n                    return;\n                }\n                this.addSuccessor(Edge.NORMAL, label);\n            }\n            this.currentBlock = label;\n            if (label.frame == null) {\n                label.frame = new Frame(label);\n            }\n            if (this.previousBlock != null) {\n                if (label.position === this.previousBlock.position) {\n                    this.previousBlock.status |= (label.status & Label.TARGET);\n                    label.frame = this.previousBlock.frame;\n                    this.currentBlock = this.previousBlock;\n                    return;\n                }\n                this.previousBlock.successor = label;\n            }\n            this.previousBlock = label;\n        } else if (this.compute === MethodWriter.INSERTED_FRAMES) {\n            if (this.currentBlock == null) {\n                this.currentBlock = label;\n            } else {\n                assert(this.currentBlock.frame);\n                this.currentBlock.frame.owner = label;\n            }\n        } else if (this.compute === MethodWriter.MAXS) {\n            if (this.currentBlock != null) {\n                this.currentBlock.outputStackMax = this.maxStackSize;\n                this.addSuccessor(this.stackSize, label);\n            }\n            this.currentBlock = label;\n            this.stackSize = 0;\n            this.maxStackSize = 0;\n            if (this.previousBlock != null) {\n                this.previousBlock.successor = label;\n            }\n            this.previousBlock = label;\n        }\n    }\n\n    public visitLdcInsn(cst: any) {\n        this.lastCodeOffset = this.code.length;\n        let i: Item = this.cw.newConstItem(cst);\n        if (this.currentBlock != null) {\n            if (this.compute === MethodWriter.FRAMES || this.compute === MethodWriter.INSERTED_FRAMES) {\n                this.currentBlock.frame!.execute(Opcodes.LDC, 0, this.cw, i);\n            } else {\n                let size: number;\n                if (i.type === ClassWriter.LONG || i.type === ClassWriter.DOUBLE) {\n                    size = this.stackSize + 2;\n                } else {\n                    size = this.stackSize + 1;\n                }\n                if (size > this.maxStackSize) {\n                    this.maxStackSize = size;\n                }\n                this.stackSize = size;\n            }\n        }\n        let index: number = i.index;\n        if (i.type === ClassWriter.LONG || i.type === ClassWriter.DOUBLE) {\n            this.code.put12(20, index);\n        } else if (index >= 256) {\n            this.code.put12(19, index);\n        } else {\n            this.code.put11(Opcodes.LDC, index);\n        }\n    }\n\n    public visitIincInsn(__var: number, increment: number) {\n        this.lastCodeOffset = this.code.length;\n        if (this.currentBlock != null) {\n            if (this.compute === MethodWriter.FRAMES || this.compute === MethodWriter.INSERTED_FRAMES) {\n                this.currentBlock.frame!.execute(Opcodes.IINC, __var, null, null);\n            }\n        }\n        if (this.compute !== MethodWriter.NOTHING) {\n            let n: number = __var + 1;\n            if (n > this.maxLocals) {\n                this.maxLocals = n;\n            }\n        }\n        if ((__var > 255) || (increment > 127) || (increment < -128)) {\n            this.code.putByte(196).put12(Opcodes.IINC, __var).putShort(increment);\n        } else {\n            this.code.putByte(Opcodes.IINC).put11(__var, increment);\n        }\n    }\n\n    public visitTableSwitchInsn(min: number, max: number, dflt: Label, ...labels: Label[]) {\n        this.lastCodeOffset = this.code.length;\n        let source: number = this.code.length;\n        this.code.putByte(Opcodes.TABLESWITCH);\n        this.code.putByteArray(null, 0, (4 - this.code.length % 4) % 4);\n        dflt.put(this, this.code, source, true);\n        this.code.putInt(min).putInt(max);\n        for (let i: number = 0; i < labels.length; ++i) {\n            labels[i].put(this, this.code, source, true);\n        }\n        this.visitSwitchInsn(dflt, labels);\n    }\n\n    public visitLookupSwitchInsn(dflt: Label, keys: number[], labels: Label[]) {\n        this.lastCodeOffset = this.code.length;\n        let source: number = this.code.length;\n        this.code.putByte(Opcodes.LOOKUPSWITCH);\n        this.code.putByteArray(null, 0, (4 - this.code.length % 4) % 4);\n        dflt.put(this, this.code, source, true);\n        this.code.putInt(labels.length);\n        for (let i: number = 0; i < labels.length; ++i) {\n            this.code.putInt(keys[i]);\n            labels[i].put(this, this.code, source, true);\n        }\n        this.visitSwitchInsn(dflt, labels);\n    }\n\n    private visitSwitchInsn(dflt: Label, labels: Label[]) {\n        if (this.currentBlock != null) {\n            if (this.compute === MethodWriter.FRAMES) {\n                assert(this.currentBlock.frame);\n                this.currentBlock.frame.execute(Opcodes.LOOKUPSWITCH, 0, null, null);\n                this.addSuccessor(Edge.NORMAL, dflt);\n                dflt.getFirst().status |= Label.TARGET;\n                for (let i: number = 0; i < labels.length; ++i) {\n                    this.addSuccessor(Edge.NORMAL, labels[i]);\n                    labels[i].getFirst().status |= Label.TARGET;\n                }\n            } else {\n                --this.stackSize;\n                this.addSuccessor(this.stackSize, dflt);\n                for (let i: number = 0; i < labels.length; ++i) {\n                    this.addSuccessor(this.stackSize, labels[i]);\n                }\n            }\n            this.noSuccessor();\n        }\n    }\n\n    public visitMultiANewArrayInsn(desc: string, dims: number) {\n        this.lastCodeOffset = this.code.length;\n        let i: Item = this.cw.newClassItem(desc);\n        if (this.currentBlock != null) {\n            if (this.compute === MethodWriter.FRAMES || this.compute === MethodWriter.INSERTED_FRAMES) {\n                assert(this.currentBlock.frame);\n                this.currentBlock.frame.execute(Opcodes.MULTIANEWARRAY, dims, this.cw, i);\n            } else {\n                this.stackSize += 1 - dims;\n            }\n        }\n        this.code.put12(Opcodes.MULTIANEWARRAY, i.index).putByte(dims);\n    }\n\n    public visitInsnAnnotation(typeRef: number, typePath: TypePath, desc: string, visible: boolean): AnnotationVisitor | null {\n        if (!ClassReader.ANNOTATIONS) {\n            return null;\n        }\n        let bv: ByteVector = new ByteVector();\n        typeRef = (typeRef & -16776961) | (this.lastCodeOffset << 8);\n        AnnotationWriter.putTarget(typeRef, typePath, bv);\n        bv.putShort(this.cw.newUTF8(desc)).putShort(0);\n        let aw: AnnotationWriter = new AnnotationWriter(this.cw, true, bv, bv, bv.length - 2);\n        if (visible) {\n            aw.next = this.ctanns;\n            this.ctanns = aw;\n        } else {\n            aw.next = this.ictanns;\n            this.ictanns = aw;\n        }\n        return aw;\n    }\n\n    public visitTryCatchBlock(start: Label, end: Label, handler: Label, type: string) {\n        ++this.handlerCount;\n        let h: Handler = new Handler();\n        h.start = start;\n        h.end = end;\n        h.handler = handler;\n        h.desc = type;\n        h.type = type != null ? this.cw.newClass(type) : 0;\n        if (this.lastHandler == null) {\n            this.firstHandler = h;\n        } else {\n            this.lastHandler.next = h;\n        }\n        this.lastHandler = h;\n    }\n\n    public visitTryCatchAnnotation(typeRef: number, typePath: TypePath, desc: string, visible: boolean): AnnotationVisitor | null {\n        if (!ClassReader.ANNOTATIONS) {\n            return null;\n        }\n        let bv: ByteVector = new ByteVector();\n        AnnotationWriter.putTarget(typeRef, typePath, bv);\n        bv.putShort(this.cw.newUTF8(desc)).putShort(0);\n        let aw: AnnotationWriter = new AnnotationWriter(this.cw, true, bv, bv, bv.length - 2);\n        if (visible) {\n            aw.next = this.ctanns;\n            this.ctanns = aw;\n        } else {\n            aw.next = this.ictanns;\n            this.ictanns = aw;\n        }\n        return aw;\n    }\n\n    public visitLocalVariable(name: string, desc: string, signature: string, start: Label, end: Label, index: number) {\n        if (signature != null) {\n            if (this.localVarType == null) {\n                this.localVarType = new ByteVector();\n            }\n            ++this.localVarTypeCount;\n            this.localVarType.putShort(start.position).putShort(end.position - start.position).putShort(this.cw.newUTF8(name)).putShort(this.cw.newUTF8(signature)).putShort(index);\n        }\n        if (this.localVar == null) {\n            this.localVar = new ByteVector();\n        }\n        ++this.localVarCount;\n        this.localVar.putShort(start.position).putShort(end.position - start.position).putShort(this.cw.newUTF8(name)).putShort(this.cw.newUTF8(desc)).putShort(index);\n        if (this.compute !== MethodWriter.NOTHING) {\n            let c: string = desc.charAt(0);\n            let n: number = index + (c === \"J\" || c === \"D\" ? 2 : 1);\n            if (n > this.maxLocals) {\n                this.maxLocals = n;\n            }\n        }\n    }\n\n    public visitLocalVariableAnnotation(typeRef: number, typePath: TypePath, start: Label[], end: Label[], index: number[], desc: string, visible: boolean): AnnotationVisitor | null {\n        if (!ClassReader.ANNOTATIONS) {\n            return null;\n        }\n        let bv: ByteVector = new ByteVector();\n        bv.putByte(typeRef >>> 24).putShort(start.length);\n        for (let i: number = 0; i < start.length; ++i) {\n            bv.putShort(start[i].position).putShort(end[i].position - start[i].position).putShort(index[i]);\n        }\n        if (typePath == null) {\n            bv.putByte(0);\n        } else {\n            let length: number = typePath.buf[typePath.offset] * 2 + 1;\n            bv.putByteArray(typePath.buf, typePath.offset, length);\n        }\n        bv.putShort(this.cw.newUTF8(desc)).putShort(0);\n        let aw: AnnotationWriter = new AnnotationWriter(this.cw, true, bv, bv, bv.length - 2);\n        if (visible) {\n            aw.next = this.ctanns;\n            this.ctanns = aw;\n        } else {\n            aw.next = this.ictanns;\n            this.ictanns = aw;\n        }\n        return aw;\n    }\n\n    public visitLineNumber(line: number, start: Label) {\n        if (this.lineNumber == null) {\n            this.lineNumber = new ByteVector();\n        }\n        ++this.lineNumberCount;\n        this.lineNumber.putShort(start.position);\n        this.lineNumber.putShort(line);\n    }\n\n    public visitMaxs(maxStack: number, maxLocals: number) {\n        if (ClassReader.FRAMES && this.compute === MethodWriter.FRAMES) {\n            let handler: Handler | null = this.firstHandler;\n            while ((handler != null)) {\n                assert(handler.start)\n                assert(handler.handler)\n                assert(handler.end)\n\n                let l: Label = handler.start.getFirst();\n                let h: Label = handler.handler.getFirst();\n                let e: Label = handler.end.getFirst();\n                let t: string = handler.desc == null ? \"java/lang/Throwable\" : handler.desc;\n                let kind: number = Frame.OBJECT_$LI$() | this.cw.addType(t);\n                h.status |= Label.TARGET;\n                while ((l !== e)) {\n                    let b: Edge = new Edge();\n                    b.info = kind;\n                    b.successor = h;\n                    b.next = l.successors;\n                    l.successors = b;\n                    l = l.successor;\n                };\n                handler = handler.next;\n            };\n            assert(this.labels);\n            assert(this.labels.frame);\n            let f: Frame | null = this.labels.frame;\n            f.initInputFrame(this.cw, this.access, Type.getArgumentTypes(this.descriptor), this.maxLocals);\n            this.visitFrame(f);\n            let max: number = 0;\n            let changed: Label | null = this.labels;\n            while ((changed != null)) {\n                let l: Label = changed;\n                changed = changed.next;\n                l.next = null;\n                f = l.frame;\n                if ((l.status & Label.TARGET) !== 0) {\n                    l.status |= Label.STORE;\n                }\n                assert(f);\n                l.status |= Label.REACHABLE;\n                let blockMax: number = f.inputStack.length + l.outputStackMax;\n                if (blockMax > max) {\n                    max = blockMax;\n                }\n                let e: Edge | null = l.successors;\n                while ((e != null)) {\n                    let n: Label = e.successor!.getFirst();\n                    let change: boolean = f.merge(this.cw, n.frame!, e.info);\n                    if (change && n.next == null) {\n                        n.next = changed;\n                        changed = n;\n                    }\n                    e = e.next;\n                };\n            };\n            let l: Label | null = this.labels;\n            while ((l != null)) {\n                f = l.frame;\n                if ((l.status & Label.STORE) !== 0) {\n                    this.visitFrame(f);\n                }\n                if ((l.status & Label.REACHABLE) === 0) {\n                    let k: Label | null = l.successor;\n                    let start: number = l.position;\n                    let end: number = (k == null ? this.code.length : k.position) - 1;\n                    if (end >= start) {\n                        max = Math.max(max, 1);\n                        for (let i: number = start; i < end; ++i) {\n                            this.code.data[i] = Opcodes.NOP;\n                        }\n                        this.code.data[end] = (Opcodes.ATHROW | 0);\n                        let frameIndex: number = this.startFrame(start, 0, 1);\n                        assert(this.frame);\n                        this.frame[frameIndex] = Frame.OBJECT_$LI$() | this.cw.addType(\"java/lang/Throwable\");\n                        this.endFrame();\n                        this.firstHandler = Handler.remove(this.firstHandler, l, k);\n                    }\n                }\n                l = l.successor;\n            };\n            handler = this.firstHandler;\n            this.handlerCount = 0;\n            while ((handler != null)) {\n                this.handlerCount += 1;\n                handler = handler.next;\n            };\n            this.maxStack = max;\n        } else if (this.compute === MethodWriter.MAXS) {\n            let handler: Handler | null = this.firstHandler;\n            while ((handler != null)) {\n                let l: Label | null = handler.start;\n                let h: Label | null = handler.handler;\n                let e: Label | null = handler.end;\n                while ((l !== e)) {\n                    let b: Edge = new Edge();\n                    b.info = Edge.EXCEPTION;\n                    b.successor = h;\n                    if ((l!.status & Label.JSR) === 0) {\n                        b.next = l!.successors;\n                        l!.successors = b;\n                    } else {\n                        b.next = l!.successors.next!.next;\n                        l!.successors.next!.next = b;\n                    }\n                    l = l!.successor;\n                };\n                handler = handler.next;\n            };\n            if (this.subroutines > 0) {\n                let id: number = 0;\n                assert(this.labels);\n                this.labels.visitSubroutine(null, 1, this.subroutines);\n                let l: Label | null = this.labels;\n                while ((l != null)) {\n                    if ((l.status & Label.JSR) !== 0) {\n                        let subroutine: Label | null = l.successors.next!.successor;\n                        assert(subroutine);\n                        if ((subroutine.status & Label.VISITED) === 0) {\n                            id += 1;\n                            subroutine.visitSubroutine(null, (Math.round(id / 32)) << 32 | (1 << (id % 32)), this.subroutines);\n                        }\n                    }\n                    l = l.successor;\n                };\n                l = this.labels;\n                while ((l != null)) {\n                    if ((l.status & Label.JSR) !== 0) {\n                        let L: Label | null = this.labels;\n                        while ((L != null)) {\n                            L.status &= ~Label.VISITED2;\n                            L = L.successor;\n                        };\n                        let subroutine = l.successors.next!.successor;\n                        subroutine!.visitSubroutine(l, 0, this.subroutines);\n                    }\n                    l = l.successor;\n                };\n            }\n            let max: number = 0;\n            let stack: Label | null = this.labels;\n            while ((stack != null)) {\n                let l: Label | null = stack;\n                stack = stack.next;\n                let start: number = l.inputStackTop;\n                let blockMax: number = start + l.outputStackMax;\n                if (blockMax > max) {\n                    max = blockMax;\n                }\n                let b: Edge | null = l.successors;\n                if ((l.status & Label.JSR) !== 0) {\n                    b = b.next;\n                }\n                while ((b != null)) {\n                    l = b.successor;\n                    if (l && (l.status & Label.PUSHED) === 0) {\n                        l.inputStackTop = b.info === Edge.EXCEPTION ? 1 : start + b.info;\n                        l.status |= Label.PUSHED;\n                        l.next = stack;\n                        stack = l;\n                    }\n                    b = b.next;\n                };\n            };\n            this.maxStack = Math.max(maxStack, max);\n        } else {\n            this.maxStack = maxStack;\n            this.maxLocals = maxLocals;\n        }\n    }\n\n    public visitEnd() {\n    }\n\n    /**\n     * Adds a successor to the {@link #currentBlock currentBlock} block.\n     *\n     * @param info\n     * information about the control flow edge to be added.\n     * @param successor\n     * the successor block to be added to the current block.\n     */\n    private addSuccessor(info: number, successor: Label) {\n        let b: Edge = new Edge();\n        b.info = info;\n        b.successor = successor;\n        assert(this.currentBlock);\n        b.next = this.currentBlock.successors;\n        this.currentBlock.successors = b;\n    }\n\n    /**\n     * Ends the current basic block. This method must be used in the case where\n     * the current basic block does not have any successor.\n     */\n    private noSuccessor() {\n        if (this.compute === MethodWriter.FRAMES) {\n            let l: Label = new Label();\n            l.frame = new Frame(l);\n            l.resolve(this, this.code.length, this.code.data);\n            this.previousBlock!.successor = l;\n            this.previousBlock = l;\n        } else {\n            assert(this.currentBlock);\n            this.currentBlock.outputStackMax = this.maxStackSize;\n        }\n        if (this.compute !== MethodWriter.INSERTED_FRAMES) {\n            this.currentBlock = null;\n        }\n    }\n\n    /**\n     * Visits a frame that has been computed from scratch.\n     *\n     * @param f\n     * the frame that must be visited.\n     */\n    private visitFrame$Frame(f: Frame) {\n        let i: number;\n        let t: number;\n        let nTop: number = 0;\n        let nLocal: number = 0;\n        let nStack: number = 0;\n        let locals: number[] = f.inputLocals;\n        let stacks: number[] = f.inputStack;\n        for (i = 0; i < locals.length; ++i) {\n            t = locals[i];\n            if (t === Frame.TOP_$LI$()) {\n                ++nTop;\n            } else {\n                nLocal += nTop + 1;\n                nTop = 0;\n            }\n            if (t === Frame.LONG_$LI$() || t === Frame.DOUBLE_$LI$()) {\n                ++i;\n            }\n        }\n        for (i = 0; i < stacks.length; ++i) {\n            t = stacks[i];\n            ++nStack;\n            if (t === Frame.LONG_$LI$() || t === Frame.DOUBLE_$LI$()) {\n                ++i;\n            }\n        }\n        let frameIndex: number = this.startFrame(f.owner.position, nLocal, nStack);\n        assert(this.frame)\n        for (i = 0; nLocal > 0; ++i, --nLocal) {\n            t = locals[i];\n            this.frame[frameIndex++] = t;\n            if (t === Frame.LONG_$LI$() || t === Frame.DOUBLE_$LI$()) {\n                ++i;\n            }\n        }\n        for (i = 0; i < stacks.length; ++i) {\n            t = stacks[i];\n            this.frame[frameIndex++] = t;\n            if (t === Frame.LONG_$LI$() || t === Frame.DOUBLE_$LI$()) {\n                ++i;\n            }\n        }\n        this.endFrame();\n    }\n\n    /**\n     * Visit the implicit first frame of this method.\n     */\n    private visitImplicitFirstFrame() {\n        assert(this.frame)\n        let frameIndex: number = this.startFrame(0, this.descriptor.length + 1, 0);\n        if ((this.access & Opcodes.ACC_STATIC) === 0) {\n            if ((this.access & MethodWriter.ACC_CONSTRUCTOR) === 0) {\n                this.frame[frameIndex++] = Frame.OBJECT_$LI$() | this.cw.addType(this.cw.thisName);\n            } else {\n                this.frame[frameIndex++] = 6;\n            }\n        }\n        let i: number = 1;\n        loop: while ((true)) {\n            let j: number = i;\n            switch ((this.descriptor.charAt(i++))) {\n                case \"Z\":\n                case \"C\":\n                case \"B\":\n                case \"S\":\n                case \"I\":\n                    this.frame[frameIndex++] = 1;\n                    break;\n                case \"F\":\n                    this.frame[frameIndex++] = 2;\n                    break;\n                case \"J\":\n                    this.frame[frameIndex++] = 4;\n                    break;\n                case \"D\":\n                    this.frame[frameIndex++] = 3;\n                    break;\n                case \"[\":\n                    while ((this.descriptor.charAt(i) === \"[\")) {\n                        ++i;\n                    };\n                    if (this.descriptor.charAt(i) === \"L\") {\n                        ++i;\n                        while ((this.descriptor.charAt(i) !== \";\")) {\n                            ++i;\n                        };\n                    }\n                    this.frame[frameIndex++] = Frame.OBJECT_$LI$() | this.cw.addType(this.descriptor.substring(j, ++i));\n                    break;\n                case \"L\":\n                    while ((this.descriptor.charAt(i) !== \";\")) {\n                        ++i;\n                    };\n                    this.frame[frameIndex++] = Frame.OBJECT_$LI$() | this.cw.addType(this.descriptor.substring(j + 1, i++));\n                    break;\n                default:\n                    break loop;\n            }\n        };\n        this.frame[1] = frameIndex - 3;\n        this.endFrame();\n    }\n\n    /**\n     * Starts the visit of a stack map frame.\n     *\n     * @param offset\n     * the offset of the instruction to which the frame corresponds.\n     * @param nLocal\n     * the number of local variables in the frame.\n     * @param nStack\n     * the number of stack elements in the frame.\n     * @return the index of the next element to be written in this frame.\n     */\n    private startFrame(offset: number, nLocal: number, nStack: number): number {\n        let n: number = 3 + nLocal + nStack;\n        if (this.frame == null || this.frame.length < n) {\n            this.frame = new Array(n);\n        }\n        this.frame[0] = offset;\n        this.frame[1] = nLocal;\n        this.frame[2] = nStack;\n        return 3;\n    }\n\n    /**\n     * Checks if the visit of the current frame {@link #frame} is finished, and\n     * if yes, write it in the StackMapTable attribute.\n     */\n    private endFrame() {\n        if (this.previousFrame != null) {\n            if (this.stackMap == null) {\n                this.stackMap = new ByteVector();\n            }\n            this.writeFrame();\n            ++this.frameCount;\n        }\n        this.previousFrame = this.frame;\n        this.frame = null;\n    }\n\n    /**\n     * Compress and writes the current frame {@link #frame} in the StackMapTable\n     * attribute.\n     */\n    private writeFrame() {\n        assert(this.frame);\n        assert(this.previousFrame);\n        assert(this.stackMap);\n\n        let clocalsSize: number = this.frame[1];\n        let cstackSize: number = this.frame[2];\n        if ((this.cw.version & 65535) < Opcodes.V1_6) {\n            this.stackMap.putShort(this.frame[0]).putShort(clocalsSize);\n            this.writeFrameTypes(3, 3 + clocalsSize);\n            this.stackMap.putShort(cstackSize);\n            this.writeFrameTypes(3 + clocalsSize, 3 + clocalsSize + cstackSize);\n            return;\n        }\n        let localsSize: number = this.previousFrame[1];\n        let type: number = MethodWriter.FULL_FRAME;\n        let k: number = 0;\n        let delta: number;\n        if (this.frameCount === 0) {\n            delta = this.frame[0];\n        } else {\n            delta = this.frame[0] - this.previousFrame[0] - 1;\n        }\n        if (cstackSize === 0) {\n            k = clocalsSize - localsSize;\n            switch ((k)) {\n                case -3:\n                case -2:\n                case -1:\n                    type = MethodWriter.CHOP_FRAME;\n                    localsSize = clocalsSize;\n                    break;\n                case 0:\n                    type = delta < 64 ? MethodWriter.SAME_FRAME : MethodWriter.SAME_FRAME_EXTENDED;\n                    break;\n                case 1:\n                case 2:\n                case 3:\n                    type = MethodWriter.APPEND_FRAME;\n                    break;\n            }\n        } else if (clocalsSize === localsSize && cstackSize === 1) {\n            type = delta < 63 ? MethodWriter.SAME_LOCALS_1_STACK_ITEM_FRAME : MethodWriter.SAME_LOCALS_1_STACK_ITEM_FRAME_EXTENDED;\n        }\n        if (type !== MethodWriter.FULL_FRAME) {\n            let l: number = 3;\n            for (let j: number = 0; j < localsSize; j++) {\n                if (this.frame[l] !== this.previousFrame[l]) {\n                    type = MethodWriter.FULL_FRAME;\n                    break;\n                }\n                l++;\n            }\n        }\n        switch ((type)) {\n            case MethodWriter.SAME_FRAME:\n                this.stackMap.putByte(delta);\n                break;\n            case MethodWriter.SAME_LOCALS_1_STACK_ITEM_FRAME:\n                this.stackMap.putByte(MethodWriter.SAME_LOCALS_1_STACK_ITEM_FRAME + delta);\n                this.writeFrameTypes(3 + clocalsSize, 4 + clocalsSize);\n                break;\n            case MethodWriter.SAME_LOCALS_1_STACK_ITEM_FRAME_EXTENDED:\n                this.stackMap.putByte(MethodWriter.SAME_LOCALS_1_STACK_ITEM_FRAME_EXTENDED).putShort(delta);\n                this.writeFrameTypes(3 + clocalsSize, 4 + clocalsSize);\n                break;\n            case MethodWriter.SAME_FRAME_EXTENDED:\n                this.stackMap.putByte(MethodWriter.SAME_FRAME_EXTENDED).putShort(delta);\n                break;\n            case MethodWriter.CHOP_FRAME:\n                this.stackMap.putByte(MethodWriter.SAME_FRAME_EXTENDED + k).putShort(delta);\n                break;\n            case MethodWriter.APPEND_FRAME:\n                this.stackMap.putByte(MethodWriter.SAME_FRAME_EXTENDED + k).putShort(delta);\n                this.writeFrameTypes(3 + localsSize, 3 + clocalsSize);\n                break;\n            default:\n                this.stackMap.putByte(MethodWriter.FULL_FRAME).putShort(delta).putShort(clocalsSize);\n                this.writeFrameTypes(3, 3 + clocalsSize);\n                this.stackMap.putShort(cstackSize);\n                this.writeFrameTypes(3 + clocalsSize, 3 + clocalsSize + cstackSize);\n        }\n    }\n\n    /**\n     * Writes some types of the current frame {@link #frame} into the\n     * StackMapTableAttribute. This method converts types from the format used\n     * in {@link Label} to the format used in StackMapTable attributes. In\n     * particular, it converts type table indexes to constant pool indexes.\n     *\n     * @param start\n     * index of the first type in {@link #frame} to write.\n     * @param end\n     * index of last type in {@link #frame} to write (exclusive).\n     */\n    private writeFrameTypes(start: number, end: number) {\n        assert(this.frame);\n        assert(this.stackMap);\n\n        for (let i: number = start; i < end; ++i) {\n            let t: number = this.frame[i];\n            let d: number = t & Frame.DIM;\n            if (d === 0) {\n                let v: number = t & Frame.BASE_VALUE;\n                switch ((t & Frame.BASE_KIND)) {\n                    case Frame.OBJECT_$LI$():\n                        this.stackMap.putByte(7).putShort(this.cw.newClass(this.cw.typeTable[v].strVal1));\n                        break;\n                    case Frame.UNINITIALIZED_$LI$():\n                        this.stackMap.putByte(8).putShort(this.cw.typeTable[v].intVal);\n                        break;\n                    default:\n                        this.stackMap.putByte(v);\n                }\n            } else {\n                let sb: string = \"\";\n                d >>= 28;\n                while ((d-- > 0)) {\n                    sb += \"[\";\n                };\n                if ((t & Frame.BASE_KIND) === Frame.OBJECT_$LI$()) {\n                    sb += \"L\";\n                    sb += this.cw.typeTable[t & Frame.BASE_VALUE].strVal1;\n                    sb += \";\";\n                } else {\n                    switch ((t & 15)) {\n                        case 1:\n                            sb += \"I\";\n                            break;\n                        case 2:\n                            sb += \"F\";\n                            break;\n                        case 3:\n                            sb += \"D\";\n                            break;\n                        case 9:\n                            sb += \"Z\";\n                            break;\n                        case 10:\n                            sb += \"B\";\n                            break;\n                        case 11:\n                            sb += \"C\";\n                            break;\n                        case 12:\n                            sb += \"S\";\n                            break;\n                        default:\n                            sb += \"J\";\n                    }\n                }\n                this.stackMap.putByte(7).putShort(this.cw.newClass(sb.toString()));\n            }\n        }\n    }\n\n    private writeFrameType(type: any) {\n        assert(this.stackMap);\n        if (typeof type === \"string\") {\n            this.stackMap.putByte(7).putShort(this.cw.newClass(type));\n        } else if (typeof type === \"number\") {\n            this.stackMap.putByte(/* intValue */((type) | 0));\n        } else {\n            this.stackMap.putByte(8).putShort((<Label>type).position);\n        }\n    }\n\n    /**\n     * Returns the size of the bytecode of this method.\n     *\n     * @return the size of the bytecode of this method.\n     */\n    getSize(): number {\n        if (this.classReaderOffset !== 0) {\n            return 6 + this.classReaderLength;\n        }\n        let size: number = 8;\n        if (this.code.length > 0) {\n            if (this.code.length > 65535) {\n                throw new Error(\"Method code too large!\");\n            }\n            this.cw.newUTF8(\"Code\");\n            size += 18 + this.code.length + 8 * this.handlerCount;\n            if (this.localVar != null) {\n                this.cw.newUTF8(\"LocalVariableTable\");\n                size += 8 + this.localVar.length;\n            }\n            if (this.localVarType != null) {\n                this.cw.newUTF8(\"LocalVariableTypeTable\");\n                size += 8 + this.localVarType.length;\n            }\n            if (this.lineNumber != null) {\n                this.cw.newUTF8(\"LineNumberTable\");\n                size += 8 + this.lineNumber.length;\n            }\n            if (this.stackMap != null) {\n                let zip: boolean = (this.cw.version & 65535) >= Opcodes.V1_6;\n                this.cw.newUTF8(zip ? \"StackMapTable\" : \"StackMap\");\n                size += 8 + this.stackMap.length;\n            }\n            if (ClassReader.ANNOTATIONS && this.ctanns != null) {\n                this.cw.newUTF8(\"RuntimeVisibleTypeAnnotations\");\n                size += 8 + this.ctanns.getSize();\n            }\n            if (ClassReader.ANNOTATIONS && this.ictanns != null) {\n                this.cw.newUTF8(\"RuntimeInvisibleTypeAnnotations\");\n                size += 8 + this.ictanns.getSize();\n            }\n            if (this.cattrs != null) {\n                size += this.cattrs.getSize(this.cw, this.code.data, this.code.length, this.maxStack, this.maxLocals);\n            }\n        }\n        if (this.exceptionCount > 0) {\n            this.cw.newUTF8(\"Exceptions\");\n            size += 8 + 2 * this.exceptionCount;\n        }\n        if ((this.access & Opcodes.ACC_SYNTHETIC) !== 0) {\n            if ((this.cw.version & 65535) < Opcodes.V1_5 || (this.access & ClassWriter.ACC_SYNTHETIC_ATTRIBUTE) !== 0) {\n                this.cw.newUTF8(\"Synthetic\");\n                size += 6;\n            }\n        }\n        if ((this.access & Opcodes.ACC_DEPRECATED) !== 0) {\n            this.cw.newUTF8(\"Deprecated\");\n            size += 6;\n        }\n        if (ClassReader.SIGNATURES && this.signature != null) {\n            this.cw.newUTF8(\"Signature\");\n            this.cw.newUTF8(this.signature);\n            size += 8;\n        }\n        if (this.methodParameters != null) {\n            this.cw.newUTF8(\"MethodParameters\");\n            size += 7 + this.methodParameters.length;\n        }\n        if (ClassReader.ANNOTATIONS && this.annd != null) {\n            this.cw.newUTF8(\"AnnotationDefault\");\n            size += 6 + this.annd.length;\n        }\n        if (ClassReader.ANNOTATIONS && this.anns != null) {\n            this.cw.newUTF8(\"RuntimeVisibleAnnotations\");\n            size += 8 + this.anns.getSize();\n        }\n        if (ClassReader.ANNOTATIONS && this.ianns != null) {\n            this.cw.newUTF8(\"RuntimeInvisibleAnnotations\");\n            size += 8 + this.ianns.getSize();\n        }\n        if (ClassReader.ANNOTATIONS && this.tanns != null) {\n            this.cw.newUTF8(\"RuntimeVisibleTypeAnnotations\");\n            size += 8 + this.tanns.getSize();\n        }\n        if (ClassReader.ANNOTATIONS && this.itanns != null) {\n            this.cw.newUTF8(\"RuntimeInvisibleTypeAnnotations\");\n            size += 8 + this.itanns.getSize();\n        }\n        if (ClassReader.ANNOTATIONS && this.panns != null) {\n            this.cw.newUTF8(\"RuntimeVisibleParameterAnnotations\");\n            size += 7 + 2 * (this.panns.length - this.synthetics);\n            for (let i: number = this.panns.length - 1; i >= this.synthetics; --i) {\n                size += this.panns[i] == null ? 0 : this.panns[i].getSize();\n            }\n        }\n        if (ClassReader.ANNOTATIONS && this.ipanns != null) {\n            this.cw.newUTF8(\"RuntimeInvisibleParameterAnnotations\");\n            size += 7 + 2 * (this.ipanns.length - this.synthetics);\n            for (let i: number = this.ipanns.length - 1; i >= this.synthetics; --i) {\n                size += this.ipanns[i] == null ? 0 : this.ipanns[i].getSize();\n            }\n        }\n        if (this.attrs != null) {\n            size += this.attrs.getSize(this.cw, null, 0, -1, -1);\n        }\n        return size;\n    }\n\n    /**\n     * Puts the bytecode of this method in the given byte vector.\n     *\n     * @param out\n     * the byte vector into which the bytecode of this method must be\n     * copied.\n     */\n    put(out: ByteVector) {\n        let FACTOR: number = ClassWriter.TO_ACC_SYNTHETIC_$LI$();\n        let mask: number = MethodWriter.ACC_CONSTRUCTOR | Opcodes.ACC_DEPRECATED | ClassWriter.ACC_SYNTHETIC_ATTRIBUTE | (((this.access & ClassWriter.ACC_SYNTHETIC_ATTRIBUTE) / FACTOR | 0));\n        out.putShort(this.access & ~mask).putShort(this.name).putShort(this.desc);\n        if (this.classReaderOffset !== 0) {\n            out.putByteArray(this.cw.cr.buf, this.classReaderOffset, this.classReaderLength);\n            return;\n        }\n        let attributeCount: number = 0;\n        if (this.code.length > 0) {\n            ++attributeCount;\n        }\n        if (this.exceptionCount > 0) {\n            ++attributeCount;\n        }\n        if ((this.access & Opcodes.ACC_SYNTHETIC) !== 0) {\n            if ((this.cw.version & 65535) < Opcodes.V1_5 || (this.access & ClassWriter.ACC_SYNTHETIC_ATTRIBUTE) !== 0) {\n                ++attributeCount;\n            }\n        }\n        if ((this.access & Opcodes.ACC_DEPRECATED) !== 0) {\n            ++attributeCount;\n        }\n        if (ClassReader.SIGNATURES && this.signature != null) {\n            ++attributeCount;\n        }\n        if (this.methodParameters != null) {\n            ++attributeCount;\n        }\n        if (ClassReader.ANNOTATIONS && this.annd != null) {\n            ++attributeCount;\n        }\n        if (ClassReader.ANNOTATIONS && this.anns != null) {\n            ++attributeCount;\n        }\n        if (ClassReader.ANNOTATIONS && this.ianns != null) {\n            ++attributeCount;\n        }\n        if (ClassReader.ANNOTATIONS && this.tanns != null) {\n            ++attributeCount;\n        }\n        if (ClassReader.ANNOTATIONS && this.itanns != null) {\n            ++attributeCount;\n        }\n        if (ClassReader.ANNOTATIONS && this.panns != null) {\n            ++attributeCount;\n        }\n        if (ClassReader.ANNOTATIONS && this.ipanns != null) {\n            ++attributeCount;\n        }\n        if (this.attrs != null) {\n            attributeCount += this.attrs.getCount();\n        }\n        out.putShort(attributeCount);\n        if (this.code.length > 0) {\n            let size: number = 12 + this.code.length + 8 * this.handlerCount;\n            if (this.localVar != null) {\n                size += 8 + this.localVar.length;\n            }\n            if (this.localVarType != null) {\n                size += 8 + this.localVarType.length;\n            }\n            if (this.lineNumber != null) {\n                size += 8 + this.lineNumber.length;\n            }\n            if (this.stackMap != null) {\n                size += 8 + this.stackMap.length;\n            }\n            if (ClassReader.ANNOTATIONS && this.ctanns != null) {\n                size += 8 + this.ctanns.getSize();\n            }\n            if (ClassReader.ANNOTATIONS && this.ictanns != null) {\n                size += 8 + this.ictanns.getSize();\n            }\n            if (this.cattrs != null) {\n                size += this.cattrs.getSize(this.cw, this.code.data, this.code.length, this.maxStack, this.maxLocals);\n            }\n            out.putShort(this.cw.newUTF8(\"Code\")).putInt(size);\n            out.putShort(this.maxStack).putShort(this.maxLocals);\n            out.putInt(this.code.length).putByteArray(this.code.data, 0, this.code.length);\n            out.putShort(this.handlerCount);\n            if (this.handlerCount > 0) {\n                let h: Handler | null = this.firstHandler;\n                while ((h != null)) {\n                    out.putShort(h.start!.position).putShort(h.end!.position).putShort(h.handler!.position).putShort(h.type);\n                    h = h.next;\n                };\n            }\n            attributeCount = 0;\n            if (this.localVar != null) {\n                ++attributeCount;\n            }\n            if (this.localVarType != null) {\n                ++attributeCount;\n            }\n            if (this.lineNumber != null) {\n                ++attributeCount;\n            }\n            if (this.stackMap != null) {\n                ++attributeCount;\n            }\n            if (ClassReader.ANNOTATIONS && this.ctanns != null) {\n                ++attributeCount;\n            }\n            if (ClassReader.ANNOTATIONS && this.ictanns != null) {\n                ++attributeCount;\n            }\n            if (this.cattrs != null) {\n                attributeCount += this.cattrs.getCount();\n            }\n            out.putShort(attributeCount);\n            if (this.localVar != null) {\n                out.putShort(this.cw.newUTF8(\"LocalVariableTable\"));\n                out.putInt(this.localVar.length + 2).putShort(this.localVarCount);\n                out.putByteArray(this.localVar.data, 0, this.localVar.length);\n            }\n            if (this.localVarType != null) {\n                out.putShort(this.cw.newUTF8(\"LocalVariableTypeTable\"));\n                out.putInt(this.localVarType.length + 2).putShort(this.localVarTypeCount);\n                out.putByteArray(this.localVarType.data, 0, this.localVarType.length);\n            }\n            if (this.lineNumber != null) {\n                out.putShort(this.cw.newUTF8(\"LineNumberTable\"));\n                out.putInt(this.lineNumber.length + 2).putShort(this.lineNumberCount);\n                out.putByteArray(this.lineNumber.data, 0, this.lineNumber.length);\n            }\n            if (this.stackMap != null) {\n                let zip: boolean = (this.cw.version & 65535) >= Opcodes.V1_6;\n                out.putShort(this.cw.newUTF8(zip ? \"StackMapTable\" : \"StackMap\"));\n                out.putInt(this.stackMap.length + 2).putShort(this.frameCount);\n                out.putByteArray(this.stackMap.data, 0, this.stackMap.length);\n            }\n            if (ClassReader.ANNOTATIONS && this.ctanns != null) {\n                out.putShort(this.cw.newUTF8(\"RuntimeVisibleTypeAnnotations\"));\n                this.ctanns.put(out);\n            }\n            if (ClassReader.ANNOTATIONS && this.ictanns != null) {\n                out.putShort(this.cw.newUTF8(\"RuntimeInvisibleTypeAnnotations\"));\n                this.ictanns.put(out);\n            }\n            if (this.cattrs != null) {\n                this.cattrs.put(this.cw, this.code.data, this.code.length, this.maxLocals, this.maxStack, out);\n            }\n        }\n        if (this.exceptionCount > 0) {\n            assert(this.exceptions);\n            out.putShort(this.cw.newUTF8(\"Exceptions\")).putInt(2 * this.exceptionCount + 2);\n            out.putShort(this.exceptionCount);\n            for (let i: number = 0; i < this.exceptionCount; ++i) {\n                out.putShort(this.exceptions[i]);\n            }\n        }\n        if ((this.access & Opcodes.ACC_SYNTHETIC) !== 0) {\n            if ((this.cw.version & 65535) < Opcodes.V1_5 || (this.access & ClassWriter.ACC_SYNTHETIC_ATTRIBUTE) !== 0) {\n                out.putShort(this.cw.newUTF8(\"Synthetic\")).putInt(0);\n            }\n        }\n        if ((this.access & Opcodes.ACC_DEPRECATED) !== 0) {\n            out.putShort(this.cw.newUTF8(\"Deprecated\")).putInt(0);\n        }\n        if (ClassReader.SIGNATURES && this.signature != null) {\n            out.putShort(this.cw.newUTF8(\"Signature\")).putInt(2).putShort(this.cw.newUTF8(this.signature));\n        }\n        if (this.methodParameters != null) {\n            out.putShort(this.cw.newUTF8(\"MethodParameters\"));\n            out.putInt(this.methodParameters.length + 1).putByte(this.methodParametersCount);\n            out.putByteArray(this.methodParameters.data, 0, this.methodParameters.length);\n        }\n        if (ClassReader.ANNOTATIONS && this.annd != null) {\n            out.putShort(this.cw.newUTF8(\"AnnotationDefault\"));\n            out.putInt(this.annd.length);\n            out.putByteArray(this.annd.data, 0, this.annd.length);\n        }\n        if (ClassReader.ANNOTATIONS && this.anns != null) {\n            out.putShort(this.cw.newUTF8(\"RuntimeVisibleAnnotations\"));\n            this.anns.put(out);\n        }\n        if (ClassReader.ANNOTATIONS && this.ianns != null) {\n            out.putShort(this.cw.newUTF8(\"RuntimeInvisibleAnnotations\"));\n            this.ianns.put(out);\n        }\n        if (ClassReader.ANNOTATIONS && this.tanns != null) {\n            out.putShort(this.cw.newUTF8(\"RuntimeVisibleTypeAnnotations\"));\n            this.tanns.put(out);\n        }\n        if (ClassReader.ANNOTATIONS && this.itanns != null) {\n            out.putShort(this.cw.newUTF8(\"RuntimeInvisibleTypeAnnotations\"));\n            this.itanns.put(out);\n        }\n        if (ClassReader.ANNOTATIONS && this.panns != null) {\n            out.putShort(this.cw.newUTF8(\"RuntimeVisibleParameterAnnotations\"));\n            AnnotationWriter.put(this.panns, this.synthetics, out);\n        }\n        if (ClassReader.ANNOTATIONS && this.ipanns != null) {\n            out.putShort(this.cw.newUTF8(\"RuntimeInvisibleParameterAnnotations\"));\n            AnnotationWriter.put(this.ipanns, this.synthetics, out);\n        }\n        if (this.attrs != null) {\n            this.attrs.put(this.cw, null, 0, -1, -1, out);\n        }\n    }\n}\n\nclass Handler {\n    /**\n     * Beginning of the exception handler's scope (inclusive).\n     */\n    start: Label | null = null;\n\n    /**\n     * End of the exception handler's scope (exclusive).\n     */\n    end: Label | null = null;\n\n    /**\n     * Beginning of the exception handler's code.\n     */\n    handler: Label | null = null;\n\n    /**\n     * Internal name of the type of exceptions handled by this handler, or\n     * <tt>null</tt> to catch any exceptions.\n     */\n    desc: string = \"\";\n\n    /**\n     * Constant pool index of the internal name of the type of exceptions\n     * handled by this handler, or 0 to catch any exceptions.\n     */\n    type: number;\n\n    /**\n     * Next exception handler block info.\n     */\n    next: Handler | null = null;\n\n    /**\n     * Removes the range between start and end from the given exception\n     * handlers.\n     *\n     * @param h\n     * an exception handler list.\n     * @param start\n     * the start of the range to be removed.\n     * @param end\n     * the end of the range to be removed. Maybe null.\n     * @return the exception handler list with the start-end range removed.\n     */\n    static remove(h: Handler | null, start: Label, end: Label): Handler | null {\n        if (h == null) {\n            return null;\n        } else {\n            h.next = Handler.remove(h.next, start, end);\n        }\n        assert(h.start)\n        assert(h.end)\n        let hstart: number = h.start.position;\n        let hend: number = h.end.position;\n        let s: number = start.position;\n        // let e : number = end == null?javaemul.internal.IntegerHelper.MAX_VALUE:end.position;\n        let e: number = end == null ? Number.MAX_VALUE : end.position;\n        if (s < hend && e > hstart) {\n            if (s <= hstart) {\n                if (e >= hend) {\n                    h = h.next;\n                } else {\n                    h.start = end;\n                }\n            } else if (e >= hend) {\n                h.end = start;\n            } else {\n                let g: Handler = new Handler();\n                g.start = end;\n                g.end = h.end;\n                g.handler = h.handler;\n                g.desc = h.desc;\n                g.type = h.type;\n                g.next = h.next;\n                h.end = start;\n                h.next = g;\n            }\n        }\n        return h;\n    }\n\n    constructor() {\n        this.type = 0;\n    }\n}\n\n","// @ts-nocheck\n/*\n * ASM: a very small and fast Java bytecode manipulation framework\n * Copyright (c) 2000-2011 INRIA, France Telecom\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n * 3. Neither the name of the copyright holders nor the names of its\n *    contributors may be used to endorse or promote products derived from\n *    this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\n * THE POSSIBILITY OF SUCH DAMAGE.\n */\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\n/**\n * A {@link ClassVisitor} that generates classes in bytecode form. More\n * precisely this visitor generates a byte array conforming to the Java class\n * file format. It can be used alone, to generate a Java class \"from scratch\",\n * or with one or more {@link ClassReader ClassReader} and adapter class visitor\n * to generate a modified class from one or more existing Java classes.\n *\n * @author Eric Bruneton\n */\nimport { AnnotationWriter } from \"./AnnotationWriter\"\nimport { AnnotationVisitor } from \"./AnnotationVisitor\"\nimport { Attribute } from \"./Attribute\"\nimport { ByteVector } from \"./ByteVector\"\nimport { ClassReader } from \"./ClassReader\"\nimport { ClassVisitor } from \"./ClassVisitor\"\nimport { FieldVisitor } from \"./FieldVisitor\"\nimport { FieldWriter } from \"./FieldWriter\"\nimport { Handle } from \"./Handle\"\nimport { Item } from \"./Item\"\nimport { MethodVisitor } from \"./MethodVisitor\"\nimport { MethodWriter } from \"./MethodWriter\"\nimport { Opcodes } from \"./Opcodes\"\nimport { TypePath } from \"./TypePath\"\n\nexport class ClassWriter extends ClassVisitor {\n    static __static_initialized: boolean = false;\n    static __static_initialize() { if (!ClassWriter.__static_initialized) { ClassWriter.__static_initialized = true; ClassWriter.__static_initializer_0(); } }\n\n    /**\n     * Flag to automatically compute the maximum stack size and the maximum\n     * number of local variables of methods. If this flag is set, then the\n     * arguments of the {@link MethodVisitor#visitMaxs visitMaxs} method of the\n     * {@link MethodVisitor} returned by the {@link #visitMethod visitMethod}\n     * method will be ignored, and computed automatically from the signature and\n     * the bytecode of each method.\n     *\n     * @see #ClassWriter(int)\n     */\n    public static COMPUTE_MAXS: number = 1;\n\n    /**\n     * Flag to automatically compute the stack map frames of methods from\n     * scratch. If this flag is set, then the calls to the\n     * {@link MethodVisitor#visitFrame} method are ignored, and the stack map\n     * frames are recomputed from the methods bytecode. The arguments of the\n     * {@link MethodVisitor#visitMaxs visitMaxs} method are also ignored and\n     * recomputed from the bytecode. In other words, COMPUTE_FRAMES implies\n     * COMPUTE_MAXS.\n     *\n     * @see #ClassWriter(int)\n     */\n    public static COMPUTE_FRAMES: number = 2;\n\n    /**\n     * Pseudo access flag to distinguish between the synthetic attribute and the\n     * synthetic access flag.\n     */\n    static ACC_SYNTHETIC_ATTRIBUTE: number = 262144;\n\n    /**\n     * Factor to convert from ACC_SYNTHETIC_ATTRIBUTE to Opcode.ACC_SYNTHETIC.\n     */\n    static TO_ACC_SYNTHETIC: number; public static TO_ACC_SYNTHETIC_$LI$(): number { ClassWriter.__static_initialize(); if (ClassWriter.TO_ACC_SYNTHETIC == null) { ClassWriter.TO_ACC_SYNTHETIC = (ClassWriter.ACC_SYNTHETIC_ATTRIBUTE / Opcodes.ACC_SYNTHETIC | 0); } return ClassWriter.TO_ACC_SYNTHETIC; };\n\n    /**\n     * The type of instructions without any argument.\n     */\n    static NOARG_INSN: number = 0;\n\n    /**\n     * The type of instructions with an signed byte argument.\n     */\n    static SBYTE_INSN: number = 1;\n\n    /**\n     * The type of instructions with an signed short argument.\n     */\n    static SHORT_INSN: number = 2;\n\n    /**\n     * The type of instructions with a local variable index argument.\n     */\n    static VAR_INSN: number = 3;\n\n    /**\n     * The type of instructions with an implicit local variable index argument.\n     */\n    static IMPLVAR_INSN: number = 4;\n\n    /**\n     * The type of instructions with a type descriptor argument.\n     */\n    static TYPE_INSN: number = 5;\n\n    /**\n     * The type of field and method invocations instructions.\n     */\n    static FIELDORMETH_INSN: number = 6;\n\n    /**\n     * The type of the INVOKEINTERFACE/INVOKEDYNAMIC instruction.\n     */\n    static ITFMETH_INSN: number = 7;\n\n    /**\n     * The type of the INVOKEDYNAMIC instruction.\n     */\n    static INDYMETH_INSN: number = 8;\n\n    /**\n     * The type of instructions with a 2 bytes bytecode offset label.\n     */\n    static LABEL_INSN: number = 9;\n\n    /**\n     * The type of instructions with a 4 bytes bytecode offset label.\n     */\n    static LABELW_INSN: number = 10;\n\n    /**\n     * The type of the LDC instruction.\n     */\n    static LDC_INSN: number = 11;\n\n    /**\n     * The type of the LDC_W and LDC2_W instructions.\n     */\n    static LDCW_INSN: number = 12;\n\n    /**\n     * The type of the IINC instruction.\n     */\n    static IINC_INSN: number = 13;\n\n    /**\n     * The type of the TABLESWITCH instruction.\n     */\n    static TABL_INSN: number = 14;\n\n    /**\n     * The type of the LOOKUPSWITCH instruction.\n     */\n    static LOOK_INSN: number = 15;\n\n    /**\n     * The type of the MULTIANEWARRAY instruction.\n     */\n    static MANA_INSN: number = 16;\n\n    /**\n     * The type of the WIDE instruction.\n     */\n    static WIDE_INSN: number = 17;\n\n    /**\n     * The type of the ASM pseudo instructions with an unsigned 2 bytes offset\n     * label (see Label#resolve).\n     */\n    static ASM_LABEL_INSN: number = 18;\n\n    /**\n     * Represents a frame inserted between already existing frames. This kind of\n     * frame can only be used if the frame content can be computed from the\n     * previous existing frame and from the instructions between this existing\n     * frame and the inserted one, without any knowledge of the type hierarchy.\n     * This kind of frame is only used when an unconditional jump is inserted in\n     * a method while expanding an ASM pseudo instruction (see ClassReader).\n     */\n    static F_INSERT: number = 256;\n\n    /**\n     * The instruction types of all JVM opcodes.\n     */\n    static TYPE: number[]; public static TYPE_$LI$(): number[] { ClassWriter.__static_initialize(); return ClassWriter.TYPE; };\n\n    /**\n     * The type of CONSTANT_Class constant pool items.\n     */\n    static CLASS: number = 7;\n\n    /**\n     * The type of CONSTANT_Fieldref constant pool items.\n     */\n    static FIELD: number = 9;\n\n    /**\n     * The type of CONSTANT_Methodref constant pool items.\n     */\n    static METH: number = 10;\n\n    /**\n     * The type of CONSTANT_InterfaceMethodref constant pool items.\n     */\n    static IMETH: number = 11;\n\n    /**\n     * The type of CONSTANT_String constant pool items.\n     */\n    static STR: number = 8;\n\n    /**\n     * The type of CONSTANT_Integer constant pool items.\n     */\n    static INT: number = 3;\n\n    /**\n     * The type of CONSTANT_Float constant pool items.\n     */\n    static FLOAT: number = 4;\n\n    /**\n     * The type of CONSTANT_Long constant pool items.\n     */\n    static LONG: number = 5;\n\n    /**\n     * The type of CONSTANT_Double constant pool items.\n     */\n    static DOUBLE: number = 6;\n\n    /**\n     * The type of CONSTANT_NameAndType constant pool items.\n     */\n    static NAME_TYPE: number = 12;\n\n    /**\n     * The type of CONSTANT_Utf8 constant pool items.\n     */\n    static UTF8: number = 1;\n\n    /**\n     * The type of CONSTANT_MethodType constant pool items.\n     */\n    static MTYPE: number = 16;\n\n    /**\n     * The type of CONSTANT_MethodHandle constant pool items.\n     */\n    static HANDLE: number = 15;\n\n    /**\n     * The type of CONSTANT_InvokeDynamic constant pool items.\n     */\n    static INDY: number = 18;\n\n    /**\n     * The base value for all CONSTANT_MethodHandle constant pool items.\n     * Internally, ASM store the 9 variations of CONSTANT_MethodHandle into 9\n     * different items.\n     */\n    static HANDLE_BASE: number = 20;\n\n    /**\n     * Normal type Item stored in the ClassWriter {@link ClassWriter#typeTable},\n     * instead of the constant pool, in order to avoid clashes with normal\n     * constant pool items in the ClassWriter constant pool's hash table.\n     */\n    static TYPE_NORMAL: number = 30;\n\n    /**\n     * Uninitialized type Item stored in the ClassWriter\n     * {@link ClassWriter#typeTable}, instead of the constant pool, in order to\n     * avoid clashes with normal constant pool items in the ClassWriter constant\n     * pool's hash table.\n     */\n    static TYPE_UNINIT: number = 31;\n\n    /**\n     * Merged type Item stored in the ClassWriter {@link ClassWriter#typeTable},\n     * instead of the constant pool, in order to avoid clashes with normal\n     * constant pool items in the ClassWriter constant pool's hash table.\n     */\n    static TYPE_MERGED: number = 32;\n\n    /**\n     * The type of BootstrapMethods items. These items are stored in a special\n     * class attribute named BootstrapMethods and not in the constant pool.\n     */\n    static BSM: number = 33;\n\n    /**\n     * The class reader from which this class writer was constructed, if any.\n     */\n    cr: ClassReader;\n\n    /**\n     * Minor and major version numbers of the class to be generated.\n     */\n    version: number;\n\n    /**\n     * Index of the next item to be added in the constant pool.\n     */\n    index: number;\n\n    /**\n     * The constant pool of this class.\n     */\n    pool: ByteVector;\n\n    /**\n     * The constant pool's hash table data.\n     */\n    items: Item[];\n\n    /**\n     * The threshold of the constant pool's hash table.\n     */\n    threshold: number;\n\n    /**\n     * A reusable key used to look for items in the {@link #items} hash table.\n     */\n    key: Item;\n\n    /**\n     * A reusable key used to look for items in the {@link #items} hash table.\n     */\n    key2: Item;\n\n    /**\n     * A reusable key used to look for items in the {@link #items} hash table.\n     */\n    key3: Item;\n\n    /**\n     * A reusable key used to look for items in the {@link #items} hash table.\n     */\n    key4: Item;\n\n    /**\n     * A type table used to temporarily store internal names that will not\n     * necessarily be stored in the constant pool. This type table is used by\n     * the control flow and data flow analysis algorithm used to compute stack\n     * map frames from scratch. This array associates to each index <tt>i</tt>\n     * the Item whose index is <tt>i</tt>. All Item objects stored in this array\n     * are also stored in the {@link #items} hash table. These two arrays allow\n     * to retrieve an Item from its index or, conversely, to get the index of an\n     * Item from its value. Each Item stores an internal name in its\n     * {@link Item#strVal1} field.\n     */\n    typeTable: Item[];\n\n    /**\n     * Number of elements in the {@link #typeTable} array.\n     */\n    private typeCount: number;\n\n    /**\n     * The access flags of this class.\n     */\n    private access: number;\n\n    /**\n     * The constant pool item that contains the internal name of this class.\n     */\n    private name: number;\n\n    /**\n     * The internal name of this class.\n     */\n    thisName: string;\n\n    /**\n     * The constant pool item that contains the signature of this class.\n     */\n    private signature: number;\n\n    /**\n     * The constant pool item that contains the internal name of the super class\n     * of this class.\n     */\n    private superName: number;\n\n    /**\n     * Number of interfaces implemented or extended by this class or interface.\n     */\n    private interfaceCount: number;\n\n    /**\n     * The interfaces implemented or extended by this class or interface. More\n     * precisely, this array contains the indexes of the constant pool items\n     * that contain the internal names of these interfaces.\n     */\n    private interfaces: number[];\n\n    /**\n     * The index of the constant pool item that contains the name of the source\n     * file from which this class was compiled.\n     */\n    private sourceFile: number;\n\n    /**\n     * The SourceDebug attribute of this class.\n     */\n    private sourceDebug: ByteVector;\n\n    /**\n     * The constant pool item that contains the name of the enclosing class of\n     * this class.\n     */\n    private enclosingMethodOwner: number;\n\n    /**\n     * The constant pool item that contains the name and descriptor of the\n     * enclosing method of this class.\n     */\n    private enclosingMethod: number;\n\n    /**\n     * The runtime visible annotations of this class.\n     */\n    private anns: AnnotationWriter;\n\n    /**\n     * The runtime invisible annotations of this class.\n     */\n    private ianns: AnnotationWriter;\n\n    /**\n     * The runtime visible type annotations of this class.\n     */\n    private tanns: AnnotationWriter;\n\n    /**\n     * The runtime invisible type annotations of this class.\n     */\n    private itanns: AnnotationWriter;\n\n    /**\n     * The non standard attributes of this class.\n     */\n    private attrs: Attribute;\n\n    /**\n     * The number of entries in the InnerClasses attribute.\n     */\n    private innerClassesCount: number;\n\n    /**\n     * The InnerClasses attribute.\n     */\n    private innerClasses: ByteVector;\n\n    /**\n     * The number of entries in the BootstrapMethods attribute.\n     */\n    bootstrapMethodsCount: number;\n\n    /**\n     * The BootstrapMethods attribute.\n     */\n    bootstrapMethods: ByteVector;\n\n    /**\n     * The fields of this class. These fields are stored in a linked list of\n     * {@link FieldWriter} objects, linked to each other by their\n     * {@link FieldWriter#fv} field. This field stores the first element of this\n     * list.\n     */\n    firstField: FieldWriter;\n\n    /**\n     * The fields of this class. These fields are stored in a linked list of\n     * {@link FieldWriter} objects, linked to each other by their\n     * {@link FieldWriter#fv} field. This field stores the last element of this\n     * list.\n     */\n    lastField: FieldWriter;\n\n    /**\n     * The methods of this class. These methods are stored in a linked list of\n     * {@link MethodWriter} objects, linked to each other by their\n     * {@link MethodWriter#mv} field. This field stores the first element of\n     * this list.\n     */\n    firstMethod: MethodWriter;\n\n    /**\n     * The methods of this class. These methods are stored in a linked list of\n     * {@link MethodWriter} objects, linked to each other by their\n     * {@link MethodWriter#mv} field. This field stores the last element of this\n     * list.\n     */\n    lastMethod: MethodWriter;\n\n    /**\n     * Indicates what must be automatically computed.\n     *\n     * @see MethodWriter#compute\n     */\n    private compute: number;\n\n    /**\n     * <tt>true</tt> if some methods have wide forward jumps using ASM pseudo\n     * instructions, which need to be expanded into sequences of standard\n     * bytecode instructions. In this case the class is re-read and re-written\n     * with a ClassReader -> ClassWriter chain to perform this transformation.\n     */\n    hasAsmInsns: boolean;\n\n    static __static_initializer_0() {\n        let i: number;\n        let b: number[] = new Array(220);\n        let s: string = \"AAAAAAAAAAAAAAAABCLMMDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANAAAAAAAAAAAAAAAAAAAAJJJJJJJJJJJJJJJJDOPAAAAAAGGGGGGGHIFBFAAFFAARQJJKKSSSSSSSSSSSSSSSSSS\";\n        for (i = 0; i < b.length; ++i) {\n            b[i] = (((s.charAt(i)).charCodeAt(0) - (\"A\").charCodeAt(0)) | 0);\n        }\n        ClassWriter.TYPE = b;\n    }\n\n    /**\n     * Constructs a new {@link ClassWriter} object and enables optimizations for\n     * \"mostly add\" bytecode transformations. These optimizations are the\n     * following:\n     *\n     * <ul>\n     * <li>The constant pool from the original class is copied as is in the new\n     * class, which saves time. New constant pool entries will be added at the\n     * end if necessary, but unused constant pool entries <i>won't be\n     * removed</i>.</li>\n     * <li>Methods that are not transformed are copied as is in the new class,\n     * directly from the original class bytecode (i.e. without emitting visit\n     * events for all the method instructions), which saves a <i>lot</i> of\n     * time. Untransformed methods are detected by the fact that the\n     * {@link ClassReader} receives {@link MethodVisitor} objects that come from\n     * a {@link ClassWriter} (and not from any other {@link ClassVisitor}\n     * instance).</li>\n     * </ul>\n     *\n     * @param classReader\n     * the {@link ClassReader} used to read the original class. It\n     * will be used to copy the entire constant pool from the\n     * original class and also to copy other fragments of original\n     * bytecode where applicable.\n     * @param flags\n     * option flags that can be used to modify the default behavior\n     * of this class. <i>These option flags do not affect methods\n     * that are copied as is in the new class. This means that\n     * neither the maximum stack size nor the stack frames will be\n     * computed for these methods</i>. See {@link #COMPUTE_MAXS},\n     * {@link #COMPUTE_FRAMES}.\n     */\n    public constructor(classReader?: any, flags?: any) {\n        if (((classReader != null && classReader instanceof ClassReader) || classReader === null) && ((typeof flags === \"number\") || flags === null)) {\n            let __args = Array.prototype.slice.call(arguments);\n            {\n                throw new Error(\"not supported\")\n\n                // let __args = Array.prototype.slice.call(arguments);\n                // super(Opcodes.ASM5);\n                // this.version = 0;\n                // this.index = 0;\n                // this.threshold = 0;\n                // this.typeCount = 0;\n                // this.access = 0;\n                // this.name = 0;\n                // this.signature = 0;\n                // this.superName = 0;\n                // this.interfaceCount = 0;\n                // this.sourceFile = 0;\n                // this.enclosingMethodOwner = 0;\n                // this.enclosingMethod = 0;\n                // this.innerClassesCount = 0;\n                // this.bootstrapMethodsCount = 0;\n                // this.compute = 0;\n                // this.hasAsmInsns = false;\n                // (() => {\n                //     this.index = 1;\n                //     this.pool = new ByteVector();\n                //     this.items = new Array(256);\n                //     this.threshold = (<number>(0.75 * this.items.length) | 0);\n                //     // this.key = new Item();\n                //     // this.key2 = new Item();\n                //     // this.key3 = new Item();\n                //     // this.key4 = new Item();\n                //     this.compute = (flags & ClassWriter.COMPUTE_FRAMES) !== 0 ? MethodWriter.FRAMES : ((flags & ClassWriter.COMPUTE_MAXS) !== 0 ? MethodWriter.MAXS : MethodWriter.NOTHING);\n                // })();\n            }\n            // (() => {\n            //     classReader.copyPool(this);\n            //     this.cr = classReader;\n            // })();\n        } else if (((typeof classReader === \"number\") || classReader === null) && flags === undefined) {\n            let __args = Array.prototype.slice.call(arguments);\n            let flags: any = __args[0];\n            super(Opcodes.ASM5);\n            this.version = 0;\n            this.index = 0;\n            this.threshold = 0;\n            this.typeCount = 0;\n            this.access = 0;\n            this.name = 0;\n            this.signature = 0;\n            this.superName = 0;\n            this.interfaceCount = 0;\n            this.sourceFile = 0;\n            this.enclosingMethodOwner = 0;\n            this.enclosingMethod = 0;\n            this.innerClassesCount = 0;\n            this.bootstrapMethodsCount = 0;\n            this.compute = 0;\n            this.hasAsmInsns = false;\n            (() => {\n                this.index = 1;\n                this.pool = new ByteVector();\n                this.items = new Array(256);\n                this.threshold = ((0.75 * this.items.length) | 0);\n                // this.key = new Item();\n                // this.key2 = new Item();\n                // this.key3 = new Item();\n                // this.key4 = new Item();\n                this.compute = (flags & ClassWriter.COMPUTE_FRAMES) !== 0 ? MethodWriter.FRAMES : ((flags & ClassWriter.COMPUTE_MAXS) !== 0 ? MethodWriter.MAXS : MethodWriter.NOTHING);\n            })();\n        } else { throw new Error(\"invalid overload\"); }\n    }\n\n    public visit(version: number, access: number, name: string, signature: string, superName: string, interfaces: string[]) {\n        this.version = version;\n        this.access = access;\n        this.name = this.newClass(name);\n        this.thisName = name;\n        if (ClassReader.SIGNATURES && signature != null) {\n            this.signature = this.newUTF8(signature);\n        }\n        this.superName = superName == null ? 0 : this.newClass(superName);\n        if (interfaces != null && interfaces.length > 0) {\n            this.interfaceCount = interfaces.length;\n            this.interfaces = new Array(this.interfaceCount);\n            for (let i: number = 0; i < this.interfaceCount; ++i) {\n                this.interfaces[i] = this.newClass(interfaces[i]);\n            }\n        }\n    }\n\n    public visitSource(file: string, debug: string) {\n        throw new Error(\"not supported\")\n        // if (file != null) {\n        //     this.sourceFile = this.newUTF8(file);\n        // }\n        // if (debug != null) {\n        //     this.sourceDebug = new ByteVector().encodeUTF8(debug, 0, javaemul.internal.IntegerHelper.MAX_VALUE);\n        // }\n    }\n\n    public visitOuterClass(owner: string, name: string, desc: string) {\n        this.enclosingMethodOwner = this.newClass(owner);\n        if (name != null && desc != null) {\n            this.enclosingMethod = this.newNameType(name, desc);\n        }\n    }\n\n    public visitAnnotation(desc: string, visible: boolean): AnnotationVisitor {\n        if (!ClassReader.ANNOTATIONS) {\n            return null;\n        }\n        let bv: ByteVector = new ByteVector();\n        bv.putShort(this.newUTF8(desc)).putShort(0);\n        let aw: AnnotationWriter = new AnnotationWriter(this, true, bv, bv, 2);\n        if (visible) {\n            aw.next = this.anns;\n            this.anns = aw;\n        } else {\n            aw.next = this.ianns;\n            this.ianns = aw;\n        }\n        return aw;\n    }\n\n    public visitTypeAnnotation(typeRef: number, typePath: TypePath, desc: string, visible: boolean): AnnotationVisitor {\n        if (!ClassReader.ANNOTATIONS) {\n            return null;\n        }\n        let bv: ByteVector = new ByteVector();\n        AnnotationWriter.putTarget(typeRef, typePath, bv);\n        bv.putShort(this.newUTF8(desc)).putShort(0);\n        let aw: AnnotationWriter = new AnnotationWriter(this, true, bv, bv, bv.length - 2);\n        if (visible) {\n            aw.next = this.tanns;\n            this.tanns = aw;\n        } else {\n            aw.next = this.itanns;\n            this.itanns = aw;\n        }\n        return aw;\n    }\n\n    public visitAttribute(attr: Attribute) {\n        attr.next = this.attrs;\n        this.attrs = attr;\n    }\n\n    public visitInnerClass(name: string, outerName: string, innerName: string, access: number) {\n        if (this.innerClasses == null) {\n            this.innerClasses = new ByteVector();\n        }\n        let nameItem: Item = this.newClassItem(name);\n        if (nameItem.intVal === 0) {\n            ++this.innerClassesCount;\n            this.innerClasses.putShort(nameItem.index);\n            this.innerClasses.putShort(outerName == null ? 0 : this.newClass(outerName));\n            this.innerClasses.putShort(innerName == null ? 0 : this.newUTF8(innerName));\n            this.innerClasses.putShort(access);\n            nameItem.intVal = this.innerClassesCount;\n        } else {\n        }\n    }\n\n    public visitField(access: number, name: string, desc: string, signature: string, value: any): FieldVisitor {\n        return new FieldWriter(this, access, name, desc, signature, value);\n    }\n\n    public visitMethod(access: number, name: string, desc: string, signature: string, exceptions: string[]): MethodVisitor {\n        return new MethodWriter(this, access, name, desc, signature, exceptions, this.compute);\n    }\n\n    public visitEnd() {\n    }\n\n    /**\n     * Returns the bytecode of the class that was build with this class writer.\n     *\n     * @return the bytecode of the class that was build with this class writer.\n     */\n    public toByteArray(): number[] {\n        // if (this.index > 65535) {\n        //     throw new Error(\"Class file too large!\");\n        // }\n        // let size: number = 24 + 2 * this.interfaceCount;\n        // let nbFields: number = 0;\n        // let fb: FieldWriter = this.firstField;\n        // while ((fb != null)) {\n        //     ++nbFields;\n        //     size += fb.getSize();\n        //     fb = <FieldWriter>fb.fv;\n        // };\n        // let nbMethods: number = 0;\n        // let mb: MethodWriter = this.firstMethod;\n        // while ((mb != null)) {\n        //     ++nbMethods;\n        //     size += mb.getSize();\n        //     mb = <MethodWriter>mb.mv;\n        // };\n        // let attributeCount: number = 0;\n        // if (this.bootstrapMethods != null) {\n        //     ++attributeCount;\n        //     size += 8 + this.bootstrapMethods.length;\n        //     this.newUTF8(\"BootstrapMethods\");\n        // }\n        // if (ClassReader.SIGNATURES && this.signature !== 0) {\n        //     ++attributeCount;\n        //     size += 8;\n        //     this.newUTF8(\"Signature\");\n        // }\n        // if (this.sourceFile !== 0) {\n        //     ++attributeCount;\n        //     size += 8;\n        //     this.newUTF8(\"SourceFile\");\n        // }\n        // if (this.sourceDebug != null) {\n        //     ++attributeCount;\n        //     size += this.sourceDebug.length + 6;\n        //     this.newUTF8(\"SourceDebugExtension\");\n        // }\n        // if (this.enclosingMethodOwner !== 0) {\n        //     ++attributeCount;\n        //     size += 10;\n        //     this.newUTF8(\"EnclosingMethod\");\n        // }\n        // if ((this.access & Opcodes.ACC_DEPRECATED) !== 0) {\n        //     ++attributeCount;\n        //     size += 6;\n        //     this.newUTF8(\"Deprecated\");\n        // }\n        // if ((this.access & Opcodes.ACC_SYNTHETIC) !== 0) {\n        //     if ((this.version & 65535) < Opcodes.V1_5 || (this.access & ClassWriter.ACC_SYNTHETIC_ATTRIBUTE) !== 0) {\n        //         ++attributeCount;\n        //         size += 6;\n        //         this.newUTF8(\"Synthetic\");\n        //     }\n        // }\n        // if (this.innerClasses != null) {\n        //     ++attributeCount;\n        //     size += 8 + this.innerClasses.length;\n        //     this.newUTF8(\"InnerClasses\");\n        // }\n        // if (ClassReader.ANNOTATIONS && this.anns != null) {\n        //     ++attributeCount;\n        //     size += 8 + this.anns.getSize();\n        //     this.newUTF8(\"RuntimeVisibleAnnotations\");\n        // }\n        // if (ClassReader.ANNOTATIONS && this.ianns != null) {\n        //     ++attributeCount;\n        //     size += 8 + this.ianns.getSize();\n        //     this.newUTF8(\"RuntimeInvisibleAnnotations\");\n        // }\n        // if (ClassReader.ANNOTATIONS && this.tanns != null) {\n        //     ++attributeCount;\n        //     size += 8 + this.tanns.getSize();\n        //     this.newUTF8(\"RuntimeVisibleTypeAnnotations\");\n        // }\n        // if (ClassReader.ANNOTATIONS && this.itanns != null) {\n        //     ++attributeCount;\n        //     size += 8 + this.itanns.getSize();\n        //     this.newUTF8(\"RuntimeInvisibleTypeAnnotations\");\n        // }\n        // if (this.attrs != null) {\n        //     attributeCount += this.attrs.getCount();\n        //     size += this.attrs.getSize(this, null, 0, -1, -1);\n        // }\n        // size += this.pool.length;\n        // let out: ByteVector = new ByteVector(size);\n        // out.putInt(-889275714).putInt(this.version);\n        // out.putShort(this.index).putByteArray(this.pool.data, 0, this.pool.length);\n        // let mask: number = Opcodes.ACC_DEPRECATED | ClassWriter.ACC_SYNTHETIC_ATTRIBUTE | (((this.access & ClassWriter.ACC_SYNTHETIC_ATTRIBUTE) / ClassWriter.TO_ACC_SYNTHETIC_$LI$() | 0));\n        // out.putShort(this.access & ~mask).putShort(this.name).putShort(this.superName);\n        // out.putShort(this.interfaceCount);\n        // for (let i: number = 0; i < this.interfaceCount; ++i) {\n        //     out.putShort(this.interfaces[i]);\n        // }\n        // out.putShort(nbFields);\n        // fb = this.firstField;\n        // while ((fb != null)) {\n        //     fb.put(out);\n        //     fb = <FieldWriter>fb.fv;\n        // };\n        // out.putShort(nbMethods);\n        // mb = this.firstMethod;\n        // while ((mb != null)) {\n        //     mb.put(out);\n        //     mb = <MethodWriter>mb.mv;\n        // };\n        // out.putShort(attributeCount);\n        // if (this.bootstrapMethods != null) {\n        //     out.putShort(this.newUTF8(\"BootstrapMethods\"));\n        //     out.putInt(this.bootstrapMethods.length + 2).putShort(this.bootstrapMethodsCount);\n        //     out.putByteArray(this.bootstrapMethods.data, 0, this.bootstrapMethods.length);\n        // }\n        // if (ClassReader.SIGNATURES && this.signature !== 0) {\n        //     out.putShort(this.newUTF8(\"Signature\")).putInt(2).putShort(this.signature);\n        // }\n        // if (this.sourceFile !== 0) {\n        //     out.putShort(this.newUTF8(\"SourceFile\")).putInt(2).putShort(this.sourceFile);\n        // }\n        // if (this.sourceDebug != null) {\n        //     let len: number = this.sourceDebug.length;\n        //     out.putShort(this.newUTF8(\"SourceDebugExtension\")).putInt(len);\n        //     out.putByteArray(this.sourceDebug.data, 0, len);\n        // }\n        // if (this.enclosingMethodOwner !== 0) {\n        //     out.putShort(this.newUTF8(\"EnclosingMethod\")).putInt(4);\n        //     out.putShort(this.enclosingMethodOwner).putShort(this.enclosingMethod);\n        // }\n        // if ((this.access & Opcodes.ACC_DEPRECATED) !== 0) {\n        //     out.putShort(this.newUTF8(\"Deprecated\")).putInt(0);\n        // }\n        // if ((this.access & Opcodes.ACC_SYNTHETIC) !== 0) {\n        //     if ((this.version & 65535) < Opcodes.V1_5 || (this.access & ClassWriter.ACC_SYNTHETIC_ATTRIBUTE) !== 0) {\n        //         out.putShort(this.newUTF8(\"Synthetic\")).putInt(0);\n        //     }\n        // }\n        // if (this.innerClasses != null) {\n        //     out.putShort(this.newUTF8(\"InnerClasses\"));\n        //     out.putInt(this.innerClasses.length + 2).putShort(this.innerClassesCount);\n        //     out.putByteArray(this.innerClasses.data, 0, this.innerClasses.length);\n        // }\n        // if (ClassReader.ANNOTATIONS && this.anns != null) {\n        //     out.putShort(this.newUTF8(\"RuntimeVisibleAnnotations\"));\n        //     this.anns.put(out);\n        // }\n        // if (ClassReader.ANNOTATIONS && this.ianns != null) {\n        //     out.putShort(this.newUTF8(\"RuntimeInvisibleAnnotations\"));\n        //     this.ianns.put(out);\n        // }\n        // if (ClassReader.ANNOTATIONS && this.tanns != null) {\n        //     out.putShort(this.newUTF8(\"RuntimeVisibleTypeAnnotations\"));\n        //     this.tanns.put(out);\n        // }\n        // if (ClassReader.ANNOTATIONS && this.itanns != null) {\n        //     out.putShort(this.newUTF8(\"RuntimeInvisibleTypeAnnotations\"));\n        //     this.itanns.put(out);\n        // }\n        // if (this.attrs != null) {\n        //     this.attrs.put(this, null, 0, -1, -1, out);\n        // }\n        // if (this.hasAsmInsns) {\n        //     this.anns = null;\n        //     this.ianns = null;\n        //     this.attrs = null;\n        //     this.innerClassesCount = 0;\n        //     this.innerClasses = null;\n        //     this.firstField = null;\n        //     this.lastField = null;\n        //     this.firstMethod = null;\n        //     this.lastMethod = null;\n        //     this.compute = MethodWriter.INSERTED_FRAMES;\n        //     this.hasAsmInsns = false;\n        //     new ClassReader(out.data).accept(this, ClassReader.EXPAND_FRAMES | ClassReader.EXPAND_ASM_INSNS);\n        //     return this.toByteArray();\n        // }\n        // return out.data;\n        throw new Error(\"not supported\")\n    }\n\n    /**\n     * Adds a number or string constant to the constant pool of the class being\n     * build. Does nothing if the constant pool already contains a similar item.\n     *\n     * @param cst\n     * the value of the constant to be added to the constant pool.\n     * This parameter must be an {@link Integer}, a {@link Float}, a\n     * {@link Long}, a {@link Double}, a {@link String} or a\n     * {@link Type}.\n     * @return a new or already existing constant item with the given value.\n     */\n    newConstItem(cst: any): Item {\n        throw new Error(\"unsupported\");\n        // if (typeof cst === 'number') {\n        //     let val: number = /* intValue */((<number>cst) | 0);\n        //     return this.newInteger(val);\n        // } else if (typeof cst === 'number') {\n        //     let val: number = /* intValue */((<number>cst) | 0);\n        //     return this.newInteger(val);\n        // } else if (typeof cst === 'string') {\n        //     let val: number = ((<string>cst).charValue()).charCodeAt(0);\n        //     return this.newInteger(val);\n        // } else if (typeof cst === 'number') {\n        //     let val: number = /* intValue */((<number>cst) | 0);\n        //     return this.newInteger(val);\n        // } else if (typeof cst === 'boolean') {\n        //     let val: number = (<boolean>cst).booleanValue() ? 1 : 0;\n        //     return this.newInteger(val);\n        // } else if (typeof cst === 'number') {\n        //     let val: number = (<number>cst).floatValue();\n        //     return this.newFloat(val);\n        // } else if (typeof cst === 'number') {\n        //     let val: number = (<number>cst).longValue();\n        //     return this.newLong(val);\n        // } else if (typeof cst === 'number') {\n        //     let val: number = (<number>cst).doubleValue();\n        //     return this.newDouble(val);\n        // } else if (typeof cst === 'string') {\n        //     return this.newString(<string>cst);\n        // } else if (cst != null && cst instanceof Type) {\n        //     let t: Type = <Type>cst;\n        //     let s: number = t.getSort();\n        //     if (s === Type.OBJECT) {\n        //         return this.newClassItem(t.getInternalName());\n        //     } else if (s === Type.METHOD) {\n        //         return this.newMethodTypeItem(t.getDescriptor());\n        //     } else {\n        //         return this.newClassItem(t.getDescriptor());\n        //     }\n        // } else if (cst != null && cst instanceof Handle) {\n        //     let h: Handle = <Handle>cst;\n        //     return this.newHandleItem(h.tag, h.owner, h.name, h.desc, h.itf);\n        // } else {\n        //     throw new Error(\"value \" + cst);\n        // }\n    }\n\n    /**\n     * Adds a number or string constant to the constant pool of the class being\n     * build. Does nothing if the constant pool already contains a similar item.\n     * <i>This method is intended for {@link Attribute} sub classes, and is\n     * normally not needed by class generators or adapters.</i>\n     *\n     * @param cst\n     * the value of the constant to be added to the constant pool.\n     * This parameter must be an {@link Integer}, a {@link Float}, a\n     * {@link Long}, a {@link Double} or a {@link String}.\n     * @return the index of a new or already existing constant item with the\n     * given value.\n     */\n    public newConst(cst: any): number {\n        return this.newConstItem(cst).index;\n    }\n\n    /**\n     * Adds an UTF8 string to the constant pool of the class being build. Does\n     * nothing if the constant pool already contains a similar item. <i>This\n     * method is intended for {@link Attribute} sub classes, and is normally not\n     * needed by class generators or adapters.</i>\n     *\n     * @param value\n     * the String value.\n     * @return the index of a new or already existing UTF8 item.\n     */\n    public newUTF8(value: string): number {\n        this.key.set(ClassWriter.UTF8, value, null, null);\n        let result: Item = this.get(this.key);\n        if (result == null) {\n            this.pool.putByte(ClassWriter.UTF8).putUTF8(value);\n            result = new Item(this.index++, this.key);\n            this.put(result);\n        }\n        return result.index;\n    }\n\n    /**\n     * Adds a class reference to the constant pool of the class being build.\n     * Does nothing if the constant pool already contains a similar item.\n     * <i>This method is intended for {@link Attribute} sub classes, and is\n     * normally not needed by class generators or adapters.</i>\n     *\n     * @param value\n     * the internal name of the class.\n     * @return a new or already existing class reference item.\n     */\n    newClassItem(value: string): Item {\n        this.key2.set(ClassWriter.CLASS, value, null, null);\n        let result: Item = this.get(this.key2);\n        if (result == null) {\n            this.pool.put12(ClassWriter.CLASS, this.newUTF8(value));\n            result = new Item(this.index++, this.key2);\n            this.put(result);\n        }\n        return result;\n    }\n\n    /**\n     * Adds a class reference to the constant pool of the class being build.\n     * Does nothing if the constant pool already contains a similar item.\n     * <i>This method is intended for {@link Attribute} sub classes, and is\n     * normally not needed by class generators or adapters.</i>\n     *\n     * @param value\n     * the internal name of the class.\n     * @return the index of a new or already existing class reference item.\n     */\n    public newClass(value: string): number {\n        return this.newClassItem(value).index;\n    }\n\n    /**\n     * Adds a method type reference to the constant pool of the class being\n     * build. Does nothing if the constant pool already contains a similar item.\n     * <i>This method is intended for {@link Attribute} sub classes, and is\n     * normally not needed by class generators or adapters.</i>\n     *\n     * @param methodDesc\n     * method descriptor of the method type.\n     * @return a new or already existing method type reference item.\n     */\n    newMethodTypeItem(methodDesc: string): Item {\n        this.key2.set(ClassWriter.MTYPE, methodDesc, null, null);\n        let result: Item = this.get(this.key2);\n        if (result == null) {\n            this.pool.put12(ClassWriter.MTYPE, this.newUTF8(methodDesc));\n            result = new Item(this.index++, this.key2);\n            this.put(result);\n        }\n        return result;\n    }\n\n    /**\n     * Adds a method type reference to the constant pool of the class being\n     * build. Does nothing if the constant pool already contains a similar item.\n     * <i>This method is intended for {@link Attribute} sub classes, and is\n     * normally not needed by class generators or adapters.</i>\n     *\n     * @param methodDesc\n     * method descriptor of the method type.\n     * @return the index of a new or already existing method type reference\n     * item.\n     */\n    public newMethodType(methodDesc: string): number {\n        return this.newMethodTypeItem(methodDesc).index;\n    }\n\n    /**\n     * Adds a handle to the constant pool of the class being build. Does nothing\n     * if the constant pool already contains a similar item. <i>This method is\n     * intended for {@link Attribute} sub classes, and is normally not needed by\n     * class generators or adapters.</i>\n     *\n     * @param tag\n     * the kind of this handle. Must be {@link Opcodes#H_GETFIELD},\n     * {@link Opcodes#H_GETSTATIC}, {@link Opcodes#H_PUTFIELD},\n     * {@link Opcodes#H_PUTSTATIC}, {@link Opcodes#H_INVOKEVIRTUAL},\n     * {@link Opcodes#H_INVOKESTATIC},\n     * {@link Opcodes#H_INVOKESPECIAL},\n     * {@link Opcodes#H_NEWINVOKESPECIAL} or\n     * {@link Opcodes#H_INVOKEINTERFACE}.\n     * @param owner\n     * the internal name of the field or method owner class.\n     * @param name\n     * the name of the field or method.\n     * @param desc\n     * the descriptor of the field or method.\n     * @param itf\n     * true if the owner is an interface.\n     * @return a new or an already existing method type reference item.\n     */\n    newHandleItem(tag: number, owner: string, name: string, desc: string, itf: boolean): Item {\n        this.key4.set(ClassWriter.HANDLE_BASE + tag, owner, name, desc);\n        let result: Item = this.get(this.key4);\n        if (result == null) {\n            if (tag <= Opcodes.H_PUTSTATIC) {\n                this.put112(ClassWriter.HANDLE, tag, this.newField(owner, name, desc));\n            } else {\n                this.put112(ClassWriter.HANDLE, tag, this.newMethod(owner, name, desc, itf));\n            }\n            result = new Item(this.index++, this.key4);\n            this.put(result);\n        }\n        return result;\n    }\n\n    /**\n     * Adds a handle to the constant pool of the class being build. Does nothing\n     * if the constant pool already contains a similar item. <i>This method is\n     * intended for {@link Attribute} sub classes, and is normally not needed by\n     * class generators or adapters.</i>\n     *\n     * @param tag\n     * the kind of this handle. Must be {@link Opcodes#H_GETFIELD},\n     * {@link Opcodes#H_GETSTATIC}, {@link Opcodes#H_PUTFIELD},\n     * {@link Opcodes#H_PUTSTATIC}, {@link Opcodes#H_INVOKEVIRTUAL},\n     * {@link Opcodes#H_INVOKESTATIC},\n     * {@link Opcodes#H_INVOKESPECIAL},\n     * {@link Opcodes#H_NEWINVOKESPECIAL} or\n     * {@link Opcodes#H_INVOKEINTERFACE}.\n     * @param owner\n     * the internal name of the field or method owner class.\n     * @param name\n     * the name of the field or method.\n     * @param desc\n     * the descriptor of the field or method.\n     * @return the index of a new or already existing method type reference\n     * item.\n     *\n     * @deprecated this method is superseded by\n     * {@link #newHandle(int, String, String, String, boolean)}.\n     */\n    public newHandle$int$java_lang_String$java_lang_String$java_lang_String(tag: number, owner: string, name: string, desc: string): number {\n        return this.newHandle(tag, owner, name, desc, tag === Opcodes.H_INVOKEINTERFACE);\n    }\n\n    /**\n     * Adds a handle to the constant pool of the class being build. Does nothing\n     * if the constant pool already contains a similar item. <i>This method is\n     * intended for {@link Attribute} sub classes, and is normally not needed by\n     * class generators or adapters.</i>\n     *\n     * @param tag\n     * the kind of this handle. Must be {@link Opcodes#H_GETFIELD},\n     * {@link Opcodes#H_GETSTATIC}, {@link Opcodes#H_PUTFIELD},\n     * {@link Opcodes#H_PUTSTATIC}, {@link Opcodes#H_INVOKEVIRTUAL},\n     * {@link Opcodes#H_INVOKESTATIC},\n     * {@link Opcodes#H_INVOKESPECIAL},\n     * {@link Opcodes#H_NEWINVOKESPECIAL} or\n     * {@link Opcodes#H_INVOKEINTERFACE}.\n     * @param owner\n     * the internal name of the field or method owner class.\n     * @param name\n     * the name of the field or method.\n     * @param desc\n     * the descriptor of the field or method.\n     * @param itf\n     * true if the owner is an interface.\n     * @return the index of a new or already existing method type reference\n     * item.\n     */\n    public newHandle(tag?: any, owner?: any, name?: any, desc?: any, itf?: any): any {\n        if (((typeof tag === \"number\") || tag === null) && ((typeof owner === \"string\") || owner === null) && ((typeof name === \"string\") || name === null) && ((typeof desc === \"string\") || desc === null) && ((typeof itf === \"boolean\") || itf === null)) {\n            let __args = Array.prototype.slice.call(arguments);\n            return <any>(() => {\n                return this.newHandleItem(tag, owner, name, desc, itf).index;\n            })();\n        } else if (((typeof tag === \"number\") || tag === null) && ((typeof owner === \"string\") || owner === null) && ((typeof name === \"string\") || name === null) && ((typeof desc === \"string\") || desc === null) && itf === undefined) {\n            return <any>this.newHandle$int$java_lang_String$java_lang_String$java_lang_String(tag, owner, name, desc);\n        } else { throw new Error(\"invalid overload\"); }\n    }\n\n    /**\n     * Adds an invokedynamic reference to the constant pool of the class being\n     * build. Does nothing if the constant pool already contains a similar item.\n     * <i>This method is intended for {@link Attribute} sub classes, and is\n     * normally not needed by class generators or adapters.</i>\n     *\n     * @param name\n     * name of the invoked method.\n     * @param desc\n     * descriptor of the invoke method.\n     * @param bsm\n     * the bootstrap method.\n     * @param bsmArgs\n     * the bootstrap method constant arguments.\n     *\n     * @return a new or an already existing invokedynamic type reference item.\n     */\n    newInvokeDynamicItem(name: string, desc: string, bsm: Handle, ...bsmArgs: any[]): Item {\n        let bootstrapMethods: ByteVector = this.bootstrapMethods;\n        if (bootstrapMethods == null) {\n            bootstrapMethods = this.bootstrapMethods = new ByteVector();\n        }\n        let position: number = bootstrapMethods.length;\n        let hashCode: number = bsm.hashCode();\n        bootstrapMethods.putShort(this.newHandle(bsm.tag, bsm.owner, bsm.name, bsm.descriptor, bsm.isInterface));\n        let argsLength: number = bsmArgs.length;\n        bootstrapMethods.putShort(argsLength);\n        for (let i: number = 0; i < argsLength; i++) {\n            let bsmArg: any = bsmArgs[i];\n            hashCode ^= (bsmArg.toString());\n            bootstrapMethods.putShort(this.newConst(bsmArg));\n        }\n        let data: Uint8Array = bootstrapMethods.data;\n        let length: number = (1 + 1 + argsLength) << 1;\n        hashCode &= 2147483647;\n        let result: Item = this.items[hashCode % this.items.length];\n        loop: while ((result != null)) {\n            if (result.type !== ClassWriter.BSM || result.__hashCode !== hashCode) {\n                result = result.next;\n                continue;\n            }\n            let resultPosition: number = result.intVal;\n            for (let p: number = 0; p < length; p++) {\n                if (data[position + p] !== data[resultPosition + p]) {\n                    result = result.next;\n                    continue loop;\n                }\n            }\n            break;\n        };\n        let bootstrapMethodIndex: number;\n        if (result != null) {\n            bootstrapMethodIndex = result.index;\n            bootstrapMethods.length = position;\n        } else {\n            bootstrapMethodIndex = this.bootstrapMethodsCount++;\n            result = new Item(bootstrapMethodIndex);\n            result.setPosHash(position, hashCode);\n            this.put(result);\n        }\n        this.key3.setInvkDynItem(name, desc, bootstrapMethodIndex);\n        result = this.get(this.key3);\n        if (result == null) {\n            this.put122(ClassWriter.INDY, bootstrapMethodIndex, this.newNameType(name, desc));\n            result = new Item(this.index++, this.key3);\n            this.put(result);\n        }\n        return result;\n    }\n\n    /**\n     * Adds an invokedynamic reference to the constant pool of the class being\n     * build. Does nothing if the constant pool already contains a similar item.\n     * <i>This method is intended for {@link Attribute} sub classes, and is\n     * normally not needed by class generators or adapters.</i>\n     *\n     * @param name\n     * name of the invoked method.\n     * @param desc\n     * descriptor of the invoke method.\n     * @param bsm\n     * the bootstrap method.\n     * @param bsmArgs\n     * the bootstrap method constant arguments.\n     *\n     * @return the index of a new or already existing invokedynamic reference\n     * item.\n     */\n    public newInvokeDynamic(name: string, desc: string, bsm: Handle, ...bsmArgs: any[]): number {\n        return this.newInvokeDynamicItem.apply(this, [name, desc, bsm].concat(bsmArgs)).index;\n    }\n\n    /**\n     * Adds a field reference to the constant pool of the class being build.\n     * Does nothing if the constant pool already contains a similar item.\n     *\n     * @param owner\n     * the internal name of the field's owner class.\n     * @param name\n     * the field's name.\n     * @param desc\n     * the field's descriptor.\n     * @return a new or already existing field reference item.\n     */\n    newFieldItem(owner: string, name: string, desc: string): Item {\n        this.key3.set(ClassWriter.FIELD, owner, name, desc);\n        let result: Item = this.get(this.key3);\n        if (result == null) {\n            this.put122(ClassWriter.FIELD, this.newClass(owner), this.newNameType(name, desc));\n            result = new Item(this.index++, this.key3);\n            this.put(result);\n        }\n        return result;\n    }\n\n    /**\n     * Adds a field reference to the constant pool of the class being build.\n     * Does nothing if the constant pool already contains a similar item.\n     * <i>This method is intended for {@link Attribute} sub classes, and is\n     * normally not needed by class generators or adapters.</i>\n     *\n     * @param owner\n     * the internal name of the field's owner class.\n     * @param name\n     * the field's name.\n     * @param desc\n     * the field's descriptor.\n     * @return the index of a new or already existing field reference item.\n     */\n    public newField(owner: string, name: string, desc: string): number {\n        return this.newFieldItem(owner, name, desc).index;\n    }\n\n    /**\n     * Adds a method reference to the constant pool of the class being build.\n     * Does nothing if the constant pool already contains a similar item.\n     *\n     * @param owner\n     * the internal name of the method's owner class.\n     * @param name\n     * the method's name.\n     * @param desc\n     * the method's descriptor.\n     * @param itf\n     * <tt>true</tt> if <tt>owner</tt> is an interface.\n     * @return a new or already existing method reference item.\n     */\n    newMethodItem(owner: string, name: string, desc: string, itf: boolean): Item {\n        let type: number = itf ? ClassWriter.IMETH : ClassWriter.METH;\n        this.key3.set(type, owner, name, desc);\n        let result: Item = this.get(this.key3);\n        if (result == null) {\n            this.put122(type, this.newClass(owner), this.newNameType(name, desc));\n            result = new Item(this.index++, this.key3);\n            this.put(result);\n        }\n        return result;\n    }\n\n    /**\n     * Adds a method reference to the constant pool of the class being build.\n     * Does nothing if the constant pool already contains a similar item.\n     * <i>This method is intended for {@link Attribute} sub classes, and is\n     * normally not needed by class generators or adapters.</i>\n     *\n     * @param owner\n     * the internal name of the method's owner class.\n     * @param name\n     * the method's name.\n     * @param desc\n     * the method's descriptor.\n     * @param itf\n     * <tt>true</tt> if <tt>owner</tt> is an interface.\n     * @return the index of a new or already existing method reference item.\n     */\n    public newMethod(owner: string, name: string, desc: string, itf: boolean): number {\n        return this.newMethodItem(owner, name, desc, itf).index;\n    }\n\n    /**\n     * Adds an integer to the constant pool of the class being build. Does\n     * nothing if the constant pool already contains a similar item.\n     *\n     * @param value\n     * the int value.\n     * @return a new or already existing int item.\n     */\n    newInteger(value: number): Item {\n        this.key.set$int(value);\n        let result: Item = this.get(this.key);\n        if (result == null) {\n            this.pool.putByte(ClassWriter.INT).putInt(value);\n            result = new Item(this.index++, this.key);\n            this.put(result);\n        }\n        return result;\n    }\n\n    /**\n     * Adds a float to the constant pool of the class being build. Does nothing\n     * if the constant pool already contains a similar item.\n     *\n     * @param value\n     * the float value.\n     * @return a new or already existing float item.\n     */\n    newFloat(value: number): Item {\n        this.key.set$float(value);\n        let result: Item = this.get(this.key);\n        if (result == null) {\n            this.pool.putByte(ClassWriter.FLOAT).putInt(this.key.intVal);\n            result = new Item(this.index++, this.key);\n            this.put(result);\n        }\n        return result;\n    }\n\n    /**\n     * Adds a long to the constant pool of the class being build. Does nothing\n     * if the constant pool already contains a similar item.\n     *\n     * @param value\n     * the long value.\n     * @return a new or already existing long item.\n     */\n    newLong(value: Long): Item {\n        this.key.set$long(value);\n        let result: Item = this.get(this.key);\n        if (result == null) {\n            this.pool.putByte(ClassWriter.LONG).putLong(value);\n            result = new Item(this.index, this.key);\n            this.index += 2;\n            this.put(result);\n        }\n        return result;\n    }\n\n    /**\n     * Adds a double to the constant pool of the class being build. Does nothing\n     * if the constant pool already contains a similar item.\n     *\n     * @param value\n     * the double value.\n     * @return a new or already existing double item.\n     */\n    newDouble(value: number): Item {\n        this.key.set$double(value);\n        let result: Item = this.get(this.key);\n        if (result == null) {\n            this.pool.putByte(ClassWriter.DOUBLE).putLong(this.key.longVal);\n            result = new Item(this.index, this.key);\n            this.index += 2;\n            this.put(result);\n        }\n        return result;\n    }\n\n    /**\n     * Adds a string to the constant pool of the class being build. Does nothing\n     * if the constant pool already contains a similar item.\n     *\n     * @param value\n     * the String value.\n     * @return a new or already existing string item.\n     */\n    private newString(value: string): Item {\n        this.key2.set(ClassWriter.STR, value, null, null);\n        let result: Item = this.get(this.key2);\n        if (result == null) {\n            this.pool.put12(ClassWriter.STR, this.newUTF8(value));\n            result = new Item(this.index++, this.key2);\n            this.put(result);\n        }\n        return result;\n    }\n\n    /**\n     * Adds a name and type to the constant pool of the class being build. Does\n     * nothing if the constant pool already contains a similar item. <i>This\n     * method is intended for {@link Attribute} sub classes, and is normally not\n     * needed by class generators or adapters.</i>\n     *\n     * @param name\n     * a name.\n     * @param desc\n     * a type descriptor.\n     * @return the index of a new or already existing name and type item.\n     */\n    public newNameType(name: string, desc: string): number {\n        return this.newNameTypeItem(name, desc).index;\n    }\n\n    /**\n     * Adds a name and type to the constant pool of the class being build. Does\n     * nothing if the constant pool already contains a similar item.\n     *\n     * @param name\n     * a name.\n     * @param desc\n     * a type descriptor.\n     * @return a new or already existing name and type item.\n     */\n    newNameTypeItem(name: string, desc: string): Item {\n        this.key2.set(ClassWriter.NAME_TYPE, name, desc, null);\n        let result: Item = this.get(this.key2);\n        if (result == null) {\n            this.put122(ClassWriter.NAME_TYPE, this.newUTF8(name), this.newUTF8(desc));\n            result = new Item(this.index++, this.key2);\n            this.put(result);\n        }\n        return result;\n    }\n\n    /**\n     * Adds the given internal name to {@link #typeTable} and returns its index.\n     * Does nothing if the type table already contains this internal name.\n     *\n     * @param type\n     * the internal name to be added to the type table.\n     * @return the index of this internal name in the type table.\n     */\n    public addType(type?: any): any {\n        if (((typeof type === \"string\") || type === null)) {\n            let __args = Array.prototype.slice.call(arguments);\n            return <any>(() => {\n                this.key.set(ClassWriter.TYPE_NORMAL, type, null, null);\n                let result: Item = this.get(this.key);\n                if (result == null) {\n                    result = this.addType(this.key);\n                }\n                return result.index;\n            })();\n        } else if (((type != null && type instanceof Item) || type === null)) {\n            return <any>this.addType$Item(type);\n        } else { throw new Error(\"invalid overload\"); }\n    }\n\n    /**\n     * Adds the given \"uninitialized\" type to {@link #typeTable} and returns its\n     * index. This method is used for UNINITIALIZED types, made of an internal\n     * name and a bytecode offset.\n     *\n     * @param type\n     * the internal name to be added to the type table.\n     * @param offset\n     * the bytecode offset of the NEW instruction that created this\n     * UNINITIALIZED type value.\n     * @return the index of this internal name in the type table.\n     */\n    addUninitializedType(type: string, offset: number): number {\n        this.key.type = ClassWriter.TYPE_UNINIT;\n        this.key.intVal = offset;\n        this.key.strVal1 = type;\n        this.key.__hashCode = 2147483647 & (ClassWriter.TYPE_UNINIT + (<any>type.toString()) + offset);\n        let result: Item = this.get(this.key);\n        if (result == null) {\n            result = this.addType(this.key);\n        }\n        return result.index;\n    }\n\n    /**\n     * Adds the given Item to {@link #typeTable}.\n     *\n     * @param item\n     * the value to be added to the type table.\n     * @return the added Item, which a new Item instance with the same value as\n     * the given Item.\n     */\n    private addType$Item(item: Item): Item {\n        throw new Error(\"not supported\")\n        // ++this.typeCount;\n        // let result: Item = new Item(this.typeCount, this.key);\n        // this.put(result);\n        // if (this.typeTable == null) {\n        //     this.typeTable = new Array(16);\n        // }\n        // if (this.typeCount === this.typeTable.length) {\n        //     let newTable: Item[] = new Array(2 * this.typeTable.length);\n        //     java.lang.System.arraycopy(this.typeTable, 0, newTable, 0, this.typeTable.length);\n        //     this.typeTable = newTable;\n        // }\n        // this.typeTable[this.typeCount] = result;\n        // return result;\n    }\n\n    /**\n     * Returns the index of the common super type of the two given types. This\n     * method calls {@link #getCommonSuperClass} and caches the result in the\n     * {@link #items} hash table to speedup future calls with the same\n     * parameters.\n     *\n     * @param type1\n     * index of an internal name in {@link #typeTable}.\n     * @param type2\n     * index of an internal name in {@link #typeTable}.\n     * @return the index of the common super type of the two given types.\n     */\n    getMergedType(type1: number, type2: number): number {\n        throw new Error(\"not supported\")\n        // this.key2.type = ClassWriter.TYPE_MERGED;\n        // this.key2.longVal = type1 | ((Math.round(<number>type2)) << 32);\n        // this.key2.__hashCode = 2147483647 & (ClassWriter.TYPE_MERGED + type1 + type2);\n        // let result: Item = this.get(this.key2);\n        // if (result == null) {\n        //     let t: string = this.typeTable[type1].strVal1;\n        //     let u: string = this.typeTable[type2].strVal1;\n        //     this.key2.intVal = this.addType(this.getCommonSuperClass(t, u));\n        //     result = new Item((<number>0 | 0), this.key2);\n        //     this.put(result);\n        // }\n        // return result.intVal;\n    }\n\n    /**\n     * Returns the common super type of the two given types. The default\n     * implementation of this method <i>loads</i> the two given classes and uses\n     * the java.lang.Class methods to find the common super class. It can be\n     * overridden to compute this common super type in other ways, in particular\n     * without actually loading any class, or to take into account the class\n     * that is currently being generated by this ClassWriter, which can of\n     * course not be loaded since it is under construction.\n     *\n     * @param type1\n     * the internal name of a class.\n     * @param type2\n     * the internal name of another class.\n     * @return the internal name of the common super class of the two given\n     * classes.\n     */\n    getCommonSuperClass(type1: string, type2: string): string {\n        return \"java/lang/Object\";\n        // break....\n        // let c: any;\n        // let d: any;\n        // let classLoader: java.lang.ClassLoader = (<any>this.constructor).getClassLoader();\n        // try {\n        //     c = java.lang.Class.forName(/* replace */type1.split('/').join('.'), false, classLoader);\n        //     d = java.lang.Class.forName(/* replace */type2.split('/').join('.'), false, classLoader);\n        // } catch (e) {\n        //     throw new Error(e.toString());\n        // };\n        // if (c.isAssignableFrom(d)) {\n        //     return type1;\n        // }\n        // if (d.isAssignableFrom(c)) {\n        //     return type2;\n        // }\n        // if (c.isInterface() || d.isInterface()) {\n        //     return \"java/lang/Object\";\n        // } else {\n        //     do {\n        //         c = c.getSuperclass();\n        //     } while ((!c.isAssignableFrom(d)));\n        //     return /* replace *//* getName */(c => c[\"__class\"] ? c[\"__class\"] : c.name)(c).split('.').join('/');\n        // }\n    }\n\n    /**\n     * Returns the constant pool's hash table item which is equal to the given\n     * item.\n     *\n     * @param key\n     * a constant pool item.\n     * @return the constant pool's hash table item which is equal to the given\n     * item, or <tt>null</tt> if there is no such item.\n     */\n    private get(key: Item): Item {\n        let i: Item = this.items[key.__hashCode % this.items.length];\n        while ((i != null && (i.type !== key.type || !key.isEqualTo(i)))) {\n            i = i.next;\n        };\n        return i;\n    }\n\n    /**\n     * Puts the given item in the constant pool's hash table. The hash table\n     * <i>must</i> not already contains this item.\n     *\n     * @param i\n     * the item to be added to the constant pool's hash table.\n     */\n    private put(i: Item) {\n        if (this.index + this.typeCount > this.threshold) {\n            let ll: number = this.items.length;\n            let nl: number = ll * 2 + 1;\n            let newItems: Item[] = new Array(nl);\n            for (let l: number = ll - 1; l >= 0; --l) {\n                let j: Item = this.items[l];\n                while ((j != null)) {\n                    let index: number = j.__hashCode % newItems.length;\n                    let k: Item = j.next;\n                    j.next = newItems[index];\n                    newItems[index] = j;\n                    j = k;\n                };\n            }\n            this.items = newItems;\n            this.threshold = ((nl * 0.75) | 0);\n        }\n        let index: number = i.__hashCode % this.items.length;\n        i.next = this.items[index];\n        this.items[index] = i;\n    }\n\n    /**\n     * Puts one byte and two shorts into the constant pool.\n     *\n     * @param b\n     * a byte.\n     * @param s1\n     * a short.\n     * @param s2\n     * another short.\n     */\n    private put122(b: number, s1: number, s2: number) {\n        this.pool.put12(b, s1).putShort(s2);\n    }\n\n    /**\n     * Puts two bytes and one short into the constant pool.\n     *\n     * @param b1\n     * a byte.\n     * @param b2\n     * another byte.\n     * @param s\n     * a short.\n     */\n    private put112(b1: number, b2: number, s: number) {\n        this.pool.put11(b1, b2).putShort(s);\n    }\n}\n\nClassWriter.TYPE_$LI$();\n\nClassWriter.TO_ACC_SYNTHETIC_$LI$();\n\nClassWriter.__static_initialize();\n","/*\n * ASM: a very small and fast Java bytecode manipulation framework\n * Copyright (c) 2000-2011 INRIA, France Telecom\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n * 3. Neither the name of the copyright holders nor the names of its\n *    contributors may be used to endorse or promote products derived from\n *    this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\n * THE POSSIBILITY OF SUCH DAMAGE.\n */\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\n/**\n * Information about a class being parsed in a {@link ClassReader}.\n *\n * @author Eric Bruneton\n */\nimport { Label } from \"./Label\";\nimport { TypePath } from \"./TypePath\";\nimport { Attribute } from \"./Attribute\";\n\nexport class Context {\n    /**\n     * Prototypes of the attributes that must be parsed for this class.\n     */\n    attrs : Attribute[];\n\n    /**\n     * The {@link ClassReader} option flags for the parsing of this class.\n     */\n    flags : number;\n\n    /**\n     * The buffer used to read strings.\n     */\n    buffer : number[];\n\n    /**\n     * The start index of each bootstrap method.\n     */\n    bootstrapMethods : number[] = [];\n\n    /**\n     * The access flags of the method currently being parsed.\n     */\n    access : number;\n\n    /**\n     * The name of the method currently being parsed.\n     */\n    name : string = \"\";\n\n    /**\n     * The descriptor of the method currently being parsed.\n     */\n    desc : string = \"\";\n\n    /**\n     * The label objects, indexed by bytecode offset, of the method currently\n     * being parsed (only bytecode offsets for which a label is needed have a\n     * non null associated Label object).\n     */\n    labels : Label[] = [];\n\n    /**\n     * The target of the type annotation currently being parsed.\n     */\n    typeRef : number;\n\n    /**\n     * The path of the type annotation currently being parsed.\n     */\n    typePath : TypePath | null = null;\n\n    /**\n     * The offset of the latest stack map frame that has been parsed.\n     */\n    offset : number;\n\n    /**\n     * The labels corresponding to the start of the local variable ranges in the\n     * local variable type annotation currently being parsed.\n     */\n    start : Label[] = [];\n\n    /**\n     * The labels corresponding to the end of the local variable ranges in the\n     * local variable type annotation currently being parsed.\n     */\n    end : Label[] = [];\n\n    /**\n     * The local variable indices for each local variable range in the local\n     * variable type annotation currently being parsed.\n     */\n    index : number[] = [];\n\n    /**\n     * The encoding of the latest stack map frame that has been parsed.\n     */\n    mode : number;\n\n    /**\n     * The number of locals in the latest stack map frame that has been parsed.\n     */\n    localCount : number;\n\n    /**\n     * The number locals in the latest stack map frame that has been parsed,\n     * minus the number of locals in the previous frame.\n     */\n    localDiff : number;\n\n    /**\n     * The local values of the latest stack map frame that has been parsed.\n     */\n    local : any[] = [];\n\n    /**\n     * The stack size of the latest stack map frame that has been parsed.\n     */\n    stackCount : number;\n\n    /**\n     * The stack values of the latest stack map frame that has been parsed.\n     */\n    stack : any[] = [];\n\n    constructor(attrs: Attribute[], flags: number, buffer: number[]) {\n        this.access = 0;\n        this.typeRef = 0;\n        this.offset = 0;\n        this.mode = 0;\n        this.localCount = 0;\n        this.localDiff = 0;\n        this.stackCount = 0;\n        this.attrs = attrs;\n        this.flags = flags;\n        this.buffer = buffer;\n    }\n}\n\n\n\n","/*\n * ASM: a very small and fast Java bytecode manipulation framework\n * Copyright (c) 2000-2011 INRIA, France Telecom\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n * 3. Neither the name of the copyright holders nor the names of its\n *    contributors may be used to endorse or promote products derived from\n *    this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\n * THE POSSIBILITY OF SUCH DAMAGE.\n */\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\n/**\n * A reference to a field or a method.\n *\n * @author Remi Forax\n * @author Eric Bruneton\n */\nimport { Opcodes } from \"./Opcodes\"\nexport class Handle {\n    /**\n     * The kind of field or method designated by this Handle. Should be\n     * {@link Opcodes#H_GETFIELD}, {@link Opcodes#H_GETSTATIC},\n     * {@link Opcodes#H_PUTFIELD}, {@link Opcodes#H_PUTSTATIC},\n     * {@link Opcodes#H_INVOKEVIRTUAL}, {@link Opcodes#H_INVOKESTATIC},\n     * {@link Opcodes#H_INVOKESPECIAL}, {@link Opcodes#H_NEWINVOKESPECIAL} or\n     * {@link Opcodes#H_INVOKEINTERFACE}.\n     */\n    readonly tag: number;\n\n    /**\n     * The internal name of the class that owns the field or method designated\n     * by this handle.\n     */\n    readonly owner: string;\n\n    /**\n     * The name of the field or method designated by this handle.\n     */\n    readonly name: string;\n\n    /**\n     * The descriptor of the field or method designated by this handle.\n     */\n    readonly descriptor: string;\n\n    /**\n     * Indicate if the owner is an interface or not.\n     */\n    readonly isInterface: boolean;\n\n    /**\n     * Constructs a new field or method handle.\n     *\n     * @param tag\n     * the kind of field or method designated by this Handle. Must be\n     * {@link Opcodes#H_GETFIELD}, {@link Opcodes#H_GETSTATIC},\n     * {@link Opcodes#H_PUTFIELD}, {@link Opcodes#H_PUTSTATIC},\n     * {@link Opcodes#H_INVOKEVIRTUAL},\n     * {@link Opcodes#H_INVOKESTATIC},\n     * {@link Opcodes#H_INVOKESPECIAL},\n     * {@link Opcodes#H_NEWINVOKESPECIAL} or\n     * {@link Opcodes#H_INVOKEINTERFACE}.\n     * @param owner\n     * the internal name of the class that owns the field or method\n     * designated by this handle.\n     * @param name\n     * the name of the field or method designated by this handle.\n     * @param desc\n     * the descriptor of the field or method designated by this\n     * handle.\n     * @param itf\n     * true if the owner is an interface.\n     */\n    public constructor(tag: number, owner: string, name: string, desc: string, itf: boolean = tag == Opcodes.H_INVOKEINTERFACE) {\n        this.tag = tag;\n        this.owner = owner;\n        this.name = name;\n        this.descriptor = desc;\n        this.isInterface = itf;\n    }\n\n    public equals(obj: any): boolean {\n        if (obj === this) {\n            return true;\n        }\n        if (!(obj != null && obj instanceof Handle)) {\n            return false;\n        }\n        let h: Handle = obj;\n        return this.tag === h.tag && this.isInterface === h.isInterface && (this.owner === h.owner) && (this.name === h.name) && (this.descriptor === h.descriptor);\n    }\n\n    public hashCode(): number {\n        return this.tag + (this.isInterface ? 64 : 0) + (<any>this.owner.toString()) * (<any>this.name.toString()) * (<any>this.descriptor.toString());\n    }\n\n    /**\n     * Returns the textual representation of this handle. The textual\n     * representation is:\n     *\n     * <pre>\n     * for a reference to a class:\n     * owner '.' name desc ' ' '(' tag ')'\n     * for a reference to an interface:\n     * owner '.' name desc ' ' '(' tag ' ' itf ')'\n     * </pre>\n     *\n     * . As this format is unambiguous, it can be parsed if necessary.\n     */\n    public toString(): string {\n        return this.owner + \".\" + this.name + this.descriptor + \" (\" + this.tag + (this.isInterface ? \" itf\" : \"\") + \")\";\n    }\n}\n","/*\n * ASM: a very small and fast Java bytecode manipulation framework\n * Copyright (c) 2000-2011 INRIA, France Telecom\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n * 3. Neither the name of the copyright holders nor the names of its\n *    contributors may be used to endorse or promote products derived from\n *    this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\n * THE POSSIBILITY OF SUCH DAMAGE.\n */\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\n/**\n * The path to a type argument, wildcard bound, array element type, or static\n * inner type within an enclosing type.\n *\n * @author Eric Bruneton\n */\nimport { ByteVector } from \"./ByteVector\";\n\nexport class TypePath {\n    /**\n     * A type path step that steps into the element type of an array type. See\n     * {@link #getStep getStep}.\n     */\n    public static ARRAY_ELEMENT: number = 0;\n\n    /**\n     * A type path step that steps into the nested type of a class type. See\n     * {@link #getStep getStep}.\n     */\n    public static INNER_TYPE: number = 1;\n\n    /**\n     * A type path step that steps into the bound of a wildcard type. See\n     * {@link #getStep getStep}.\n     */\n    public static WILDCARD_BOUND: number = 2;\n\n    /**\n     * A type path step that steps into a type argument of a generic type. See\n     * {@link #getStep getStep}.\n     */\n    public static TYPE_ARGUMENT: number = 3;\n\n    /**\n     * The byte array where the path is stored, in Java class file format.\n     */\n    buf: Uint8Array;\n\n    /**\n     * The offset of the first byte of the type path in 'b'.\n     */\n    offset: number;\n\n    /**\n     * Creates a new type path.\n     *\n     * @param b\n     * the byte array containing the type path in Java class file\n     * format.\n     * @param offset\n     * the offset of the first byte of the type path in 'b'.\n     */\n    constructor(b: Uint8Array, offset: number) {\n        this.offset = 0;\n        this.buf = b;\n        this.offset = offset;\n    }\n\n    /**\n        * Returns the length of this path.\n        *\n        * @return the length of this path.\n        */\n    get length(): number {\n        return this.buf[this.offset];\n    }\n\n\n    /**\n     * Returns the value of the given step of this path.\n     *\n     * @param index\n     * an index between 0 and {@link #getLength()}, exclusive.\n     * @return {@link #ARRAY_ELEMENT ARRAY_ELEMENT}, {@link #INNER_TYPE\n     * INNER_TYPE}, {@link #WILDCARD_BOUND WILDCARD_BOUND}, or\n     * {@link #TYPE_ARGUMENT TYPE_ARGUMENT}.\n     */\n    public getStep(index: number): number {\n        return this.buf[this.offset + 2 * index + 1];\n    }\n\n    /**\n     * Returns the index of the type argument that the given step is stepping\n     * into. This method should only be used for steps whose value is\n     * {@link #TYPE_ARGUMENT TYPE_ARGUMENT}.\n     *\n     * @param index\n     * an index between 0 and {@link #getLength()}, exclusive.\n     * @return the index of the type argument that the given step is stepping\n     * into.\n     */\n    public getStepArgument(index: number): number {\n        return this.buf[this.offset + 2 * index + 2];\n    }\n\n    /**\n     * Converts a type path in string form, in the format used by\n     * {@link #toString()}, into a TypePath object.\n     *\n     * @param typePath\n     * a type path in string form, in the format used by\n     * {@link #toString()}. May be null or empty.\n     * @return the corresponding TypePath object, or null if the path is empty.\n     */\n    public static fromString(typePath: string): TypePath | null {\n        if (typePath == null || typePath.length === 0) {\n            return null;\n        }\n        let n: number = typePath.length;\n        let out: ByteVector = new ByteVector(n);\n        out.putByte(0);\n        for (let i: number = 0; i < n;) {\n            let c: string = typePath.charAt(i++);\n            if (c === \"[\") {\n                out.put11(TypePath.ARRAY_ELEMENT, 0);\n            } else if (c === \".\") {\n                out.put11(TypePath.INNER_TYPE, 0);\n            } else if (c === \"*\") {\n                out.put11(TypePath.WILDCARD_BOUND, 0);\n            } else if ((c).charCodeAt(0) >= (\"0\").charCodeAt(0) && (c).charCodeAt(0) <= (\"9\").charCodeAt(0)) {\n                let typeArg: number = (c).charCodeAt(0) - (\"0\").charCodeAt(0);\n                while ((i < n && ((c = typePath.charAt(i))).charCodeAt(0) >= (\"0\").charCodeAt(0) && (c).charCodeAt(0) <= (\"9\").charCodeAt(0))) {\n                    typeArg = typeArg * 10 + (c).charCodeAt(0) - (\"0\").charCodeAt(0);\n                    i += 1;\n                };\n                if (i < n && typePath.charAt(i) === \";\") {\n                    i += 1;\n                }\n                out.put11(TypePath.TYPE_ARGUMENT, typeArg);\n            }\n        }\n        out.data[0] = (((out.length / 2 | 0)) | 0);\n        return new TypePath(out.data, 0);\n    }\n\n    /**\n     * Returns a string representation of this type path. {@link #ARRAY_ELEMENT\n     * ARRAY_ELEMENT} steps are represented with '[', {@link #INNER_TYPE\n     * INNER_TYPE} steps with '.', {@link #WILDCARD_BOUND WILDCARD_BOUND} steps\n     * with '*' and {@link #TYPE_ARGUMENT TYPE_ARGUMENT} steps with their type\n     * argument index in decimal form followed by ';'.\n     */\n    public toString(): string {\n        let length: number = this.length;\n        let result: string = \"\";\n        for (let i: number = 0; i < length; ++i) {\n            switch ((this.getStep(i))) {\n                case TypePath.ARRAY_ELEMENT:\n                    result += \"[\";\n                    break;\n                case TypePath.INNER_TYPE:\n                    result += \".\";\n                    break;\n                case TypePath.WILDCARD_BOUND:\n                    result += \"*\";\n                    break;\n                case TypePath.TYPE_ARGUMENT:\n                    result += this.getStepArgument(i) + (\";\");\n                    break;\n                default:\n                    result += (\"_\");\n            }\n        }\n        return result.toString();\n    }\n}\n","/*\n * ASM: a very small and fast Java bytecode manipulation framework\n * Copyright (c) 2000-2011 INRIA, France Telecom\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n * 3. Neither the name of the copyright holders nor the names of its\n *    contributors may be used to endorse or promote products derived from\n *    this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\n * THE POSSIBILITY OF SUCH DAMAGE.\n */\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\n\n/**\n * A Java class parser to make a {@link ClassVisitor} visit an existing class.\n * This class parses a byte array conforming to the Java class file format and\n * calls the appropriate visit methods of a given class visitor for each field,\n * method and bytecode instruction encountered.\n *\n * @author Eric Bruneton\n * @author Eugene Kuleshov\n */\nimport { AnnotationVisitor } from \"./AnnotationVisitor\"\nimport { Attribute } from \"./Attribute\"\nimport { ClassVisitor } from \"./ClassVisitor\"\nimport { ClassWriter } from \"./ClassWriter\"\nimport { Context } from \"./Context\"\nimport { FieldVisitor } from \"./FieldVisitor\"\nimport { Handle } from \"./Handle\"\nimport { Label } from \"./Label\"\nimport { MethodVisitor } from \"./MethodVisitor\"\nimport { MethodWriter } from \"./MethodWriter\"\nimport { Opcodes } from \"./Opcodes\"\nimport { Type } from \"./Type\"\nimport { TypePath } from \"./TypePath\"\n\nimport Long from \"long\"\nimport { intBitsToFloat, longBitsToDouble } from \"./bits\"\nimport { assert, notnull } from \"./utils\"\n\nexport class ClassReader {\n    /**\n    * True to enable signatures support.\n    */\n    static SIGNATURES: boolean = true;\n\n    /**\n     * True to enable annotations support.\n     */\n    static ANNOTATIONS: boolean = true;\n\n    /**\n     * True to enable stack map frames support.\n     */\n    static FRAMES: boolean = true;\n\n    /**\n     * True to enable bytecode writing support.\n     */\n    static WRITER: boolean = true;\n\n    /**\n     * True to enable JSR_W and GOTO_W support.\n     */\n    static RESIZE: boolean = true;\n\n    /**\n     * Flag to skip method code. If this class is set <code>CODE</code>\n     * attribute won't be visited. This can be used, for example, to retrieve\n     * annotations for methods and method parameters.\n     */\n    public static SKIP_CODE: number = 1;\n\n    /**\n     * Flag to skip the debug information in the class. If this flag is set the\n     * debug information of the class is not visited, i.e. the\n     * {@link MethodVisitor#visitLocalVariable visitLocalVariable} and\n     * {@link MethodVisitor#visitLineNumber visitLineNumber} methods will not be\n     * called.\n     */\n    public static SKIP_DEBUG: number = 2;\n\n    /**\n     * Flag to skip the stack map frames in the class. If this flag is set the\n     * stack map frames of the class is not visited, i.e. the\n     * {@link MethodVisitor#visitFrame visitFrame} method will not be called.\n     * This flag is useful when the {@link ClassWriter#COMPUTE_FRAMES} option is\n     * used: it avoids visiting frames that will be ignored and recomputed from\n     * scratch in the class writer.\n     */\n    public static SKIP_FRAMES: number = 4;\n\n    /**\n     * Flag to expand the stack map frames. By default stack map frames are\n     * visited in their original format (i.e. \"expanded\" for classes whose\n     * version is less than V1_6, and \"compressed\" for the other classes). If\n     * this flag is set, stack map frames are always visited in expanded format\n     * (this option adds a decompression/recompression step in ClassReader and\n     * ClassWriter which degrades performances quite a lot).\n     */\n    public static EXPAND_FRAMES: number = 8;\n\n    /**\n     * Flag to expand the ASM pseudo instructions into an equivalent sequence of\n     * standard bytecode instructions. When resolving a forward jump it may\n     * happen that the signed 2 bytes offset reserved for it is not sufficient\n     * to store the bytecode offset. In this case the jump instruction is\n     * replaced with a temporary ASM pseudo instruction using an unsigned 2\n     * bytes offset (see Label#resolve). This internal flag is used to re-read\n     * classes containing such instructions, in order to replace them with\n     * standard instructions. In addition, when this flag is used, GOTO_W and\n     * JSR_W are <i>not</i> converted into GOTO and JSR, to make sure that\n     * infinite loops where a GOTO_W is replaced with a GOTO in ClassReader and\n     * converted back to a GOTO_W in ClassWriter cannot occur.\n     */\n    static EXPAND_ASM_INSNS: number = 256;\n\n    /**\n     * The class to be parsed. <i>The content of this array must not be\n     * modified. This field is intended for {@link Attribute} sub classes, and\n     * is normally not needed by class generators or adapters.</i>\n     */\n    public buf: Uint8Array;\n\n    /**\n     * The start index of each constant pool item in {@link #b b}, plus one. The\n     * one byte offset skips the constant pool item tag that indicates its type.\n     */\n    private items: number[];\n\n    /**\n     * The String objects corresponding to the CONSTANT_Utf8 items. This cache\n     * avoids multiple parsing of a given CONSTANT_Utf8 constant pool item,\n     * which GREATLY improves performances (by a factor 2 to 3). This caching\n     * strategy could be extended to all constant pool items, but its benefit\n     * would not be so great for these items (because they are much less\n     * expensive to parse than CONSTANT_Utf8 items).\n     */\n    private strings: string[];\n\n    /**\n     * Maximum length of the strings contained in the constant pool of the\n     * class.\n     */\n    private maxStringLength: number;\n\n    /**\n     * Start index of the class header information (access, name...) in\n     * {@link #b b}.\n     */\n    public header: number;\n\n    /**\n     * Constructs a new {@link ClassReader} object.\n     *\n     * @param b   the bytecode of the class to be read.\n     * @param off the start offset of the class data.\n     * @param len the length of the class data.\n     */\n    public constructor(buffer: Uint8Array, off: number = 0, len: number = buffer.length) {\n        this.maxStringLength = 0;\n        this.header = 0;\n        this.buf = buffer;\n        if (this.readShort(off + 6) > Opcodes.V1_8) { throw new Error(); }\n        this.items = new Array(this.readUnsignedShort(off + 8));\n        let n: number = this.items.length;\n        this.strings = new Array(n);\n        let max: number = 0;\n        let index: number = off + 10;\n        for (let i: number = 1; i < n; ++i) {\n            this.items[i] = index + 1;\n            let size: number;\n            switch ((buffer[index])) {\n                case ClassWriter.FIELD:\n                case ClassWriter.METH:\n                case ClassWriter.IMETH:\n                case ClassWriter.INT:\n                case ClassWriter.FLOAT:\n                case ClassWriter.NAME_TYPE:\n                case ClassWriter.INDY:\n                    size = 5;\n                    break;\n                case ClassWriter.LONG:\n                case ClassWriter.DOUBLE:\n                    size = 9;\n                    ++i;\n                    break;\n                case ClassWriter.UTF8:\n                    size = 3 + this.readUnsignedShort(index + 1);\n                    if (size > max) {\n                        max = size;\n                    }\n                    break;\n                case ClassWriter.HANDLE:\n                    size = 4;\n                    break;\n                default:\n                    size = 3;\n                    break;\n            }\n            index += size;\n        }\n        this.maxStringLength = max;\n        this.header = index;\n    }\n\n    /**\n     * Returns the class's access flags (see {@link Opcodes}). This value may\n     * not reflect Deprecated and Synthetic flags when bytecode is before 1.5\n     * and those flags are represented by attributes.\n     *\n     * @return the class access flags\n     * @see ClassVisitor#visit(int, int, String, String, String, String[])\n     */\n    public getAccess(): number {\n        return this.readUnsignedShort(this.header);\n    }\n\n    /**\n     * Returns the internal name of the class (see\n     * {@link Type#getInternalName() getInternalName}).\n     *\n     * @return the internal class name\n     * @see ClassVisitor#visit(int, int, String, String, String, String[])\n     */\n    public getClassName(): string {\n        return this.readClass(this.header + 2, new Array(this.maxStringLength));\n    }\n\n    /**\n     * Returns the internal of name of the super class (see\n     * {@link Type#getInternalName() getInternalName}). For interfaces, the\n     * super class is {@link Object}.\n     *\n     * @return the internal name of super class, or <tt>null</tt> for\n     * {@link Object} class.\n     * @see ClassVisitor#visit(int, int, String, String, String, String[])\n     */\n    public getSuperName(): string {\n        return this.readClass(this.header + 4, new Array(this.maxStringLength));\n    }\n\n    /**\n     * Returns the internal names of the class's interfaces (see\n     * {@link Type#getInternalName() getInternalName}).\n     *\n     * @return the array of internal names for all implemented interfaces or\n     * <tt>null</tt>.\n     * @see ClassVisitor#visit(int, int, String, String, String, String[])\n     */\n    public getInterfaces(): string[] {\n        let index: number = this.header + 6;\n        let n: number = this.readUnsignedShort(index);\n        let interfaces: string[] = new Array(n);\n        if (n > 0) {\n            let buf: number[] = new Array(this.maxStringLength);\n            for (let i: number = 0; i < n; ++i) {\n                index += 2;\n                interfaces[i] = this.readClass(index, buf);\n            }\n        }\n        return interfaces;\n    }\n\n    /**\n     * Makes the given visitor visit the Java class of this {@link ClassReader}.\n     * This class is the one specified in the constructor (see\n     * {@link #ClassReader(byte[]) ClassReader}).\n     *\n     * @param classVisitor the visitor that must visit this class.\n     * @param attrs        prototypes of the attributes that must be parsed during the\n     * visit of the class. Any attribute whose type is not equal to\n     * the type of one the prototypes will not be parsed: its byte\n     * array value will be passed unchanged to the ClassWriter.\n     * <i>This may corrupt it if this value contains references to\n     * the constant pool, or has syntactic or semantic links with a\n     * class element that has been transformed by a class adapter\n     * between the reader and the writer</i>.\n     * @param flags        option flags that can be used to modify the default behavior\n     * of this class. See {@link #SKIP_DEBUG}, {@link #EXPAND_FRAMES}\n     * , {@link #SKIP_FRAMES}, {@link #SKIP_CODE}.\n     */\n    public accept(classVisitor: ClassVisitor, attrs: Attribute[] = [], flags: number = 0): void {\n        let u: number = this.header;\n        let c: number[] = new Array(this.maxStringLength);\n        let context: Context = new Context(attrs, flags, c);\n        let access: number = this.readUnsignedShort(u);\n        let name: string = this.readClass(u + 2, c);\n        let superClass: string = this.readClass(u + 4, c);\n        let interfaces: string[] = new Array(this.readUnsignedShort(u + 6));\n        u += 8;\n        for (let i: number = 0; i < interfaces.length; ++i) {\n            interfaces[i] = this.readClass(u, c);\n            u += 2;\n        }\n        let signature: string | null = null;\n        let sourceFile: string | null = null;\n        let sourceDebug: string | null = null;\n        let enclosingOwner: string | null = null;\n        let enclosingName: string | null = null;\n        let enclosingDesc: string | null = null;\n        let anns: number = 0;\n        let ianns: number = 0;\n        let tanns: number = 0;\n        let itanns: number = 0;\n        let innerClasses: number = 0;\n        let attributes: Attribute | null = null;\n        u = this.getAttributes();\n        for (let i: number = this.readUnsignedShort(u); i > 0; --i) {\n            let attrName: string | null = this.readUTF8(u + 2, c);\n            if ((\"SourceFile\" === attrName)) {\n                sourceFile = this.readUTF8(u + 8, c);\n            } else if ((\"InnerClasses\" === attrName)) {\n                innerClasses = u + 8;\n            } else if ((\"EnclosingMethod\" === attrName)) {\n                enclosingOwner = this.readClass(u + 8, c);\n                let item: number = this.readUnsignedShort(u + 10);\n                if (item !== 0) {\n                    enclosingName = this.readUTF8(this.items[item], c);\n                    enclosingDesc = this.readUTF8(this.items[item] + 2, c);\n                }\n            } else if (ClassReader.SIGNATURES && (\"Signature\" === attrName)) {\n                signature = this.readUTF8(u + 8, c);\n            } else if (ClassReader.ANNOTATIONS && (\"RuntimeVisibleAnnotations\" === attrName)) {\n                anns = u + 8;\n            } else if (ClassReader.ANNOTATIONS && (\"RuntimeVisibleTypeAnnotations\" === attrName)) {\n                tanns = u + 8;\n            } else if ((\"Deprecated\" === attrName)) {\n                access |= Opcodes.ACC_DEPRECATED;\n            } else if ((\"Synthetic\" === attrName)) {\n                access |= Opcodes.ACC_SYNTHETIC | ClassWriter.ACC_SYNTHETIC_ATTRIBUTE;\n            } else if ((\"SourceDebugExtension\" === attrName)) {\n                let len: number = this.readInt(u + 4);\n                sourceDebug = this.readUTF(u + 8, len, new Array(len));\n            } else if (ClassReader.ANNOTATIONS && (\"RuntimeInvisibleAnnotations\" === attrName)) {\n                ianns = u + 8;\n            } else if (ClassReader.ANNOTATIONS && (\"RuntimeInvisibleTypeAnnotations\" === attrName)) {\n                itanns = u + 8;\n            } else if ((\"BootstrapMethods\" === attrName)) {\n                let bootstrapMethods: number[] = new Array(this.readUnsignedShort(u + 8));\n                for (let j: number = 0, v: number = u + 10; j < bootstrapMethods.length; j++) {\n                    bootstrapMethods[j] = v;\n                    v += 2 + this.readUnsignedShort(v + 2) << 1;\n                }\n                context.bootstrapMethods = bootstrapMethods;\n            } else {\n                let attr: Attribute = this.readAttribute(attrs, attrName, u + 8, this.readInt(u + 4), c, -1, null);\n                if (attr != null) {\n                    attr.next = attributes;\n                    attributes = attr;\n                }\n            }\n            u += 6 + this.readInt(u + 4);\n        }\n        classVisitor.visit(this.readInt(this.items[1] - 7), access, name, signature, superClass, interfaces);\n        if ((flags & ClassReader.SKIP_DEBUG) === 0 && (sourceFile != null || sourceDebug != null)) {\n            classVisitor.visitSource(sourceFile, sourceDebug);\n        }\n        if (enclosingOwner != null) {\n            classVisitor.visitOuterClass(enclosingOwner, enclosingName, enclosingDesc);\n        }\n        if (ClassReader.ANNOTATIONS && anns !== 0) {\n            for (let i: number = this.readUnsignedShort(anns), v: number = anns + 2; i > 0; --i) {\n                v = this.readAnnotationValues(v + 2, c, true, classVisitor.visitAnnotation(this.readUTF8(v, c), true));\n            }\n        }\n        if (ClassReader.ANNOTATIONS && ianns !== 0) {\n            for (let i: number = this.readUnsignedShort(ianns), v: number = ianns + 2; i > 0; --i) {\n                v = this.readAnnotationValues(v + 2, c, true, classVisitor.visitAnnotation(this.readUTF8(v, c), false));\n            }\n        }\n        if (ClassReader.ANNOTATIONS && tanns !== 0) {\n            for (let i: number = this.readUnsignedShort(tanns), v: number = tanns + 2; i > 0; --i) {\n                v = this.readAnnotationTarget(context, v);\n                v = this.readAnnotationValues(v + 2, c, true, classVisitor.visitTypeAnnotation(context.typeRef, context.typePath, this.readUTF8(v, c), true));\n            }\n        }\n        if (ClassReader.ANNOTATIONS && itanns !== 0) {\n            for (let i: number = this.readUnsignedShort(itanns), v: number = itanns + 2; i > 0; --i) {\n                v = this.readAnnotationTarget(context, v);\n                v = this.readAnnotationValues(v + 2, c, true, classVisitor.visitTypeAnnotation(context.typeRef, context.typePath, this.readUTF8(v, c), false));\n            }\n        }\n        while ((attributes != null)) {\n            let attr: Attribute | null = attributes.next;\n            attributes.next = null;\n            classVisitor.visitAttribute(attributes);\n            attributes = attr;\n        };\n        if (innerClasses !== 0) {\n            let v: number = innerClasses + 2;\n            for (let i: number = this.readUnsignedShort(innerClasses); i > 0; --i) {\n                classVisitor.visitInnerClass(this.readClass(v, c), this.readClass(v + 2, c), this.readUTF8(v + 4, c), this.readUnsignedShort(v + 6));\n                v += 8;\n            }\n        }\n        u = this.header + 10 + 2 * interfaces.length;\n        for (let i: number = this.readUnsignedShort(u - 2); i > 0; --i) {\n            u = this.readField(classVisitor, context, u);\n        }\n        u += 2;\n        for (let i: number = this.readUnsignedShort(u - 2); i > 0; --i) {\n            u = this.readMethod(classVisitor, context, u);\n        }\n        classVisitor.visitEnd();\n    }\n\n    /**\n     * Reads a field and makes the given visitor visit it.\n     *\n     * @param classVisitor the visitor that must visit the field.\n     * @param context      information about the class being parsed.\n     * @param u            the start offset of the field in the class file.\n     * @return the offset of the first byte following the field in the class.\n     */\n    private readField(classVisitor: ClassVisitor, context: Context, u: number): number {\n        let c: number[] = context.buffer;\n        let access: number = this.readUnsignedShort(u);\n        let name: string | null = this.readUTF8(u + 2, c);\n        let desc: string | null = this.readUTF8(u + 4, c);\n        u += 6;\n        let signature: string | null = null;\n        let anns: number = 0;\n        let ianns: number = 0;\n        let tanns: number = 0;\n        let itanns: number = 0;\n        let value: any = null;\n        let attributes: Attribute | null = null;\n        for (let i: number = this.readUnsignedShort(u); i > 0; --i) {\n            let attrName: string | null = this.readUTF8(u + 2, c);\n            if ((\"ConstantValue\" === attrName)) {\n                let item: number = this.readUnsignedShort(u + 8);\n                value = item === 0 ? null : this.readConst(item, c);\n            } else if (ClassReader.SIGNATURES && (\"Signature\" === attrName)) {\n                signature = this.readUTF8(u + 8, c);\n            } else if ((\"Deprecated\" === attrName)) {\n                access |= Opcodes.ACC_DEPRECATED;\n            } else if ((\"Synthetic\" === attrName)) {\n                access |= Opcodes.ACC_SYNTHETIC | ClassWriter.ACC_SYNTHETIC_ATTRIBUTE;\n            } else if (ClassReader.ANNOTATIONS && (\"RuntimeVisibleAnnotations\" === attrName)) {\n                anns = u + 8;\n            } else if (ClassReader.ANNOTATIONS && (\"RuntimeVisibleTypeAnnotations\" === attrName)) {\n                tanns = u + 8;\n            } else if (ClassReader.ANNOTATIONS && (\"RuntimeInvisibleAnnotations\" === attrName)) {\n                ianns = u + 8;\n            } else if (ClassReader.ANNOTATIONS && (\"RuntimeInvisibleTypeAnnotations\" === attrName)) {\n                itanns = u + 8;\n            } else {\n                let attr: Attribute = this.readAttribute(context.attrs, attrName, u + 8, this.readInt(u + 4), c, -1, null);\n                if (attr != null) {\n                    attr.next = attributes;\n                    attributes = attr;\n                }\n            }\n            u += 6 + this.readInt(u + 4);\n        }\n        u += 2;\n        assert(name);\n        let fv: FieldVisitor | null = classVisitor.visitField(access, name, desc, signature, value);\n        if (fv == null) {\n            return u;\n        }\n        if (ClassReader.ANNOTATIONS && anns !== 0) {\n            for (let i: number = this.readUnsignedShort(anns), v: number = anns + 2; i > 0; --i) {\n                v = this.readAnnotationValues(v + 2, c, true, fv.visitAnnotation(this.readUTF8(v, c), true));\n            }\n        }\n        if (ClassReader.ANNOTATIONS && ianns !== 0) {\n            for (let i: number = this.readUnsignedShort(ianns), v: number = ianns + 2; i > 0; --i) {\n                v = this.readAnnotationValues(v + 2, c, true, fv.visitAnnotation(this.readUTF8(v, c), false));\n            }\n        }\n        if (ClassReader.ANNOTATIONS && tanns !== 0) {\n            for (let i: number = this.readUnsignedShort(tanns), v: number = tanns + 2; i > 0; --i) {\n                v = this.readAnnotationTarget(context, v);\n                v = this.readAnnotationValues(v + 2, c, true, fv.visitTypeAnnotation(context.typeRef, context.typePath, this.readUTF8(v, c), true));\n            }\n        }\n        if (ClassReader.ANNOTATIONS && itanns !== 0) {\n            for (let i: number = this.readUnsignedShort(itanns), v: number = itanns + 2; i > 0; --i) {\n                v = this.readAnnotationTarget(context, v);\n                v = this.readAnnotationValues(v + 2, c, true, fv.visitTypeAnnotation(context.typeRef, context.typePath, this.readUTF8(v, c), false));\n            }\n        }\n        while ((attributes != null)) {\n            let attr: Attribute | null = attributes.next;\n            attributes.next = null;\n            fv.visitAttribute(attributes);\n            attributes = attr;\n        };\n        fv.visitEnd();\n        return u;\n    }\n\n    /**\n     * Reads a method and makes the given visitor visit it.\n     *\n     * @param classVisitor the visitor that must visit the method.\n     * @param context      information about the class being parsed.\n     * @param u            the start offset of the method in the class file.\n     * @return the offset of the first byte following the method in the class.\n     */\n    private readMethod(classVisitor: ClassVisitor, context: Context, u: number): number {\n        let c: number[] = context.buffer;\n        context.access = this.readUnsignedShort(u);\n        context.name = this.readUTF8(u + 2, c);\n        context.desc = this.readUTF8(u + 4, c);\n        u += 6;\n        let code: number = 0;\n        let exception: number = 0;\n        let exceptions: string[] | null = null;\n        let signature: string | null = null;\n        let methodParameters: number = 0;\n        let anns: number = 0;\n        let ianns: number = 0;\n        let tanns: number = 0;\n        let itanns: number = 0;\n        let dann: number = 0;\n        let mpanns: number = 0;\n        let impanns: number = 0;\n        let firstAttribute: number = u;\n        let attributes: Attribute | null = null;\n        for (let i: number = this.readUnsignedShort(u); i > 0; --i) {\n            let attrName: string | null = this.readUTF8(u + 2, c);\n            if ((\"Code\" === attrName)) {\n                if ((context.flags & ClassReader.SKIP_CODE) === 0) {\n                    code = u + 8;\n                }\n            } else if ((\"Exceptions\" === attrName)) {\n                exceptions = new Array(this.readUnsignedShort(u + 8));\n                exception = u + 10;\n                for (let j: number = 0; j < exceptions.length; ++j) {\n                    exceptions[j] = this.readClass(exception, c);\n                    exception += 2;\n                }\n            } else if (ClassReader.SIGNATURES && (\"Signature\" === attrName)) {\n                signature = this.readUTF8(u + 8, c);\n            } else if ((\"Deprecated\" === attrName)) {\n                context.access |= Opcodes.ACC_DEPRECATED;\n            } else if (ClassReader.ANNOTATIONS && (\"RuntimeVisibleAnnotations\" === attrName)) {\n                anns = u + 8;\n            } else if (ClassReader.ANNOTATIONS && (\"RuntimeVisibleTypeAnnotations\" === attrName)) {\n                tanns = u + 8;\n            } else if (ClassReader.ANNOTATIONS && (\"AnnotationDefault\" === attrName)) {\n                dann = u + 8;\n            } else if ((\"Synthetic\" === attrName)) {\n                context.access |= Opcodes.ACC_SYNTHETIC | ClassWriter.ACC_SYNTHETIC_ATTRIBUTE;\n            } else if (ClassReader.ANNOTATIONS && (\"RuntimeInvisibleAnnotations\" === attrName)) {\n                ianns = u + 8;\n            } else if (ClassReader.ANNOTATIONS && (\"RuntimeInvisibleTypeAnnotations\" === attrName)) {\n                itanns = u + 8;\n            } else if (ClassReader.ANNOTATIONS && (\"RuntimeVisibleParameterAnnotations\" === attrName)) {\n                mpanns = u + 8;\n            } else if (ClassReader.ANNOTATIONS && (\"RuntimeInvisibleParameterAnnotations\" === attrName)) {\n                impanns = u + 8;\n            } else if ((\"MethodParameters\" === attrName)) {\n                methodParameters = u + 8;\n            } else {\n                let attr: Attribute = this.readAttribute(context.attrs, attrName, u + 8, this.readInt(u + 4), c, -1, null);\n                if (attr != null) {\n                    attr.next = attributes;\n                    attributes = attr;\n                }\n            }\n            u += 6 + this.readInt(u + 4);\n        }\n        u += 2;\n        let mv: MethodVisitor | null = classVisitor.visitMethod(context.access, context.name, context.desc, signature, exceptions);\n        if (mv == null) {\n            return u;\n        }\n        if (ClassReader.WRITER && (mv != null && mv instanceof MethodWriter)) {\n            let mw: MethodWriter = mv;\n            if (mw.cw.cr === this && signature === mw.signature) {\n                let sameExceptions: boolean = false;\n                if (exceptions == null) {\n                    sameExceptions = mw.exceptionCount === 0;\n                } else if (exceptions.length === mw.exceptionCount) {\n                    sameExceptions = true;\n                    for (let j: number = exceptions.length - 1; j >= 0; --j) {\n                        exception -= 2;\n                        if (mw.exceptions?.[j] !== this.readUnsignedShort(exception)) {\n                            sameExceptions = false;\n                            break;\n                        }\n                    }\n                }\n                if (sameExceptions) {\n                    mw.classReaderOffset = firstAttribute;\n                    mw.classReaderLength = u - firstAttribute;\n                    return u;\n                }\n            }\n        }\n        if (methodParameters !== 0) {\n            for (let i: number = this.buf[methodParameters] & 255, v: number = methodParameters + 1; i > 0; --i, v = v + 4) {\n                mv.visitParameter(this.readUTF8(v, c), this.readUnsignedShort(v + 2));\n            }\n        }\n        if (ClassReader.ANNOTATIONS && dann !== 0) {\n            let dv: AnnotationVisitor | null = mv.visitAnnotationDefault();\n            this.readAnnotationValue(dann, c, null, dv);\n            if (dv != null) {\n                dv.visitEnd();\n            }\n        }\n        if (ClassReader.ANNOTATIONS && anns !== 0) {\n            for (let i: number = this.readUnsignedShort(anns), v: number = anns + 2; i > 0; --i) {\n                v = this.readAnnotationValues(v + 2, c, true, mv.visitAnnotation(this.readUTF8(v, c), true));\n            }\n        }\n        if (ClassReader.ANNOTATIONS && ianns !== 0) {\n            for (let i: number = this.readUnsignedShort(ianns), v: number = ianns + 2; i > 0; --i) {\n                v = this.readAnnotationValues(v + 2, c, true, mv.visitAnnotation(this.readUTF8(v, c), false));\n            }\n        }\n        if (ClassReader.ANNOTATIONS && tanns !== 0) {\n            for (let i: number = this.readUnsignedShort(tanns), v: number = tanns + 2; i > 0; --i) {\n                v = this.readAnnotationTarget(context, v);\n                v = this.readAnnotationValues(v + 2, c, true, mv.visitTypeAnnotation(context.typeRef, context.typePath, this.readUTF8(v, c), true));\n            }\n        }\n        if (ClassReader.ANNOTATIONS && itanns !== 0) {\n            for (let i: number = this.readUnsignedShort(itanns), v: number = itanns + 2; i > 0; --i) {\n                v = this.readAnnotationTarget(context, v);\n                v = this.readAnnotationValues(v + 2, c, true, mv.visitTypeAnnotation(context.typeRef, context.typePath, this.readUTF8(v, c), false));\n            }\n        }\n        if (ClassReader.ANNOTATIONS && mpanns !== 0) {\n            this.readParameterAnnotations(mv, context, mpanns, true);\n        }\n        if (ClassReader.ANNOTATIONS && impanns !== 0) {\n            this.readParameterAnnotations(mv, context, impanns, false);\n        }\n        while ((attributes != null)) {\n            let attr: Attribute | null = attributes.next;\n            attributes.next = null;\n            mv.visitAttribute(attributes);\n            attributes = attr;\n        };\n        if (code !== 0) {\n            mv.visitCode();\n            this.readCode(mv, context, code);\n        }\n        mv.visitEnd();\n        return u;\n    }\n\n    /**\n     * Reads the bytecode of a method and makes the given visitor visit it.\n     *\n     * @param mv      the visitor that must visit the method's code.\n     * @param context information about the class being parsed.\n     * @param u       the start offset of the code attribute in the class file.\n     */\n    private readCode(mv: MethodVisitor, context: Context, u: number) {\n        let b: Uint8Array = this.buf;\n        let c: number[] = context.buffer;\n        let maxStack: number = this.readUnsignedShort(u);\n        let maxLocals: number = this.readUnsignedShort(u + 2);\n        let codeLength: number = this.readInt(u + 4);\n        u += 8;\n        let codeStart: number = u;\n        let codeEnd: number = u + codeLength;\n        let labels: Label[] = context.labels = new Array(codeLength + 2);\n        this.readLabel(codeLength + 1, labels);\n        while ((u < codeEnd)) {\n            let offset: number = u - codeStart;\n            let opcode: number = b[u] & 255;\n            switch ((ClassWriter.TYPE[opcode])) {\n                case ClassWriter.NOARG_INSN:\n                case ClassWriter.IMPLVAR_INSN:\n                    u += 1;\n                    break;\n                case ClassWriter.LABEL_INSN:\n                    this.readLabel(offset + this.readShort(u + 1), labels);\n                    u += 3;\n                    break;\n                case ClassWriter.ASM_LABEL_INSN:\n                    this.readLabel(offset + this.readUnsignedShort(u + 1), labels);\n                    u += 3;\n                    break;\n                case ClassWriter.LABELW_INSN:\n                    this.readLabel(offset + this.readInt(u + 1), labels);\n                    u += 5;\n                    break;\n                case ClassWriter.WIDE_INSN:\n                    opcode = b[u + 1] & 255;\n                    if (opcode === Opcodes.IINC) {\n                        u += 6;\n                    } else {\n                        u += 4;\n                    }\n                    break;\n                case ClassWriter.TABL_INSN:\n                    u = u + 4 - (offset & 3);\n                    this.readLabel(offset + this.readInt(u), labels);\n                    for (let i: number = this.readInt(u + 8) - this.readInt(u + 4) + 1; i > 0; --i) {\n                        this.readLabel(offset + this.readInt(u + 12), labels);\n                        u += 4;\n                    }\n                    u += 12;\n                    break;\n                case ClassWriter.LOOK_INSN:\n                    u = u + 4 - (offset & 3);\n                    this.readLabel(offset + this.readInt(u), labels);\n                    for (let i: number = this.readInt(u + 4); i > 0; --i) {\n                        this.readLabel(offset + this.readInt(u + 12), labels);\n                        u += 8;\n                    }\n                    u += 8;\n                    break;\n                case ClassWriter.VAR_INSN:\n                case ClassWriter.SBYTE_INSN:\n                case ClassWriter.LDC_INSN:\n                    u += 2;\n                    break;\n                case ClassWriter.SHORT_INSN:\n                case ClassWriter.LDCW_INSN:\n                case ClassWriter.FIELDORMETH_INSN:\n                case ClassWriter.TYPE_INSN:\n                case ClassWriter.IINC_INSN:\n                    u += 3;\n                    break;\n                case ClassWriter.ITFMETH_INSN:\n                case ClassWriter.INDYMETH_INSN:\n                    u += 5;\n                    break;\n                default:\n                    u += 4;\n                    break;\n            }\n        };\n        for (let i: number = this.readUnsignedShort(u); i > 0; --i) {\n            let start: Label = this.readLabel(this.readUnsignedShort(u + 2), labels);\n            let end: Label = this.readLabel(this.readUnsignedShort(u + 4), labels);\n            let handler: Label = this.readLabel(this.readUnsignedShort(u + 6), labels);\n            let type: string | null = this.readUTF8(this.items[this.readUnsignedShort(u + 8)], c);\n            mv.visitTryCatchBlock(start, end, handler, type);\n            u += 8;\n        }\n        u += 2;\n        let tanns: number[] | null = null;\n        let itanns: number[] | null = null;\n        let tann: number = 0;\n        let itann: number = 0;\n        let ntoff: number = -1;\n        let nitoff: number = -1;\n        let varTable: number = 0;\n        let varTypeTable: number = 0;\n        let zip: boolean = true;\n        let unzip: boolean = (context.flags & ClassReader.EXPAND_FRAMES) !== 0;\n        let stackMap: number = 0;\n        let stackMapSize: number = 0;\n        let frameCount: number = 0;\n        let frame: Context | null = null;\n        let attributes: Attribute | null = null;\n        for (let i: number = this.readUnsignedShort(u); i > 0; --i) {\n            let attrName: string | null = this.readUTF8(u + 2, c);\n            if ((\"LocalVariableTable\" === attrName)) {\n                if ((context.flags & ClassReader.SKIP_DEBUG) === 0) {\n                    varTable = u + 8;\n                    for (let j: number = this.readUnsignedShort(u + 8), v: number = u; j > 0; --j) {\n                        let label: number = this.readUnsignedShort(v + 10);\n                        if (labels[label] == null) {\n                            this.readLabel(label, labels).status |= Label.DEBUG;\n                        }\n                        label += this.readUnsignedShort(v + 12);\n                        if (labels[label] == null) {\n                            this.readLabel(label, labels).status |= Label.DEBUG;\n                        }\n                        v += 10;\n                    }\n                }\n            } else if ((\"LocalVariableTypeTable\" === attrName)) {\n                varTypeTable = u + 8;\n            } else if ((\"LineNumberTable\" === attrName)) {\n                if ((context.flags & ClassReader.SKIP_DEBUG) === 0) {\n                    for (let j: number = this.readUnsignedShort(u + 8), v: number = u; j > 0; --j) {\n                        let label: number = this.readUnsignedShort(v + 10);\n                        if (labels[label] == null) {\n                            this.readLabel(label, labels).status |= Label.DEBUG;\n                        }\n                        let l: Label = labels[label];\n                        while ((l.line > 0)) {\n                            if (l.next == null) {\n                                l.next = new Label();\n                            }\n                            l = l.next;\n                        };\n                        l.line = this.readUnsignedShort(v + 12);\n                        v += 4;\n                    }\n                }\n            } else if (ClassReader.ANNOTATIONS && (\"RuntimeVisibleTypeAnnotations\" === attrName)) {\n                tanns = this.readTypeAnnotations(mv, context, u + 8, true);\n                ntoff = tanns.length === 0 || this.readByte(tanns[0]) < 67 ? -1 : this.readUnsignedShort(tanns[0] + 1);\n            } else if (ClassReader.ANNOTATIONS && (\"RuntimeInvisibleTypeAnnotations\" === attrName)) {\n                itanns = this.readTypeAnnotations(mv, context, u + 8, false);\n                nitoff = itanns.length === 0 || this.readByte(itanns[0]) < 67 ? -1 : this.readUnsignedShort(itanns[0] + 1);\n            } else if (ClassReader.FRAMES && (\"StackMapTable\" === attrName)) {\n                if ((context.flags & ClassReader.SKIP_FRAMES) === 0) {\n                    stackMap = u + 10;\n                    stackMapSize = this.readInt(u + 4);\n                    frameCount = this.readUnsignedShort(u + 8);\n                }\n            } else if (ClassReader.FRAMES && (\"StackMap\" === attrName)) {\n                if ((context.flags & ClassReader.SKIP_FRAMES) === 0) {\n                    zip = false;\n                    stackMap = u + 10;\n                    stackMapSize = this.readInt(u + 4);\n                    frameCount = this.readUnsignedShort(u + 8);\n                }\n            } else {\n                for (let j: number = 0; j < context.attrs.length; ++j) {\n                    if ((context.attrs[j].type === attrName)) {\n                        let attr: Attribute = context.attrs[j].read(this, u + 8, this.readInt(u + 4), c, codeStart - 8, labels);\n                        if (attr != null) {\n                            attr.next = attributes;\n                            attributes = attr;\n                        }\n                    }\n                }\n            }\n            u += 6 + this.readInt(u + 4);\n        }\n        u += 2;\n        if (ClassReader.FRAMES && stackMap !== 0) {\n            frame = context;\n            frame.offset = -1;\n            frame.mode = 0;\n            frame.localCount = 0;\n            frame.localDiff = 0;\n            frame.stackCount = 0;\n            frame.local = new Array(maxLocals);\n            frame.stack = new Array(maxStack);\n            if (unzip) {\n                this.getImplicitFrame(context);\n            }\n            for (let i: number = stackMap; i < stackMap + stackMapSize - 2; ++i) {\n                if (b[i] === 8) {\n                    let v: number = this.readUnsignedShort(i + 1);\n                    if (v >= 0 && v < codeLength) {\n                        if ((b[codeStart + v] & 255) === Opcodes.NEW) {\n                            this.readLabel(v, labels);\n                        }\n                    }\n                }\n            }\n        }\n        if ((context.flags & ClassReader.EXPAND_ASM_INSNS) !== 0) {\n            mv.visitFrame(Opcodes.F_NEW, maxLocals, null, 0, null);\n        }\n        let opcodeDelta: number = (context.flags & ClassReader.EXPAND_ASM_INSNS) === 0 ? -33 : 0;\n        u = codeStart;\n        while ((u < codeEnd)) {\n            let offset: number = u - codeStart;\n            let l: Label = labels[offset];\n            if (l != null) {\n                let next: Label | null = l.next;\n                l.next = null;\n                mv.visitLabel(l);\n                if ((context.flags & ClassReader.SKIP_DEBUG) === 0 && l.line > 0) {\n                    mv.visitLineNumber(l.line, l);\n                    while ((next != null)) {\n                        mv.visitLineNumber(next.line, l);\n                        next = next.next;\n                    };\n                }\n            }\n            while ((ClassReader.FRAMES && frame != null && (frame.offset === offset || frame.offset === -1))) {\n                if (frame.offset !== -1) {\n                    if (!zip || unzip) {\n                        mv.visitFrame(Opcodes.F_NEW, frame.localCount, frame.local, frame.stackCount, frame.stack);\n                    } else {\n                        mv.visitFrame(frame.mode, frame.localDiff, frame.local, frame.stackCount, frame.stack);\n                    }\n                }\n                if (frameCount > 0) {\n                    stackMap = this.readFrame(stackMap, zip, unzip, frame);\n                    --frameCount;\n                } else {\n                    frame = null;\n                }\n            };\n            let opcode: number = b[u] & 255;\n            switch ((ClassWriter.TYPE[opcode])) {\n                case ClassWriter.NOARG_INSN:\n                    mv.visitInsn(opcode);\n                    u += 1;\n                    break;\n                case ClassWriter.IMPLVAR_INSN:\n                    if (opcode > Opcodes.ISTORE) {\n                        opcode -= 59;\n                        mv.visitVarInsn(Opcodes.ISTORE + (opcode >> 2), opcode & 3);\n                    } else {\n                        opcode -= 26;\n                        mv.visitVarInsn(Opcodes.ILOAD + (opcode >> 2), opcode & 3);\n                    }\n                    u += 1;\n                    break;\n                case ClassWriter.LABEL_INSN:\n                    mv.visitJumpInsn(opcode, labels[offset + this.readShort(u + 1)]);\n                    u += 3;\n                    break;\n                case ClassWriter.LABELW_INSN:\n                    mv.visitJumpInsn(opcode + opcodeDelta, labels[offset + this.readInt(u + 1)]);\n                    u += 5;\n                    break;\n                case ClassWriter.ASM_LABEL_INSN:\n                    {\n                        opcode = opcode < 218 ? opcode - 49 : opcode - 20;\n                        let target: Label = labels[offset + this.readUnsignedShort(u + 1)];\n                        if (opcode === Opcodes.GOTO || opcode === Opcodes.JSR) {\n                            mv.visitJumpInsn(opcode + 33, target);\n                        } else {\n                            opcode = opcode <= 166 ? ((opcode + 1) ^ 1) - 1 : opcode ^ 1;\n                            let endif: Label = new Label();\n                            mv.visitJumpInsn(opcode, endif);\n                            mv.visitJumpInsn(200, target);\n                            mv.visitLabel(endif);\n                            if (ClassReader.FRAMES && stackMap !== 0 && (frame == null || frame.offset !== offset + 3)) {\n                                mv.visitFrame(ClassWriter.F_INSERT, 0, null, 0, null);\n                            }\n                        }\n                        u += 3;\n                        break;\n                    };\n                case ClassWriter.WIDE_INSN:\n                    opcode = b[u + 1] & 255;\n                    if (opcode === Opcodes.IINC) {\n                        mv.visitIincInsn(this.readUnsignedShort(u + 2), this.readShort(u + 4));\n                        u += 6;\n                    } else {\n                        mv.visitVarInsn(opcode, this.readUnsignedShort(u + 2));\n                        u += 4;\n                    }\n                    break;\n                case ClassWriter.TABL_INSN:\n                    {\n                        u = u + 4 - (offset & 3);\n                        let label: number = offset + this.readInt(u);\n                        let min: number = this.readInt(u + 4);\n                        let max: number = this.readInt(u + 8);\n                        let table: Label[] = new Array(max - min + 1);\n                        u += 12;\n                        for (let i: number = 0; i < table.length; ++i) {\n                            table[i] = labels[offset + this.readInt(u)];\n                            u += 4;\n                        }\n                        mv.visitTableSwitchInsn(min, max, labels[label], ...table);\n                        break;\n                    };\n                case ClassWriter.LOOK_INSN:\n                    {\n                        u = u + 4 - (offset & 3);\n                        let label: number = offset + this.readInt(u);\n                        let len: number = this.readInt(u + 4);\n                        let keys: number[] = new Array(len);\n                        let values: Label[] = new Array(len);\n                        u += 8;\n                        for (let i: number = 0; i < len; ++i) {\n                            keys[i] = this.readInt(u);\n                            values[i] = labels[offset + this.readInt(u + 4)];\n                            u += 8;\n                        }\n                        mv.visitLookupSwitchInsn(labels[label], keys, values);\n                        break;\n                    };\n                case ClassWriter.VAR_INSN:\n                    mv.visitVarInsn(opcode, b[u + 1] & 255);\n                    u += 2;\n                    break;\n                case ClassWriter.SBYTE_INSN:\n                    mv.visitIntInsn(opcode, b[u + 1]);\n                    u += 2;\n                    break;\n                case ClassWriter.SHORT_INSN:\n                    mv.visitIntInsn(opcode, this.readShort(u + 1));\n                    u += 3;\n                    break;\n                case ClassWriter.LDC_INSN:\n                    mv.visitLdcInsn(this.readConst(b[u + 1] & 255, c));\n                    u += 2;\n                    break;\n                case ClassWriter.LDCW_INSN:\n                    mv.visitLdcInsn(this.readConst(this.readUnsignedShort(u + 1), c));\n                    u += 3;\n                    break;\n                case ClassWriter.FIELDORMETH_INSN:\n                case ClassWriter.ITFMETH_INSN:\n                    {\n                        let cpIndex: number = this.items[this.readUnsignedShort(u + 1)];\n                        let itf: boolean = b[cpIndex - 1] === ClassWriter.IMETH;\n                        let iowner: string = this.readClass(cpIndex, c);\n                        cpIndex = this.items[this.readUnsignedShort(cpIndex + 2)];\n                        let iname: string | null = this.readUTF8(cpIndex, c);\n                        let idesc: string | null = this.readUTF8(cpIndex + 2, c);\n                        if (opcode < Opcodes.INVOKEVIRTUAL) {\n                            mv.visitFieldInsn(opcode, iowner, iname, idesc);\n                        } else {\n                            mv.visitMethodInsn(opcode, iowner, iname, idesc, itf);\n                        }\n                        if (opcode === Opcodes.INVOKEINTERFACE) {\n                            u += 5;\n                        } else {\n                            u += 3;\n                        }\n                        break;\n                    };\n                case ClassWriter.INDYMETH_INSN:\n                    {\n                        let cpIndex: number = this.items[this.readUnsignedShort(u + 1)];\n                        let bsmIndex: number = context.bootstrapMethods[this.readUnsignedShort(cpIndex)];\n                        let bsm: Handle = <Handle>this.readConst(this.readUnsignedShort(bsmIndex), c);\n                        let bsmArgCount: number = this.readUnsignedShort(bsmIndex + 2);\n                        let bsmArgs: any[] = new Array(bsmArgCount);\n                        bsmIndex += 4;\n                        for (let i: number = 0; i < bsmArgCount; i++) {\n                            bsmArgs[i] = this.readConst(this.readUnsignedShort(bsmIndex), c);\n                            bsmIndex += 2;\n                        }\n                        cpIndex = this.items[this.readUnsignedShort(cpIndex + 2)];\n                        let iname: string | null = this.readUTF8(cpIndex, c);\n                        let idesc: string | null = this.readUTF8(cpIndex + 2, c);\n                        mv.visitInvokeDynamicInsn(iname, idesc, bsm, ...bsmArgs);\n                        u += 5;\n                        break;\n                    };\n                case ClassWriter.TYPE_INSN:\n                    mv.visitTypeInsn(opcode, this.readClass(u + 1, c));\n                    u += 3;\n                    break;\n                case ClassWriter.IINC_INSN:\n                    mv.visitIincInsn(b[u + 1] & 255, b[u + 2]);\n                    u += 3;\n                    break;\n                default:\n                    mv.visitMultiANewArrayInsn(this.readClass(u + 1, c), b[u + 3] & 255);\n                    u += 4;\n                    break;\n            }\n            while ((tanns != null && tann < tanns.length && ntoff <= offset)) {\n                if (ntoff === offset) {\n                    let v: number = this.readAnnotationTarget(context, tanns[tann]);\n                    this.readAnnotationValues(v + 2, c, true, mv.visitInsnAnnotation(context.typeRef, context.typePath, this.readUTF8(v, c), true));\n                }\n                ntoff = ++tann >= tanns.length || this.readByte(tanns[tann]) < 67 ? -1 : this.readUnsignedShort(tanns[tann] + 1);\n            };\n            while ((itanns != null && itann < itanns.length && nitoff <= offset)) {\n                if (nitoff === offset) {\n                    let v: number = this.readAnnotationTarget(context, itanns[itann]);\n                    this.readAnnotationValues(v + 2, c, true, mv.visitInsnAnnotation(context.typeRef, context.typePath, this.readUTF8(v, c), false));\n                }\n                nitoff = ++itann >= itanns.length || this.readByte(itanns[itann]) < 67 ? -1 : this.readUnsignedShort(itanns[itann] + 1);\n            };\n        };\n        if (labels[codeLength] != null) {\n            mv.visitLabel(labels[codeLength]);\n        }\n        if ((context.flags & ClassReader.SKIP_DEBUG) === 0 && varTable !== 0) {\n            let typeTable: number[] | null = null;\n            if (varTypeTable !== 0) {\n                u = varTypeTable + 2;\n                typeTable = new Array(this.readUnsignedShort(varTypeTable) * 3);\n                for (let i: number = typeTable.length; i > 0;) {\n                    typeTable[--i] = u + 6;\n                    typeTable[--i] = this.readUnsignedShort(u + 8);\n                    typeTable[--i] = this.readUnsignedShort(u);\n                    u += 10;\n                }\n            }\n            u = varTable + 2;\n            for (let i: number = this.readUnsignedShort(varTable); i > 0; --i) {\n                let start: number = this.readUnsignedShort(u);\n                let length: number = this.readUnsignedShort(u + 2);\n                let index: number = this.readUnsignedShort(u + 8);\n                let vsignature: string | null = null;\n                if (typeTable != null) {\n                    for (let j: number = 0; j < typeTable.length; j += 3) {\n                        if (typeTable[j] === start && typeTable[j + 1] === index) {\n                            vsignature = this.readUTF8(typeTable[j + 2], c);\n                            break;\n                        }\n                    }\n                }\n                mv.visitLocalVariable(this.readUTF8(u + 4, c), this.readUTF8(u + 6, c), vsignature, labels[start], labels[start + length], index);\n                u += 10;\n            }\n        }\n        if (tanns != null) {\n            for (let i: number = 0; i < tanns.length; ++i) {\n                if ((this.readByte(tanns[i]) >> 1) === (64 >> 1)) {\n                    let v: number = this.readAnnotationTarget(context, tanns[i]);\n                    v = this.readAnnotationValues(v + 2, c, true, mv.visitLocalVariableAnnotation(context.typeRef, context.typePath, context.start, context.end, context.index, this.readUTF8(v, c), true));\n                }\n            }\n        }\n        if (itanns != null) {\n            for (let i: number = 0; i < itanns.length; ++i) {\n                if ((this.readByte(itanns[i]) >> 1) === (64 >> 1)) {\n                    let v: number = this.readAnnotationTarget(context, itanns[i]);\n                    v = this.readAnnotationValues(v + 2, c, true, mv.visitLocalVariableAnnotation(context.typeRef, context.typePath, context.start, context.end, context.index, this.readUTF8(v, c), false));\n                }\n            }\n        }\n        while ((attributes != null)) {\n            let attr: Attribute | null = attributes.next;\n            attributes.next = null;\n            mv.visitAttribute(attributes);\n            attributes = attr;\n        };\n        mv.visitMaxs(maxStack, maxLocals);\n    }\n\n    /**\n     * Parses a type annotation table to find the labels, and to visit the try\n     * catch block annotations.\n     *\n     * @param u       the start offset of a type annotation table.\n     * @param mv      the method visitor to be used to visit the try catch block\n     * annotations.\n     * @param context information about the class being parsed.\n     * @param visible if the type annotation table to parse contains runtime visible\n     * annotations.\n     * @return the start offset of each type annotation in the parsed table.\n     */\n    private readTypeAnnotations(mv: MethodVisitor, context: Context, u: number, visible: boolean): number[] {\n        let c: number[] = context.buffer;\n        let offsets: number[] = new Array(this.readUnsignedShort(u));\n        u += 2;\n        for (let i: number = 0; i < offsets.length; ++i) {\n            offsets[i] = u;\n            let target: number = this.readInt(u);\n            switch ((target >>> 24)) {\n                case 0:\n                case 1:\n                case 22:\n                    u += 2;\n                    break;\n                case 19:\n                case 20:\n                case 21:\n                    u += 1;\n                    break;\n                case 64:\n                case 65:\n                    for (let j: number = this.readUnsignedShort(u + 1); j > 0; --j) {\n                        let start: number = this.readUnsignedShort(u + 3);\n                        let length: number = this.readUnsignedShort(u + 5);\n                        this.readLabel(start, context.labels);\n                        this.readLabel(start + length, context.labels);\n                        u += 6;\n                    }\n                    u += 3;\n                    break;\n                case 71:\n                case 72:\n                case 73:\n                case 74:\n                case 75:\n                    u += 4;\n                    break;\n                default:\n                    u += 3;\n                    break;\n            }\n            let pathLength: number = this.readByte(u);\n            if ((target >>> 24) === 66) {\n                let path: TypePath | null = pathLength === 0 ? null : new TypePath(this.buf, u);\n                u += 1 + 2 * pathLength;\n                u = this.readAnnotationValues(u + 2, c, true, mv.visitTryCatchAnnotation(target, path, this.readUTF8(u, c), visible));\n            } else {\n                u = this.readAnnotationValues(u + 3 + 2 * pathLength, c, true, null);\n            }\n        }\n        return offsets;\n    }\n\n    /**\n     * Parses the header of a type annotation to extract its target_type and\n     * target_path (the result is stored in the given context), and returns the\n     * start offset of the rest of the type_annotation structure (i.e. the\n     * offset to the type_index field, which is followed by\n     * num_element_value_pairs and then the name,value pairs).\n     *\n     * @param context information about the class being parsed. This is where the\n     * extracted target_type and target_path must be stored.\n     * @param u       the start offset of a type_annotation structure.\n     * @return the start offset of the rest of the type_annotation structure.\n     */\n    private readAnnotationTarget(context: Context, u: number): number {\n        let target: number = this.readInt(u);\n        switch ((target >>> 24)) {\n            case 0:\n            case 1:\n            case 22:\n                target &= -65536;\n                u += 2;\n                break;\n            case 19:\n            case 20:\n            case 21:\n                target &= -16777216;\n                u += 1;\n                break;\n            case 64:\n            case 65:\n                {\n                    target &= -16777216;\n                    let n: number = this.readUnsignedShort(u + 1);\n                    context.start = new Array(n);\n                    context.end = new Array(n);\n                    context.index = new Array(n);\n                    u += 3;\n                    for (let i: number = 0; i < n; ++i) {\n                        let start: number = this.readUnsignedShort(u);\n                        let length: number = this.readUnsignedShort(u + 2);\n                        context.start[i] = this.readLabel(start, context.labels);\n                        context.end[i] = this.readLabel(start + length, context.labels);\n                        context.index[i] = this.readUnsignedShort(u + 4);\n                        u += 6;\n                    }\n                    break;\n                };\n            case 71:\n            case 72:\n            case 73:\n            case 74:\n            case 75:\n                target &= -16776961;\n                u += 4;\n                break;\n            default:\n                target &= (target >>> 24) < 67 ? -256 : -16777216;\n                u += 3;\n                break;\n        }\n        let pathLength: number = this.readByte(u);\n        context.typeRef = target;\n        context.typePath = pathLength === 0 ? null : new TypePath(this.buf, u);\n        return u + 1 + 2 * pathLength;\n    }\n\n    /**\n     * Reads parameter annotations and makes the given visitor visit them.\n     *\n     * @param mv      the visitor that must visit the annotations.\n     * @param context information about the class being parsed.\n     * @param v       start offset in {@link #b b} of the annotations to be read.\n     * @param visible <tt>true</tt> if the annotations to be read are visible at\n     * runtime.\n     */\n    private readParameterAnnotations(mv: MethodVisitor, context: Context, v: number, visible: boolean) {\n        let i: number;\n        let n: number = this.buf[v++] & 255;\n        let synthetics: number = Type.getArgumentTypes(context.desc).length - n;\n        let av: AnnotationVisitor | null = null;\n        for (i = 0; i < synthetics; ++i) {\n            av = mv.visitParameterAnnotation(i, \"Ljava/lang/Synthetic;\", false);\n            if (av != null) {\n                av.visitEnd();\n            }\n        }\n        let c: number[] = context.buffer;\n        for (; i < n + synthetics; ++i) {\n            let j: number = this.readUnsignedShort(v);\n            v += 2;\n            for (; j > 0; --j) {\n                av = mv.visitParameterAnnotation(i, this.readUTF8(v, c), visible);\n                v = this.readAnnotationValues(v + 2, c, true, av);\n            }\n        }\n    }\n\n    /**\n     * Reads the values of an annotation and makes the given visitor visit them.\n     *\n     * @param v     the start offset in {@link #b b} of the values to be read\n     * (including the unsigned short that gives the number of\n     * values).\n     * @param buf   buffer to be used to call {@link #readUTF8 readUTF8},\n     * {@link #readClass(int, int[]) readClass} or {@link #readConst\n     * readConst}.\n     * @param named if the annotation values are named or not.\n     * @param av    the visitor that must visit the values.\n     * @return the end offset of the annotation values.\n     */\n    private readAnnotationValues(v: number, buf: number[], named: boolean, av: AnnotationVisitor | null): number {\n        let i: number = this.readUnsignedShort(v);\n        v += 2;\n        if (named) {\n            for (; i > 0; --i) {\n                v = this.readAnnotationValue(v + 2, buf, this.readUTF8(v, buf), av);\n            }\n        } else {\n            for (; i > 0; --i) {\n                v = this.readAnnotationValue(v, buf, null, av);\n            }\n        }\n        if (av != null) {\n            av.visitEnd();\n        }\n        return v;\n    }\n\n    /**\n     * Reads a value of an annotation and makes the given visitor visit it.\n     *\n     * @param v    the start offset in {@link #b b} of the value to be read\n     * (<i>not including the value name constant pool index</i>).\n     * @param buf  buffer to be used to call {@link #readUTF8 readUTF8},\n     * {@link #readClass(int, int[]) readClass} or {@link #readConst\n     * readConst}.\n     * @param name the name of the value to be read.\n     * @param av   the visitor that must visit the value.\n     * @return the end offset of the annotation value.\n     */\n    private readAnnotationValue(v: number, buf: number[], name: string | null, av: AnnotationVisitor | null): number {\n        name = name ?? \"\";\n        let i: number;\n        if (av == null) {\n            switch ((this.buf[v] & 255)) {\n                case (\"e\").charCodeAt(0):\n                    return v + 5;\n                case (\"@\").charCodeAt(0):\n                    return this.readAnnotationValues(v + 3, buf, true, null);\n                case (\"[\").charCodeAt(0):\n                    return this.readAnnotationValues(v + 1, buf, false, null);\n                default:\n                    return v + 3;\n            }\n        }\n        switch ((this.buf[v++] & 255)) {\n            case (\"I\").charCodeAt(0):\n            case (\"J\").charCodeAt(0):\n            case (\"F\").charCodeAt(0):\n            case (\"D\").charCodeAt(0):\n                av.visit(name, this.readConst(this.readUnsignedShort(v), buf));\n                v += 2;\n                break;\n            case (\"B\").charCodeAt(0):\n                av.visit(name, (this.readInt(this.items[this.readUnsignedShort(v)]) | 0));\n                v += 2;\n                break;\n            case (\"Z\").charCodeAt(0):\n                av.visit(name, this.readInt(this.items[this.readUnsignedShort(v)]) === 0 ? false : true);\n                v += 2;\n                break;\n            case (\"S\").charCodeAt(0):\n                av.visit(name, (this.readInt(this.items[this.readUnsignedShort(v)]) | 0));\n                v += 2;\n                break;\n            case (\"C\").charCodeAt(0):\n                av.visit(name, String.fromCharCode(this.readInt(this.items[this.readUnsignedShort(v)])));\n                v += 2;\n                break;\n            case (\"s\").charCodeAt(0):\n                av.visit(name, this.readUTF8(v, buf));\n                v += 2;\n                break;\n            case (\"e\").charCodeAt(0):\n                av.visitEnum(name, this.readUTF8(v, buf), this.readUTF8(v + 2, buf));\n                v += 4;\n                break;\n            case (\"c\").charCodeAt(0):\n                av.visit(name, Type.getType(this.readUTF8(v, buf)));\n                v += 2;\n                break;\n            case (\"@\").charCodeAt(0):\n                v = this.readAnnotationValues(v + 2, buf, true, av.visitAnnotation(name, this.readUTF8(v, buf)));\n                break;\n            case (\"[\").charCodeAt(0):\n                let size: number = this.readUnsignedShort(v);\n                v += 2;\n                if (size === 0) {\n                    return this.readAnnotationValues(v - 2, buf, false, av.visitArray(name));\n                }\n                switch ((this.buf[v++] & 255)) {\n                    case (\"B\").charCodeAt(0):\n                        let bv: number[] = new Array(size);\n                        for (i = 0; i < size; i++) {\n                            bv[i] = (this.readInt(this.items[this.readUnsignedShort(v)]) | 0);\n                            v += 3;\n                        }\n                        av.visit(name, bv);\n                        --v;\n                        break;\n                    case (\"Z\").charCodeAt(0):\n                        let zv: boolean[] = new Array(size);\n                        for (i = 0; i < size; i++) {\n                            zv[i] = this.readInt(this.items[this.readUnsignedShort(v)]) !== 0;\n                            v += 3;\n                        }\n                        av.visit(name, zv);\n                        --v;\n                        break;\n                    case (\"S\").charCodeAt(0):\n                        let sv: number[] = new Array(size);\n                        for (i = 0; i < size; i++) {\n                            sv[i] = (this.readInt(this.items[this.readUnsignedShort(v)]) | 0);\n                            v += 3;\n                        }\n                        av.visit(name, sv);\n                        --v;\n                        break;\n                    case (\"C\").charCodeAt(0):\n                        let cv: string[] = new Array(size);\n                        for (i = 0; i < size; i++) {\n                            cv[i] = String.fromCharCode(this.readInt(this.items[this.readUnsignedShort(v)]));\n                            v += 3;\n                        }\n                        av.visit(name, cv);\n                        --v;\n                        break;\n                    case (\"I\").charCodeAt(0):\n                        let iv: number[] = new Array(size);\n                        for (i = 0; i < size; i++) {\n                            iv[i] = this.readInt(this.items[this.readUnsignedShort(v)]);\n                            v += 3;\n                        }\n                        av.visit(name, iv);\n                        --v;\n                        break;\n                    case (\"J\").charCodeAt(0):\n                        let lv: Long[] = new Array(size);\n                        for (i = 0; i < size; i++) {\n                            lv[i] = this.readLong(this.items[this.readUnsignedShort(v)]);\n                            v += 3;\n                        }\n                        av.visit(name, lv);\n                        --v;\n                        break;\n                    case (\"F\").charCodeAt(0):\n                        let fv: number[] = new Array(size);\n                        for (i = 0; i < size; i++) {\n                            fv[i] = intBitsToFloat(this.readInt(this.items[this.readUnsignedShort(v)]));\n                            v += 3;\n                        }\n                        av.visit(name, fv);\n                        --v;\n                        break;\n                    case (\"D\").charCodeAt(0):\n                        let dv: number[] = new Array(size);\n                        for (i = 0; i < size; i++) {\n                            dv[i] = longBitsToDouble(this.readLong(this.items[this.readUnsignedShort(v)]));\n                            v += 3;\n                        }\n                        av.visit(name, dv);\n                        --v;\n                        break;\n                    default:\n                        v = this.readAnnotationValues(v - 3, buf, false, av.visitArray(name));\n                }\n        }\n        return v;\n    }\n\n    /**\n     * Computes the implicit frame of the method currently being parsed (as\n     * defined in the given {@link Context}) and stores it in the given context.\n     *\n     * @param frame information about the class being parsed.\n     */\n    private getImplicitFrame(frame: Context) {\n        let desc: string = frame.desc;\n        let locals: any[] = frame.local;\n        let local: number = 0;\n        if ((frame.access & Opcodes.ACC_STATIC) === 0) {\n            if ((\"<init>\" === frame.name)) {\n                locals[local++] = Opcodes.UNINITIALIZED_THIS;\n            } else {\n                locals[local++] = this.readClass(this.header + 2, frame.buffer);\n            }\n        }\n        let i: number = 1;\n        loop: while ((true)) {\n            let j: number = i;\n            switch (((desc.charAt(i++)).charCodeAt(0))) {\n                case (\"Z\").charCodeAt(0):\n                case (\"C\").charCodeAt(0):\n                case (\"B\").charCodeAt(0):\n                case (\"S\").charCodeAt(0):\n                case (\"I\").charCodeAt(0):\n                    locals[local++] = Opcodes.INTEGER;\n                    break;\n                case (\"F\").charCodeAt(0):\n                    locals[local++] = Opcodes.FLOAT;\n                    break;\n                case (\"J\").charCodeAt(0):\n                    locals[local++] = Opcodes.LONG;\n                    break;\n                case (\"D\").charCodeAt(0):\n                    locals[local++] = Opcodes.DOUBLE;\n                    break;\n                case (\"[\").charCodeAt(0):\n                    while ((desc.charAt(i) === (\"[\"))) {\n                        ++i;\n                    };\n                    if (desc.charAt(i) === (\"L\")) {\n                        ++i;\n                        while ((desc.charAt(i) !== (\";\"))) {\n                            ++i;\n                        };\n                    }\n                    locals[local++] = desc.substring(j, ++i);\n                    break;\n                case (\"L\").charCodeAt(0):\n                    while ((desc.charAt(i) !== (\";\"))) {\n                        ++i;\n                    };\n                    locals[local++] = desc.substring(j + 1, i++);\n                    break;\n                default:\n                    break loop;\n            }\n        };\n        frame.localCount = local;\n    }\n\n    /**\n     * Reads a stack map frame and stores the result in the given\n     * {@link Context} object.\n     *\n     * @param stackMap the start offset of a stack map frame in the class file.\n     * @param zip      if the stack map frame at stackMap is compressed or not.\n     * @param unzip    if the stack map frame must be uncompressed.\n     * @param frame    where the parsed stack map frame must be stored.\n     * @return the offset of the first byte following the parsed frame.\n     */\n    private readFrame(stackMap: number, zip: boolean, unzip: boolean, frame: Context): number {\n        let c: number[] = frame.buffer;\n        let labels: Label[] = frame.labels;\n        let tag: number;\n        let delta: number;\n        if (zip) {\n            tag = this.buf[stackMap++] & 255;\n        } else {\n            tag = MethodWriter.FULL_FRAME;\n            frame.offset = -1;\n        }\n        frame.localDiff = 0;\n        if (tag < MethodWriter.SAME_LOCALS_1_STACK_ITEM_FRAME) {\n            delta = tag;\n            frame.mode = Opcodes.F_SAME;\n            frame.stackCount = 0;\n        } else if (tag < MethodWriter.RESERVED) {\n            delta = tag - MethodWriter.SAME_LOCALS_1_STACK_ITEM_FRAME;\n            stackMap = this.readFrameType(frame.stack, 0, stackMap, c, labels);\n            frame.mode = Opcodes.F_SAME1;\n            frame.stackCount = 1;\n        } else {\n            delta = this.readUnsignedShort(stackMap);\n            stackMap += 2;\n            if (tag === MethodWriter.SAME_LOCALS_1_STACK_ITEM_FRAME_EXTENDED) {\n                stackMap = this.readFrameType(frame.stack, 0, stackMap, c, labels);\n                frame.mode = Opcodes.F_SAME1;\n                frame.stackCount = 1;\n            } else if (tag >= MethodWriter.CHOP_FRAME && tag < MethodWriter.SAME_FRAME_EXTENDED) {\n                frame.mode = Opcodes.F_CHOP;\n                frame.localDiff = MethodWriter.SAME_FRAME_EXTENDED - tag;\n                frame.localCount -= frame.localDiff;\n                frame.stackCount = 0;\n            } else if (tag === MethodWriter.SAME_FRAME_EXTENDED) {\n                frame.mode = Opcodes.F_SAME;\n                frame.stackCount = 0;\n            } else if (tag < MethodWriter.FULL_FRAME) {\n                let local: number = unzip ? frame.localCount : 0;\n                for (let i: number = tag - MethodWriter.SAME_FRAME_EXTENDED; i > 0; i--) {\n                    stackMap = this.readFrameType(frame.local, local++, stackMap, c, labels);\n                }\n                frame.mode = Opcodes.F_APPEND;\n                frame.localDiff = tag - MethodWriter.SAME_FRAME_EXTENDED;\n                frame.localCount += frame.localDiff;\n                frame.stackCount = 0;\n            } else {\n                frame.mode = Opcodes.F_FULL;\n                let n: number = this.readUnsignedShort(stackMap);\n                stackMap += 2;\n                frame.localDiff = n;\n                frame.localCount = n;\n                for (let local: number = 0; n > 0; n--) {\n                    stackMap = this.readFrameType(frame.local, local++, stackMap, c, labels);\n                }\n                n = this.readUnsignedShort(stackMap);\n                stackMap += 2;\n                frame.stackCount = n;\n                for (let stack: number = 0; n > 0; n--) {\n                    stackMap = this.readFrameType(frame.stack, stack++, stackMap, c, labels);\n                }\n            }\n        }\n        frame.offset += delta + 1;\n        this.readLabel(frame.offset, labels);\n        return stackMap;\n    }\n\n    /**\n     * Reads a stack map frame type and stores it at the given index in the\n     * given array.\n     *\n     * @param frame  the array where the parsed type must be stored.\n     * @param index  the index in 'frame' where the parsed type must be stored.\n     * @param v      the start offset of the stack map frame type to read.\n     * @param buf    a buffer to read strings.\n     * @param labels the labels of the method currently being parsed, indexed by\n     * their offset. If the parsed type is an Uninitialized type, a\n     * new label for the corresponding NEW instruction is stored in\n     * this array if it does not already exist.\n     * @return the offset of the first byte after the parsed type.\n     */\n    private readFrameType(frame: any[], index: number, v: number, buf: number[], labels: Label[]): number {\n        let type: number = this.buf[v++] & 255;\n        switch ((type)) {\n            case 0:\n                frame[index] = Opcodes.TOP;\n                break;\n            case 1:\n                frame[index] = Opcodes.INTEGER;\n                break;\n            case 2:\n                frame[index] = Opcodes.FLOAT;\n                break;\n            case 3:\n                frame[index] = Opcodes.DOUBLE;\n                break;\n            case 4:\n                frame[index] = Opcodes.LONG;\n                break;\n            case 5:\n                frame[index] = Opcodes.NULL;\n                break;\n            case 6:\n                frame[index] = Opcodes.UNINITIALIZED_THIS;\n                break;\n            case 7:\n                frame[index] = this.readClass(v, buf);\n                v += 2;\n                break;\n            default:\n                frame[index] = this.readLabel(this.readUnsignedShort(v), labels);\n                v += 2;\n        }\n        return v;\n    }\n\n    /**\n     * Returns the label corresponding to the given offset. The default\n     * implementation of this method creates a label for the given offset if it\n     * has not been already created.\n     *\n     * @param offset a bytecode offset in a method.\n     * @param labels the already created labels, indexed by their offset. If a\n     * label already exists for offset this method must not create a\n     * new one. Otherwise it must store the new label in this array.\n     * @return a non null Label, which must be equal to labels[offset].\n     */\n    readLabel(offset: number, labels: Label[]): Label {\n        if (labels[offset] == null) {\n            labels[offset] = new Label();\n        }\n        return labels[offset];\n    }\n\n    /**\n     * Returns the start index of the attribute_info structure of this class.\n     *\n     * @return the start index of the attribute_info structure of this class.\n     */\n    private getAttributes(): number {\n        let u: number = this.header + 8 + this.readUnsignedShort(this.header + 6) * 2;\n        for (let i: number = this.readUnsignedShort(u); i > 0; --i) {\n            for (let j: number = this.readUnsignedShort(u + 8); j > 0; --j) {\n                u += 6 + this.readInt(u + 12);\n            }\n            u += 8;\n        }\n        u += 2;\n        for (let i: number = this.readUnsignedShort(u); i > 0; --i) {\n            for (let j: number = this.readUnsignedShort(u + 8); j > 0; --j) {\n                u += 6 + this.readInt(u + 12);\n            }\n            u += 8;\n        }\n        return u + 2;\n    }\n\n    /**\n     * Reads an attribute in {@link #b b}.\n     *\n     * @param attrs   prototypes of the attributes that must be parsed during the\n     * visit of the class. Any attribute whose type is not equal to\n     * the type of one the prototypes is ignored (i.e. an empty\n     * {@link Attribute} instance is returned).\n     * @param type    the type of the attribute.\n     * @param off     index of the first byte of the attribute's content in\n     * {@link #b b}. The 6 attribute header bytes, containing the\n     * type and the length of the attribute, are not taken into\n     * account here (they have already been read).\n     * @param len     the length of the attribute's content.\n     * @param buf     buffer to be used to call {@link #readUTF8 readUTF8},\n     * {@link #readClass(int, int[]) readClass} or {@link #readConst\n     * readConst}.\n     * @param codeOff index of the first byte of code's attribute content in\n     * {@link #b b}, or -1 if the attribute to be read is not a code\n     * attribute. The 6 attribute header bytes, containing the type\n     * and the length of the attribute, are not taken into account\n     * here.\n     * @param labels  the labels of the method's code, or <tt>null</tt> if the\n     * attribute to be read is not a code attribute.\n     * @return the attribute that has been read, or <tt>null</tt> to skip this\n     * attribute.\n     */\n    private readAttribute(attrs: Attribute[], type: string | null, off: number, len: number, buf: number[], codeOff: number, labels: Label[] | null): Attribute {\n        for (let i: number = 0; i < attrs.length; ++i) {\n            if ((attrs[i].type === type)) {\n                return attrs[i].read(this, off, len, buf, codeOff, labels);\n            }\n        }\n        return new Attribute(type).read(this, off, len, null, -1, null);\n    }\n\n    /**\n     * Returns the number of constant pool items in {@link #b b}.\n     *\n     * @return the number of constant pool items in {@link #b b}.\n     */\n    public getItemCount(): number {\n        return this.items.length;\n    }\n\n    /**\n     * Returns the start index of the constant pool item in {@link #b b}, plus\n     * one. <i>This method is intended for {@link Attribute} sub classes, and is\n     * normally not needed by class generators or adapters.</i>\n     *\n     * @param item the index a constant pool item.\n     * @return the start index of the constant pool item in {@link #b b}, plus\n     * one.\n     */\n    public getItem(item: number): number {\n        return this.items[item];\n    }\n\n    /**\n     * Returns the maximum length of the strings contained in the constant pool\n     * of the class.\n     *\n     * @return the maximum length of the strings contained in the constant pool\n     * of the class.\n     */\n    public getMaxStringLength(): number {\n        return this.maxStringLength;\n    }\n\n    /**\n     * Reads a byte value in {@link #b b}. <i>This method is intended for\n     * {@link Attribute} sub classes, and is normally not needed by class\n     * generators or adapters.</i>\n     *\n     * @param index the start index of the value to be read in {@link #b b}.\n     * @return the read value.\n     */\n    public readByte(index: number): number {\n        // return this.buf.readInt8(index);\n        return this.buf[index] & 255;\n    }\n\n    /**\n     * Reads an unsigned short value in {@link #b b}. <i>This method is intended\n     * for {@link Attribute} sub classes, and is normally not needed by class\n     * generators or adapters.</i>\n     *\n     * @param index the start index of the value to be read in {@link #b b}.\n     * @return the read value.\n     */\n    public readUnsignedShort(index: number): number {\n        // return this.buf.readUInt16BE(index);\n        let b = this.buf;\n        return ((b[index] & 255) << 8) | (b[index + 1] & 255);\n    }\n\n    /**\n     * Reads a signed short value in {@link #b b}. <i>This method is intended\n     * for {@link Attribute} sub classes, and is normally not needed by class\n     * generators or adapters.</i>\n     *\n     * @param index the start index of the value to be read in {@link #b b}.\n     * @return the read value.\n     */\n    public readShort(index: number): number {\n        let b = this.buf;\n        return (b[index] << 8) | (b[index + 1]);\n    }\n\n    /**\n     * Reads a signed int value in {@link #b b}. <i>This method is intended for\n     * {@link Attribute} sub classes, and is normally not needed by class\n     * generators or adapters.</i>\n     *\n     * @param index the start index of the value to be read in {@link #b b}.\n     * @return the read value.\n     */\n    public readInt(index: number): number {\n        // return this.buf.readInt32BE(index);\n        let b = this.buf;\n        return ((b[index] & 255) << 24) | ((b[index + 1] & 255) << 16) | ((b[index + 2] & 255) << 8) | (b[index + 3]);\n    }\n\n    /**\n     * Reads a signed long value in {@link #b b}. <i>This method is intended for\n     * {@link Attribute} sub classes, and is normally not needed by class\n     * generators or adapters.</i>\n     *\n     * @param index the start index of the value to be read in {@link #b b}.\n     * @return the read value.\n     */\n    public readLong(index: number): Long {\n        let l1: number = this.readInt(index);\n        let l0: number = this.readInt(index + 4) & 4294967295;\n        return new Long(l1, l0);\n    }\n\n    /**\n     * Reads an UTF8 string constant pool item in {@link #b b}. <i>This method\n     * is intended for {@link Attribute} sub classes, and is normally not needed\n     * by class generators or adapters.</i>\n     *\n     * @param index the start index of an unsigned short value in {@link #b b},\n     * whose value is the index of an UTF8 constant pool item.\n     * @param buf   buffer to be used to read the item. This buffer must be\n     * sufficiently large. It is not automatically resized.\n     * @return the String corresponding to the specified UTF8 item.\n     */\n    public readUTF8(index: number, buf: number[]): string {\n        let item: number = this.readUnsignedShort(index);\n        if (index === 0 || item === 0) { return \"\"; }\n        let s: string = this.strings[item];\n        if (s != null) { return s; }\n        index = this.items[item];\n        this.strings[item] = this.readUTF(index + 2, this.readUnsignedShort(index), buf);\n        return this.strings[item];\n    }\n\n    /**\n     * Reads UTF8 string in {@link #b b}.\n     *\n     * @param index  start offset of the UTF8 string to be read.\n     * @param utfLen length of the UTF8 string to be read.\n     * @param buf    buffer to be used to read the string. This buffer must be\n     * sufficiently large. It is not automatically resized.\n     * @return the String corresponding to the specified UTF8 string.\n     */\n    private readUTF(index: number, utfLen: number, buf: number[]): string {\n        let endIndex: number = index + utfLen;\n        let b: Uint8Array = this.buf;\n        let strLen: number = 0;\n        let c: number;\n        let st: number = 0;\n        let cc: number = 0;\n        while (index < endIndex) {\n            c = b[index++];\n            switch (st) {\n                case 0:\n                    c = c & 255;\n                    if (c < 128) {\n                        buf[strLen++] = c;\n                    } else if (c < 224 && c > 191) {\n                        cc = (c & 31);\n                        st = 1;\n                    } else {\n                        cc = (c & 15);\n                        st = 2;\n                    }\n                    break;\n                case 1:\n                    buf[strLen++] = ((cc << 6) | (c & 63));\n                    st = 0;\n                    break;\n                case 2:\n                    cc = ((cc << 6) | (c & 63));\n                    st = 1;\n                    break;\n            }\n        };\n        return buf.slice(0, strLen).map((c) => String.fromCharCode(c)).join(\"\");\n    }\n\n    /**\n     * Reads a class constant pool item in {@link #b b}. <i>This method is\n     * intended for {@link Attribute} sub classes, and is normally not needed by\n     * class generators or adapters.</i>\n     *\n     * @param index the start index of an unsigned short value in {@link #b b},\n     * whose value is the index of a class constant pool item.\n     * @param buf   buffer to be used to read the item. This buffer must be\n     * sufficiently large. It is not automatically resized.\n     * @return the String corresponding to the specified class item.\n     */\n    public readClass(index: number, buf: number[]): string {\n        return this.readUTF8(this.items[this.readUnsignedShort(index)], buf) ?? \"\";\n    }\n\n    /**\n     * Reads a numeric or string constant pool item in {@link #b b}. <i>This\n     * method is intended for {@link Attribute} sub classes, and is normally not\n     * needed by class generators or adapters.</i>\n     *\n     * @param item the index of a constant pool item.\n     * @param buf  buffer to be used to read the item. This buffer must be\n     * sufficiently large. It is not automatically resized.\n     * @return the {@link Integer}, {@link Float}, {@link Long}, {@link Double},\n     * {@link String}, {@link Type} or {@link Handle} corresponding to\n     * the given constant pool item.\n     */\n    public readConst(item: number, buf: number[]): any {\n        let index: number = this.items[item];\n        switch ((this.buf[index - 1])) {\n            case ClassWriter.INT:\n                return this.readInt(index);\n            case ClassWriter.FLOAT:\n                return intBitsToFloat(this.readInt(index));\n            case ClassWriter.LONG:\n                return this.readLong(index);\n            case ClassWriter.DOUBLE:\n                return longBitsToDouble(this.readLong(index));\n            case ClassWriter.CLASS:\n                return Type.getObjectType(this.readUTF8(index, buf));\n            case ClassWriter.STR:\n                return this.readUTF8(index, buf);\n            case ClassWriter.MTYPE:\n                return Type.getMethodType(this.readUTF8(index, buf));\n            default:\n                let tag: number = this.readByte(index);\n                let items: number[] = this.items;\n                let cpIndex: number = items[this.readUnsignedShort(index + 1)];\n                let itf: boolean = this.buf[cpIndex - 1] === ClassWriter.IMETH;\n                let owner: string = this.readClass(cpIndex, buf);\n                cpIndex = items[this.readUnsignedShort(cpIndex + 2)];\n                let name: string = this.readUTF8(cpIndex, buf);\n                let desc: string = this.readUTF8(cpIndex + 2, buf);\n                return new Handle(tag, owner, name, desc, itf);\n        }\n    }\n}\n\n","/*\n * ASM: a very small and fast Java bytecode manipulation framework\n * Copyright (c) 2000-2011 INRIA, France Telecom\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n * 3. Neither the name of the copyright holders nor the names of its\n *    contributors may be used to endorse or promote products derived from\n *    this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\n * THE POSSIBILITY OF SUCH DAMAGE.\n */\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\n/**\n * A reference to a type appearing in a class, field or method declaration, or\n * on an instruction. Such a reference designates the part of the class where\n * the referenced type is appearing (e.g. an 'extends', 'implements' or 'throws'\n * clause, a 'new' instruction, a 'catch' clause, a type cast, a local variable\n * declaration, etc).\n *\n * @author Eric Bruneton\n */\nexport class TypeReference {\n    /**\n     * The sort of type references that target a type parameter of a generic\n     * class. See {@link #getSort getSort}.\n     */\n    static readonly CLASS_TYPE_PARAMETER: number = 0;\n\n    /**\n     * The sort of type references that target a type parameter of a generic\n     * method. See {@link #getSort getSort}.\n     */\n    static readonly METHOD_TYPE_PARAMETER: number = 1;\n\n    /**\n     * The sort of type references that target the super class of a class or one\n     * of the interfaces it implements. See {@link #getSort getSort}.\n     */\n    static readonly CLASS_EXTENDS: number = 16;\n\n    /**\n     * The sort of type references that target a bound of a type parameter of a\n     * generic class. See {@link #getSort getSort}.\n     */\n    static readonly CLASS_TYPE_PARAMETER_BOUND: number = 17;\n\n    /**\n     * The sort of type references that target a bound of a type parameter of a\n     * generic method. See {@link #getSort getSort}.\n     */\n    static readonly METHOD_TYPE_PARAMETER_BOUND: number = 18;\n\n    /**\n     * The sort of type references that target the type of a field. See\n     * {@link #getSort getSort}.\n     */\n    static readonly FIELD: number = 19;\n\n    /**\n     * The sort of type references that target the return type of a method. See\n     * {@link #getSort getSort}.\n     */\n    static readonly METHOD_RETURN: number = 20;\n\n    /**\n     * The sort of type references that target the receiver type of a method.\n     * See {@link #getSort getSort}.\n     */\n    static readonly METHOD_RECEIVER: number = 21;\n\n    /**\n     * The sort of type references that target the type of a formal parameter of\n     * a method. See {@link #getSort getSort}.\n     */\n    static readonly METHOD_FORMAL_PARAMETER: number = 22;\n\n    /**\n     * The sort of type references that target the type of an exception declared\n     * in the throws clause of a method. See {@link #getSort getSort}.\n     */\n    static readonly THROWS: number = 23;\n\n    /**\n     * The sort of type references that target the type of a local variable in a\n     * method. See {@link #getSort getSort}.\n     */\n    static readonly LOCAL_VARIABLE: number = 64;\n\n    /**\n     * The sort of type references that target the type of a resource variable\n     * in a method. See {@link #getSort getSort}.\n     */\n    static readonly RESOURCE_VARIABLE: number = 65;\n\n    /**\n     * The sort of type references that target the type of the exception of a\n     * 'catch' clause in a method. See {@link #getSort getSort}.\n     */\n    static readonly EXCEPTION_PARAMETER: number = 66;\n\n    /**\n     * The sort of type references that target the type declared in an\n     * 'instanceof' instruction. See {@link #getSort getSort}.\n     */\n    static readonly INSTANCEOF: number = 67;\n\n    /**\n     * The sort of type references that target the type of the object created by\n     * a 'new' instruction. See {@link #getSort getSort}.\n     */\n    static readonly NEW: number = 68;\n\n    /**\n     * The sort of type references that target the receiver type of a\n     * constructor reference. See {@link #getSort getSort}.\n     */\n    static readonly CONSTRUCTOR_REFERENCE: number = 69;\n\n    /**\n     * The sort of type references that target the receiver type of a method\n     * reference. See {@link #getSort getSort}.\n     */\n    static readonly METHOD_REFERENCE: number = 70;\n\n    /**\n     * The sort of type references that target the type declared in an explicit\n     * or implicit cast instruction. See {@link #getSort getSort}.\n     */\n    static readonly CAST: number = 71;\n\n    /**\n     * The sort of type references that target a type parameter of a generic\n     * constructor in a constructor call. See {@link #getSort getSort}.\n     */\n    static readonly CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT: number = 72;\n\n    /**\n     * The sort of type references that target a type parameter of a generic\n     * method in a method call. See {@link #getSort getSort}.\n     */\n    static readonly METHOD_INVOCATION_TYPE_ARGUMENT: number = 73;\n\n    /**\n     * The sort of type references that target a type parameter of a generic\n     * constructor in a constructor reference. See {@link #getSort getSort}.\n     */\n    static readonly CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT: number = 74;\n\n    /**\n     * The sort of type references that target a type parameter of a generic\n     * method in a method reference. See {@link #getSort getSort}.\n     */\n    static readonly METHOD_REFERENCE_TYPE_ARGUMENT: number = 75;\n\n    /**\n     * The type reference value in Java class file format.\n     */\n    private value: number;\n\n    /**\n     * Creates a new TypeReference.\n     *\n     * @param typeRef\n     * the int encoded value of the type reference, as received in a\n     * visit method related to type annotations, like\n     * visitTypeAnnotation.\n     */\n    constructor(typeRef: number) {\n        this.value = 0;\n        this.value = typeRef;\n    }\n\n    /**\n     * Returns a type reference of the given sort.\n     *\n     * @param sort\n     * {@link #FIELD FIELD}, {@link #METHOD_RETURN METHOD_RETURN},\n     * {@link #METHOD_RECEIVER METHOD_RECEIVER},\n     * {@link #LOCAL_VARIABLE LOCAL_VARIABLE},\n     * {@link #RESOURCE_VARIABLE RESOURCE_VARIABLE},\n     * {@link #INSTANCEOF INSTANCEOF}, {@link #NEW NEW},\n     * {@link #CONSTRUCTOR_REFERENCE CONSTRUCTOR_REFERENCE}, or\n     * {@link #METHOD_REFERENCE METHOD_REFERENCE}.\n     * @return a type reference of the given sort.\n     */\n    static newTypeReference(sort: number): TypeReference {\n        return new TypeReference(sort << 24);\n    }\n\n    /**\n     * Returns a reference to a type parameter of a generic class or method.\n     *\n     * @param sort\n     * {@link #CLASS_TYPE_PARAMETER CLASS_TYPE_PARAMETER} or\n     * {@link #METHOD_TYPE_PARAMETER METHOD_TYPE_PARAMETER}.\n     * @param paramIndex\n     * the type parameter index.\n     * @return a reference to the given generic class or method type parameter.\n     */\n    static newTypeParameterReference(sort: number, paramIndex: number): TypeReference {\n        return new TypeReference((sort << 24) | (paramIndex << 16));\n    }\n\n    /**\n     * Returns a reference to a type parameter bound of a generic class or\n     * method.\n     *\n     * @param sort\n     * {@link #CLASS_TYPE_PARAMETER CLASS_TYPE_PARAMETER} or\n     * {@link #METHOD_TYPE_PARAMETER METHOD_TYPE_PARAMETER}.\n     * @param paramIndex\n     * the type parameter index.\n     * @param boundIndex\n     * the type bound index within the above type parameters.\n     * @return a reference to the given generic class or method type parameter\n     * bound.\n     */\n    static newTypeParameterBoundReference(sort: number, paramIndex: number, boundIndex: number): TypeReference {\n        return new TypeReference((sort << 24) | (paramIndex << 16) | (boundIndex << 8));\n    }\n\n    /**\n     * Returns a reference to the super class or to an interface of the\n     * 'implements' clause of a class.\n     *\n     * @param itfIndex\n     * the index of an interface in the 'implements' clause of a\n     * class, or -1 to reference the super class of the class.\n     * @return a reference to the given super type of a class.\n     */\n    static newSuperTypeReference(itfIndex: number): TypeReference {\n        itfIndex &= 65535;\n        return new TypeReference((TypeReference.CLASS_EXTENDS << 24) | (itfIndex << 8));\n    }\n\n    /**\n     * Returns a reference to the type of a formal parameter of a method.\n     *\n     * @param paramIndex\n     * the formal parameter index.\n     *\n     * @return a reference to the type of the given method formal parameter.\n     */\n    static newFormalParameterReference(paramIndex: number): TypeReference {\n        return new TypeReference((TypeReference.METHOD_FORMAL_PARAMETER << 24) | (paramIndex << 16));\n    }\n\n    /**\n     * Returns a reference to the type of an exception, in a 'throws' clause of\n     * a method.\n     *\n     * @param exceptionIndex\n     * the index of an exception in a 'throws' clause of a method.\n     *\n     * @return a reference to the type of the given exception.\n     */\n    static newExceptionReference(exceptionIndex: number): TypeReference {\n        return new TypeReference((TypeReference.THROWS << 24) | (exceptionIndex << 8));\n    }\n\n    /**\n     * Returns a reference to the type of the exception declared in a 'catch'\n     * clause of a method.\n     *\n     * @param tryCatchBlockIndex\n     * the index of a try catch block (using the order in which they\n     * are visited with visitTryCatchBlock).\n     *\n     * @return a reference to the type of the given exception.\n     */\n    static newTryCatchReference(tryCatchBlockIndex: number): TypeReference {\n        return new TypeReference((TypeReference.EXCEPTION_PARAMETER << 24) | (tryCatchBlockIndex << 8));\n    }\n\n    /**\n     * Returns a reference to the type of a type argument in a constructor or\n     * method call or reference.\n     *\n     * @param sort\n     * {@link #CAST CAST},\n     * {@link #CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT\n     * CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT},\n     * {@link #METHOD_INVOCATION_TYPE_ARGUMENT\n     * METHOD_INVOCATION_TYPE_ARGUMENT},\n     * {@link #CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT\n     * CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT}, or\n     * {@link #METHOD_REFERENCE_TYPE_ARGUMENT\n     * METHOD_REFERENCE_TYPE_ARGUMENT}.\n     * @param argIndex\n     * the type argument index.\n     *\n     * @return a reference to the type of the given type argument.\n     */\n    static newTypeArgumentReference(sort: number, argIndex: number): TypeReference {\n        return new TypeReference((sort << 24) | argIndex);\n    }\n\n    /**\n     * Returns the sort of this type reference.\n     *\n     * @return {@link #CLASS_TYPE_PARAMETER CLASS_TYPE_PARAMETER},\n     * {@link #METHOD_TYPE_PARAMETER METHOD_TYPE_PARAMETER},\n     * {@link #CLASS_EXTENDS CLASS_EXTENDS},\n     * {@link #CLASS_TYPE_PARAMETER_BOUND CLASS_TYPE_PARAMETER_BOUND},\n     * {@link #METHOD_TYPE_PARAMETER_BOUND METHOD_TYPE_PARAMETER_BOUND},\n     * {@link #FIELD FIELD}, {@link #METHOD_RETURN METHOD_RETURN},\n     * {@link #METHOD_RECEIVER METHOD_RECEIVER},\n     * {@link #METHOD_FORMAL_PARAMETER METHOD_FORMAL_PARAMETER},\n     * {@link #THROWS THROWS}, {@link #LOCAL_VARIABLE LOCAL_VARIABLE},\n     * {@link #RESOURCE_VARIABLE RESOURCE_VARIABLE},\n     * {@link #EXCEPTION_PARAMETER EXCEPTION_PARAMETER},\n     * {@link #INSTANCEOF INSTANCEOF}, {@link #NEW NEW},\n     * {@link #CONSTRUCTOR_REFERENCE CONSTRUCTOR_REFERENCE},\n     * {@link #METHOD_REFERENCE METHOD_REFERENCE}, {@link #CAST CAST},\n     * {@link #CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT\n     * CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT},\n     * {@link #METHOD_INVOCATION_TYPE_ARGUMENT\n     * METHOD_INVOCATION_TYPE_ARGUMENT},\n     * {@link #CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT\n     * CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT}, or\n     * {@link #METHOD_REFERENCE_TYPE_ARGUMENT\n     * METHOD_REFERENCE_TYPE_ARGUMENT}.\n     */\n    getSort(): number {\n        return this.value >>> 24;\n    }\n\n    /**\n     * Returns the index of the type parameter referenced by this type\n     * reference. This method must only be used for type references whose sort\n     * is {@link #CLASS_TYPE_PARAMETER CLASS_TYPE_PARAMETER},\n     * {@link #METHOD_TYPE_PARAMETER METHOD_TYPE_PARAMETER},\n     * {@link #CLASS_TYPE_PARAMETER_BOUND CLASS_TYPE_PARAMETER_BOUND} or\n     * {@link #METHOD_TYPE_PARAMETER_BOUND METHOD_TYPE_PARAMETER_BOUND}.\n     *\n     * @return a type parameter index.\n     */\n    getTypeParameterIndex(): number {\n        return (this.value & 16711680) >> 16;\n    }\n\n    /**\n     * Returns the index of the type parameter bound, within the type parameter\n     * {@link #getTypeParameterIndex}, referenced by this type reference. This\n     * method must only be used for type references whose sort is\n     * {@link #CLASS_TYPE_PARAMETER_BOUND CLASS_TYPE_PARAMETER_BOUND} or\n     * {@link #METHOD_TYPE_PARAMETER_BOUND METHOD_TYPE_PARAMETER_BOUND}.\n     *\n     * @return a type parameter bound index.\n     */\n    getTypeParameterBoundIndex(): number {\n        return (this.value & 65280) >> 8;\n    }\n\n    /**\n     * Returns the index of the \"super type\" of a class that is referenced by\n     * this type reference. This method must only be used for type references\n     * whose sort is {@link #CLASS_EXTENDS CLASS_EXTENDS}.\n     *\n     * @return the index of an interface in the 'implements' clause of a class,\n     * or -1 if this type reference references the type of the super\n     * class.\n     */\n    getSuperTypeIndex(): number {\n        return (((this.value & 16776960) >> 8) | 0);\n    }\n\n    /**\n     * Returns the index of the formal parameter whose type is referenced by\n     * this type reference. This method must only be used for type references\n     * whose sort is {@link #METHOD_FORMAL_PARAMETER METHOD_FORMAL_PARAMETER}.\n     *\n     * @return a formal parameter index.\n     */\n    getFormalParameterIndex(): number {\n        return (this.value & 16711680) >> 16;\n    }\n\n    /**\n     * Returns the index of the exception, in a 'throws' clause of a method,\n     * whose type is referenced by this type reference. This method must only be\n     * used for type references whose sort is {@link #THROWS THROWS}.\n     *\n     * @return the index of an exception in the 'throws' clause of a method.\n     */\n    getExceptionIndex(): number {\n        return (this.value & 16776960) >> 8;\n    }\n\n    /**\n     * Returns the index of the try catch block (using the order in which they\n     * are visited with visitTryCatchBlock), whose 'catch' type is referenced by\n     * this type reference. This method must only be used for type references\n     * whose sort is {@link #EXCEPTION_PARAMETER EXCEPTION_PARAMETER} .\n     *\n     * @return the index of an exception in the 'throws' clause of a method.\n     */\n    getTryCatchBlockIndex(): number {\n        return (this.value & 16776960) >> 8;\n    }\n\n    /**\n     * Returns the index of the type argument referenced by this type reference.\n     * This method must only be used for type references whose sort is\n     * {@link #CAST CAST}, {@link #CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT\n     * CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT},\n     * {@link #METHOD_INVOCATION_TYPE_ARGUMENT METHOD_INVOCATION_TYPE_ARGUMENT},\n     * {@link #CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT\n     * CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT}, or\n     * {@link #METHOD_REFERENCE_TYPE_ARGUMENT METHOD_REFERENCE_TYPE_ARGUMENT}.\n     *\n     * @return a type parameter index.\n     */\n    getTypeArgumentIndex(): number {\n        return this.value & 255;\n    }\n\n    /**\n     * Returns the int encoded value of this type reference, suitable for use in\n     * visit methods related to type annotations, like visitTypeAnnotation.\n     *\n     * @return the int encoded value of this type reference.\n     */\n    getValue(): number {\n        return this.value;\n    }\n}\n"],"names":["require","this","Long","bits.SHORT_MIN","bits.SHORT_MAX"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA;AACA;;;;;;;;;;;;IAYiB,QA2chB;AA3cD,WAAiB,OAAO;IAEP,YAAI,GAAY,CAAC,IAAI,EAAE,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IAErC,YAAI,GAAY,CAAC,IAAI,EAAE,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IAErC,YAAI,GAAY,CAAC,IAAI,EAAE,GAAG,EAAE,CAAC;IAE7B,YAAI,GAAY,CAAC,IAAI,EAAE,GAAG,EAAE,CAAC;IAE7B,YAAI,GAAY,CAAC,IAAI,EAAE,GAAG,EAAE,CAAC;IAE7B,YAAI,GAAY,CAAC,IAAI,EAAE,GAAG,EAAE,CAAC;IAE7B,YAAI,GAAY,CAAC,IAAI,EAAE,GAAG,EAAE,CAAC;IAE7B,YAAI,GAAY,CAAC,IAAI,EAAE,GAAG,EAAE,CAAC;IAE7B,YAAI,GAAY,CAAC,IAAI,EAAE,GAAG,EAAE,CAAC;IAE7B,YAAI,GAAY,CAAC,IAAI,EAAE,GAAG,EAAE,CAAC;IAE7B,kBAAU,GAAY,CAAC,CAAC;IAExB,mBAAW,GAAY,CAAC,CAAC;IAEzB,qBAAa,GAAY,CAAC,CAAC;IAE3B,kBAAU,GAAY,CAAC,CAAC;IAExB,iBAAS,GAAY,EAAE,CAAC;IAExB,iBAAS,GAAY,EAAE,CAAC;IAExB,wBAAgB,GAAY,EAAE,CAAC;IAE/B,oBAAY,GAAY,EAAE,CAAC;IAE3B,kBAAU,GAAY,EAAE,CAAC;IAEzB,mBAAW,GAAY,GAAG,CAAC;IAE3B,qBAAa,GAAY,GAAG,CAAC;IAE7B,kBAAU,GAAY,GAAG,CAAC;IAE1B,qBAAa,GAAY,GAAG,CAAC;IAE7B,oBAAY,GAAY,IAAI,CAAC;IAE7B,kBAAU,GAAY,IAAI,CAAC;IAE3B,qBAAa,GAAY,IAAI,CAAC;IAE9B,sBAAc,GAAY,IAAI,CAAC;IAE/B,gBAAQ,GAAY,KAAK,CAAC;IAE1B,oBAAY,GAAY,KAAK,CAAC;IAE9B,sBAAc,GAAY,MAAM,CAAC;IAEjC,iBAAS,GAAY,CAAC,CAAC;IAEvB,cAAM,GAAY,CAAC,CAAC;IAEpB,eAAO,GAAY,CAAC,CAAC;IAErB,gBAAQ,GAAY,CAAC,CAAC;IAEtB,cAAM,GAAY,CAAC,CAAC;IAEpB,eAAO,GAAY,CAAC,CAAC;IAErB,aAAK,GAAY,EAAE,CAAC;IAEpB,cAAM,GAAY,EAAE,CAAC;IAErB,kBAAU,GAAY,CAAC,CAAC;IAExB,mBAAW,GAAY,CAAC,CAAC;IAEzB,kBAAU,GAAY,CAAC,CAAC;IAExB,mBAAW,GAAY,CAAC,CAAC;IAEzB,uBAAe,GAAY,CAAC,CAAC;IAE7B,sBAAc,GAAY,CAAC,CAAC;IAE5B,uBAAe,GAAY,CAAC,CAAC;IAE7B,0BAAkB,GAAY,CAAC,CAAC;IAEhC,yBAAiB,GAAY,CAAC,CAAC;;;;IAK/B,aAAK,GAAY,CAAC,CAAC,CAAC;;;;IAKpB,cAAM,GAAY,CAAC,CAAC;;;;;;IAOpB,gBAAQ,GAAY,CAAC,CAAC;;;;;;IAOtB,cAAM,GAAY,CAAC,CAAC;;;;;IAMpB,cAAM,GAAY,CAAC,CAAC;;;;;IAMpB,eAAO,GAAY,CAAC,CAAC;IAErB,WAAG,GAAoB,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC;IAErC,eAAO,GAAoB,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC;IAEzC,aAAK,GAAoB,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC;IAEvC,cAAM,GAAoB,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC;IAExC,YAAI,GAAoB,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC;IAEtC,YAAI,GAAoB,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC;IAEtC,0BAAkB,GAAoB,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC;IAEpD,WAAG,GAAY,CAAC,CAAC;IAEjB,mBAAW,GAAY,CAAC,CAAC;IAEzB,iBAAS,GAAY,CAAC,CAAC;IAEvB,gBAAQ,GAAY,CAAC,CAAC;IAEtB,gBAAQ,GAAY,CAAC,CAAC;IAEtB,gBAAQ,GAAY,CAAC,CAAC;IAEtB,gBAAQ,GAAY,CAAC,CAAC;IAEtB,gBAAQ,GAAY,CAAC,CAAC;IAEtB,gBAAQ,GAAY,CAAC,CAAC;IAEtB,gBAAQ,GAAY,CAAC,CAAC;IAEtB,gBAAQ,GAAY,EAAE,CAAC;IAEvB,gBAAQ,GAAY,EAAE,CAAC;IAEvB,gBAAQ,GAAY,EAAE,CAAC;IAEvB,gBAAQ,GAAY,EAAE,CAAC;IAEvB,gBAAQ,GAAY,EAAE,CAAC;IAEvB,gBAAQ,GAAY,EAAE,CAAC;IAEvB,cAAM,GAAY,EAAE,CAAC;IAErB,cAAM,GAAY,EAAE,CAAC;IAErB,WAAG,GAAY,EAAE,CAAC;IAElB,aAAK,GAAY,EAAE,CAAC;IAEpB,aAAK,GAAY,EAAE,CAAC;IAEpB,aAAK,GAAY,EAAE,CAAC;IAEpB,aAAK,GAAY,EAAE,CAAC;IAEpB,aAAK,GAAY,EAAE,CAAC;IAEpB,cAAM,GAAY,EAAE,CAAC;IAErB,cAAM,GAAY,EAAE,CAAC;IAErB,cAAM,GAAY,EAAE,CAAC;IAErB,cAAM,GAAY,EAAE,CAAC;IAErB,cAAM,GAAY,EAAE,CAAC;IAErB,cAAM,GAAY,EAAE,CAAC;IAErB,cAAM,GAAY,EAAE,CAAC;IAErB,cAAM,GAAY,EAAE,CAAC;IAErB,cAAM,GAAY,EAAE,CAAC;IAErB,cAAM,GAAY,EAAE,CAAC;IAErB,cAAM,GAAY,EAAE,CAAC;IAErB,cAAM,GAAY,EAAE,CAAC;IAErB,cAAM,GAAY,EAAE,CAAC;IAErB,eAAO,GAAY,EAAE,CAAC;IAEtB,eAAO,GAAY,EAAE,CAAC;IAEtB,eAAO,GAAY,EAAE,CAAC;IAEtB,eAAO,GAAY,EAAE,CAAC;IAEtB,eAAO,GAAY,EAAE,CAAC;IAEtB,eAAO,GAAY,EAAE,CAAC;IAEtB,eAAO,GAAY,EAAE,CAAC;IAEtB,eAAO,GAAY,EAAE,CAAC;IAEtB,WAAG,GAAY,EAAE,CAAC;IAElB,YAAI,GAAY,EAAE,CAAC;IAEnB,WAAG,GAAY,EAAE,CAAC;IAElB,cAAM,GAAY,EAAE,CAAC;IAErB,cAAM,GAAY,EAAE,CAAC;IAErB,YAAI,GAAY,EAAE,CAAC;IAEnB,eAAO,GAAY,EAAE,CAAC;IAEtB,eAAO,GAAY,EAAE,CAAC;IAEtB,YAAI,GAAY,EAAE,CAAC;IAEnB,YAAI,GAAY,EAAE,CAAC;IAEnB,YAAI,GAAY,EAAE,CAAC;IAEnB,YAAI,GAAY,EAAE,CAAC;IAEnB,YAAI,GAAY,EAAE,CAAC;IAEnB,YAAI,GAAY,GAAG,CAAC;IAEpB,YAAI,GAAY,GAAG,CAAC;IAEpB,YAAI,GAAY,GAAG,CAAC;IAEpB,YAAI,GAAY,GAAG,CAAC;IAEpB,YAAI,GAAY,GAAG,CAAC;IAEpB,YAAI,GAAY,GAAG,CAAC;IAEpB,YAAI,GAAY,GAAG,CAAC;IAEpB,YAAI,GAAY,GAAG,CAAC;IAEpB,YAAI,GAAY,GAAG,CAAC;IAEpB,YAAI,GAAY,GAAG,CAAC;IAEpB,YAAI,GAAY,GAAG,CAAC;IAEpB,YAAI,GAAY,GAAG,CAAC;IAEpB,YAAI,GAAY,GAAG,CAAC;IAEpB,YAAI,GAAY,GAAG,CAAC;IAEpB,YAAI,GAAY,GAAG,CAAC;IAEpB,YAAI,GAAY,GAAG,CAAC;IAEpB,YAAI,GAAY,GAAG,CAAC;IAEpB,YAAI,GAAY,GAAG,CAAC;IAEpB,YAAI,GAAY,GAAG,CAAC;IAEpB,YAAI,GAAY,GAAG,CAAC;IAEpB,YAAI,GAAY,GAAG,CAAC;IAEpB,YAAI,GAAY,GAAG,CAAC;IAEpB,YAAI,GAAY,GAAG,CAAC;IAEpB,YAAI,GAAY,GAAG,CAAC;IAEpB,aAAK,GAAY,GAAG,CAAC;IAErB,aAAK,GAAY,GAAG,CAAC;IAErB,YAAI,GAAY,GAAG,CAAC;IAEpB,YAAI,GAAY,GAAG,CAAC;IAEpB,WAAG,GAAY,GAAG,CAAC;IAEnB,WAAG,GAAY,GAAG,CAAC;IAEnB,YAAI,GAAY,GAAG,CAAC;IAEpB,YAAI,GAAY,GAAG,CAAC;IAEpB,YAAI,GAAY,GAAG,CAAC;IAEpB,WAAG,GAAY,GAAG,CAAC;IAEnB,WAAG,GAAY,GAAG,CAAC;IAEnB,WAAG,GAAY,GAAG,CAAC;IAEnB,WAAG,GAAY,GAAG,CAAC;IAEnB,WAAG,GAAY,GAAG,CAAC;IAEnB,WAAG,GAAY,GAAG,CAAC;IAEnB,WAAG,GAAY,GAAG,CAAC;IAEnB,WAAG,GAAY,GAAG,CAAC;IAEnB,WAAG,GAAY,GAAG,CAAC;IAEnB,WAAG,GAAY,GAAG,CAAC;IAEnB,WAAG,GAAY,GAAG,CAAC;IAEnB,WAAG,GAAY,GAAG,CAAC;IAEnB,WAAG,GAAY,GAAG,CAAC;IAEnB,WAAG,GAAY,GAAG,CAAC;IAEnB,WAAG,GAAY,GAAG,CAAC;IAEnB,YAAI,GAAY,GAAG,CAAC;IAEpB,aAAK,GAAY,GAAG,CAAC;IAErB,aAAK,GAAY,GAAG,CAAC;IAErB,aAAK,GAAY,GAAG,CAAC;IAErB,aAAK,GAAY,GAAG,CAAC;IAErB,YAAI,GAAY,GAAG,CAAC;IAEpB,YAAI,GAAY,GAAG,CAAC;IAEpB,YAAI,GAAY,GAAG,CAAC;IAEpB,YAAI,GAAY,GAAG,CAAC;IAEpB,YAAI,GAAY,GAAG,CAAC;IAEpB,YAAI,GAAY,GAAG,CAAC;IAEpB,iBAAS,GAAY,GAAG,CAAC;IAEzB,iBAAS,GAAY,GAAG,CAAC;IAEzB,iBAAS,GAAY,GAAG,CAAC;IAEzB,iBAAS,GAAY,GAAG,CAAC;IAEzB,iBAAS,GAAY,GAAG,CAAC;IAEzB,iBAAS,GAAY,GAAG,CAAC;IAEzB,iBAAS,GAAY,GAAG,CAAC;IAEzB,iBAAS,GAAY,GAAG,CAAC;IAEzB,YAAI,GAAY,GAAG,CAAC;IAEpB,WAAG,GAAY,GAAG,CAAC;IAEnB,WAAG,GAAY,GAAG,CAAC;IAEnB,mBAAW,GAAY,GAAG,CAAC;IAE3B,oBAAY,GAAY,GAAG,CAAC;IAE5B,eAAO,GAAY,GAAG,CAAC;IAEvB,eAAO,GAAY,GAAG,CAAC;IAEvB,eAAO,GAAY,GAAG,CAAC;IAEvB,eAAO,GAAY,GAAG,CAAC;IAEvB,eAAO,GAAY,GAAG,CAAC;IAEvB,cAAM,GAAY,GAAG,CAAC;IAEtB,iBAAS,GAAY,GAAG,CAAC;IAEzB,iBAAS,GAAY,GAAG,CAAC;IAEzB,gBAAQ,GAAY,GAAG,CAAC;IAExB,gBAAQ,GAAY,GAAG,CAAC;IAExB,qBAAa,GAAY,GAAG,CAAC;IAE7B,qBAAa,GAAY,GAAG,CAAC;IAE7B,oBAAY,GAAY,GAAG,CAAC;IAE5B,uBAAe,GAAY,GAAG,CAAC;IAE/B,qBAAa,GAAY,GAAG,CAAC;IAE7B,WAAG,GAAY,GAAG,CAAC;IAEnB,gBAAQ,GAAY,GAAG,CAAC;IAExB,iBAAS,GAAY,GAAG,CAAC;IAEzB,mBAAW,GAAY,GAAG,CAAC;IAE3B,cAAM,GAAY,GAAG,CAAC;IAEtB,iBAAS,GAAY,GAAG,CAAC;IAEzB,kBAAU,GAAY,GAAG,CAAC;IAE1B,oBAAY,GAAY,GAAG,CAAC;IAE5B,mBAAW,GAAY,GAAG,CAAC;IAE3B,sBAAc,GAAY,GAAG,CAAC;IAE9B,cAAM,GAAY,GAAG,CAAC;IAEtB,iBAAS,GAAY,GAAG,CAAC;AAC1C,CAAC,EA3cgB,OAAO,KAAP,OAAO;;ACzCxB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAwCsB,iBAAiB;;;;;;;;;;;IAuBnC,YAAmB,GAAW,EAAE,KAA+B,IAAI;QAC/D,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC;QACb,IAAI,GAAG,KAAK,OAAO,CAAC,IAAI,IAAI,GAAG,KAAK,OAAO,CAAC,IAAI,EAAE;YAC9C,MAAM,IAAI,KAAK,EAAE,CAAC;SACrB;QACD,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;QACf,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC;KAChB;;;;;;;;;;;;;;;;IAiBM,KAAK,CAAC,IAAY,EAAE,KAAU;QACjC,IAAI,IAAI,CAAC,EAAE,IAAI,IAAI,EAAE;YACjB,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;SAC9B;KACJ;;;;;;;;;;;IAYM,SAAS,CAAC,IAAY,EAAE,IAAmB,EAAE,KAAoB;QACpE,IAAI,IAAI,CAAC,EAAE,IAAI,IAAI,EAAE;YACjB,IAAI,CAAC,EAAE,CAAC,SAAS,CAAC,IAAI,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;SACxC;KACJ;;;;;;;;;;;;;;IAeM,eAAe,CAAC,IAAY,EAAE,IAAY;QAC7C,IAAI,IAAI,CAAC,EAAE,IAAI,IAAI,EAAE;YACjB,OAAO,IAAI,CAAC,EAAE,CAAC,eAAe,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;SAC9C;QACD,OAAO,IAAI,CAAC;KACf;;;;;;;;;;;;;;;IAgBM,UAAU,CAAC,IAAY;QAC1B,IAAI,IAAI,CAAC,EAAE,IAAI,IAAI,EAAE;YACjB,OAAO,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;SACnC;QACD,OAAO,IAAI,CAAC;KACf;;;;IAKM,QAAQ;QACX,IAAI,IAAI,CAAC,EAAE,IAAI,IAAI,EAAE;YACjB,IAAI,CAAC,EAAE,CAAC,QAAQ,EAAE,CAAC;SACtB;KACJ;;;AC9JL;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA;AACA;;;;;;MAMa,UAAU;;;;;;;;IAkBnB,YAAmB,cAAsB,EAAE;;;;QAT3C,WAAM,GAAW,CAAC,CAAC;QAUf,IAAI,CAAC,IAAI,GAAG,IAAI,UAAU,CAAC,WAAW,CAAC,CAAC;KAC3C;;;;;;;;;IAUM,OAAO,CAAC,CAAS;QACpB,IAAI,MAAM,GAAW,IAAI,CAAC,MAAM,CAAC;QACjC,IAAI,MAAM,GAAG,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;YAC/B,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;SACnB;QACD,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;QAC9B,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,OAAO,IAAI,CAAC;KACf;;;;;;;;;;;IAYD,KAAK,CAAC,EAAU,EAAE,EAAU;QACxB,IAAI,MAAM,GAAW,IAAI,CAAC,MAAM,CAAC;QACjC,IAAI,MAAM,GAAG,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;YAC/B,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;SACnB;QACD,IAAI,IAAI,GAAe,IAAI,CAAC,IAAI,CAAC;QACjC,IAAI,CAAC,MAAM,EAAE,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC,CAAC;QAC1B,IAAI,CAAC,MAAM,EAAE,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC,CAAC;QAC1B,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,OAAO,IAAI,CAAC;KACf;;;;;;;;;IAUM,QAAQ,CAAC,CAAS;QACrB,IAAI,MAAM,GAAW,IAAI,CAAC,MAAM,CAAC;QACjC,IAAI,MAAM,GAAG,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;YAC/B,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;SACnB;QACD,IAAI,IAAI,GAAe,IAAI,CAAC,IAAI,CAAC;QACjC,IAAI,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;QACjC,IAAI,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;QACzB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,OAAO,IAAI,CAAC;KACf;;;;;;;;;IAUD,KAAK,CAAC,CAAS,EAAE,CAAS;QACtB,IAAI,MAAM,GAAW,IAAI,CAAC,MAAM,CAAC;QACjC,IAAI,MAAM,GAAG,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;YAC/B,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;SACnB;QACD,IAAI,IAAI,GAAe,IAAI,CAAC,IAAI,CAAC;QACjC,IAAI,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;QACzB,IAAI,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;QACjC,IAAI,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;QACzB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,OAAO,IAAI,CAAC;KACf;;;;;;;;;IAUM,MAAM,CAAC,CAAS;QACnB,IAAI,MAAM,GAAW,IAAI,CAAC,MAAM,CAAC;QACjC,IAAI,MAAM,GAAG,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;YAC/B,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;SACnB;QACD,IAAI,IAAI,GAAe,IAAI,CAAC,IAAI,CAAC;QACjC,IAAI,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC,CAAC;QAClC,IAAI,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC,CAAC;QAClC,IAAI,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;QACjC,IAAI,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;QACzB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,OAAO,IAAI,CAAC;KACf;;;;;;;;;IAUM,OAAO,CAAC,CAAO;QAClB,IAAI,MAAM,GAAW,IAAI,CAAC,MAAM,CAAC;QACjC,IAAI,MAAM,GAAG,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;YAC/B,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;SACnB;QACD,IAAI,IAAI,GAAe,IAAI,CAAC,IAAI,CAAC;QACjC,IAAI,CAAC,GAAW,CAAC,CAAC,WAAW,EAAE,CAAC;QAChC,IAAI,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,IAAI,GAAG,CAAC;QAClC,IAAI,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,IAAI,GAAG,CAAC;QAClC,IAAI,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,IAAI,GAAG,CAAC;QACjC,IAAI,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC;QACzB,CAAC,GAAG,CAAC,CAAC,UAAU,EAAE,CAAC;QACnB,IAAI,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,IAAI,GAAG,CAAC,CAAC;QACpC,IAAI,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,IAAI,GAAG,CAAC,CAAC;QACpC,IAAI,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,IAAI,GAAG,CAAC,CAAC;QACnC,IAAI,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC;QAC3B,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,OAAO,IAAI,CAAC;KACf;;;;;;;;;IAUM,OAAO,CAAC,CAAS;QACpB,IAAI,UAAU,GAAW,CAAC,CAAC,MAAM,CAAC;QAClC,IAAI,UAAU,GAAG,KAAK,EAAE;YACpB,MAAM,IAAI,KAAK,EAAE,CAAC;SACrB;QACD,IAAI,GAAG,GAAW,IAAI,CAAC,MAAM,CAAC;QAC9B,IAAI,GAAG,GAAG,CAAC,GAAG,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;YACzC,IAAI,CAAC,OAAO,CAAC,CAAC,GAAG,UAAU,CAAC,CAAC;SAChC;QACD,IAAI,IAAI,GAAe,IAAI,CAAC,IAAI,CAAC;QACjC,IAAI,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,UAAU,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;QACvC,IAAI,CAAC,GAAG,EAAE,CAAC,IAAI,UAAU,GAAG,CAAC,CAAC,CAAC;QAC/B,KAAK,IAAI,CAAC,GAAW,CAAC,EAAE,CAAC,GAAG,UAAU,EAAE,EAAE,CAAC,EAAE;YACzC,IAAI,CAAC,GAAW,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YAC5B,IAAI,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC,CAAC,EAAE;gBAChG,IAAI,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,CAAC,CAAC;aACnC;iBAAM;gBACH,IAAI,CAAC,MAAM,GAAG,GAAG,CAAC;gBAClB,OAAO,IAAI,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAC,CAAC;aACvC;SACJ;QACD,IAAI,CAAC,MAAM,GAAG,GAAG,CAAC;QAClB,OAAO,IAAI,CAAC;KACf;;;;;;;;;;;;;;;;;;IAmBD,UAAU,CAAC,CAAS,EAAE,CAAS,EAAE,aAAqB;QAClD,IAAI,UAAU,GAAW,CAAC,CAAC,MAAM,CAAC;QAClC,IAAI,UAAU,GAAW,CAAC,CAAC;QAC3B,IAAI,CAAS,CAAC;QACd,KAAK,IAAI,CAAC,GAAW,CAAC,EAAE,CAAC,GAAG,UAAU,EAAE,EAAE,CAAC,EAAE;YACzC,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YAChB,IAAI,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC,CAAC,EAAE;gBAChG,UAAU,EAAE,CAAC;aAChB;iBAAM,IAAI,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,CAAC,GAAG,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC,CAAC,EAAE;gBACrD,UAAU,IAAI,CAAC,CAAC;aACnB;iBAAM;gBACH,UAAU,IAAI,CAAC,CAAC;aACnB;SACJ;QACD,IAAI,UAAU,GAAG,aAAa,EAAE;YAC5B,MAAM,IAAI,KAAK,EAAE,CAAC;SACrB;QACD,IAAI,KAAK,GAAW,IAAI,CAAC,MAAM,GAAG,CAAC,GAAG,CAAC,CAAC;QACxC,IAAI,KAAK,IAAI,CAAC,EAAE;YACZ,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,UAAU,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;YAC5C,IAAI,CAAC,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,IAAI,UAAU,GAAG,CAAC,CAAC,CAAC;SAC3C;QACD,IAAI,IAAI,CAAC,MAAM,GAAG,UAAU,GAAG,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;YACjD,IAAI,CAAC,OAAO,CAAC,UAAU,GAAG,CAAC,CAAC,CAAC;SAChC;QACD,IAAI,GAAG,GAAW,IAAI,CAAC,MAAM,CAAC;QAC9B,KAAK,IAAI,CAAC,GAAW,CAAC,EAAE,CAAC,GAAG,UAAU,EAAE,EAAE,CAAC,EAAE;YACzC,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YAChB,IAAI,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC,CAAC,EAAE;gBAChG,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,CAAC,CAAC;aACxC;iBAAM,IAAI,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,CAAC,GAAG,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC,CAAC,EAAE;gBACrD,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,CAAC,IAAI,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC;gBAC9D,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC;gBAC7D,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC;aAC3D;iBAAM;gBACH,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC;gBAC7D,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC;aAC3D;SACJ;QACD,IAAI,CAAC,MAAM,GAAG,GAAG,CAAC;QAClB,OAAO,IAAI,CAAC;KACf;;;;;;;;;;;;;;IAeM,YAAY,CAAC,CAAoB,EAAE,GAAW,EAAE,GAAW;QAC9D,IAAI,IAAI,CAAC,MAAM,GAAG,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;YACtC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;SACrB;QACD,IAAI,CAAC,IAAI,IAAI,EAAE;YACX,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE;gBAC1B,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC;aAC3C;;SAEJ;QACD,IAAI,CAAC,MAAM,IAAI,GAAG,CAAC;QACnB,OAAO,IAAI,CAAC;KACf;;;;;;;;IASO,OAAO,CAAC,IAAY;QACxB,IAAI,OAAO,GAAW,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC;QAC3C,IAAI,OAAO,GAAW,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;QACzC,MAAM,MAAM,GAAG,IAAI,UAAU,CAAC,OAAO,GAAG,OAAO,GAAG,OAAO,GAAG,OAAO,CAAC,CAAC;QACrE,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACtB,IAAI,CAAC,IAAI,GAAG,MAAM,CAAC;KACtB;;;SClUW,MAAM,CAAI,CAAW;IACjC,IAAI,CAAC,CAAC,EAAE;QAAE,MAAM,IAAI,KAAK,CAAC,SAAS,CAAC,CAAA;KAAE;AAC1C;;MCwCa,SAAS;;;;;;;IAsBlB,YAAY,IAAmB;;;;QAR/B,SAAI,GAAqB,IAAI,CAAC;QAS1B,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;KACpB;;;;;;;IAQM,SAAS;QACZ,OAAO,IAAI,CAAC;KACf;;;;;;IAOM,eAAe;QAClB,OAAO,KAAK,CAAC;KAChB;;;;;;;IAQD,SAAS;QACL,OAAO,IAAI,CAAC;KACf;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAiCD,IAAI,CAAC,EAAe,EAAE,GAAW,EAAE,GAAW,EAAE,GAAoB,EAAE,OAAe,EAAE,MAAsB;QACzG,IAAI,IAAI,GAAc,IAAI,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC/C,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;;QAElC,OAAO,IAAI,CAAC;KACf;;;;;;;;;;;;;;;;;;;;;;;;;;IA2BD,KAAK,CAAC,EAAe,EAAE,IAAuB,EAAE,GAAW,EAAE,QAAgB,EAAE,SAAiB;QAC5F,IAAI,CAAC,GAAe,IAAI,UAAU,EAAE,CAAC;QACrC,CAAC,CAAC,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC;QACpB,CAAC,CAAC,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC;QAC7B,OAAO,CAAC,CAAC;KACZ;;;;;;IAOD,QAAQ;QACJ,IAAI,KAAK,GAAW,CAAC,CAAC;QACtB,IAAI,IAAI,GAAqB,IAAI,CAAC;QAClC,QAAQ,IAAI,IAAI,IAAI,GAAG;YACnB,KAAK,IAAI,CAAC,CAAC;YACX,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;SACpB;QACD,OAAO,KAAK,CAAC;KAChB;;;;;;;;;;;;;;;;;;;;;;;;;;IA2BD,OAAO,CAAC,EAAe,EAAE,IAAuB,EAAE,GAAW,EAAE,QAAgB,EAAE,SAAiB;QAC9F,IAAI,IAAI,GAAqB,IAAI,CAAC;QAClC,IAAI,IAAI,GAAW,CAAC,CAAC;QACrB,QAAQ,IAAI,IAAI,IAAI,GAAG;YACnB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAClB,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACtB,IAAI,IAAI,IAAI,CAAC,KAAK,CAAC,EAAE,EAAE,IAAI,EAAE,GAAG,EAAE,QAAQ,EAAE,SAAS,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC;YAClE,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;SACpB;QACD,OAAO,IAAI,CAAC;KACf;;;;;;;;;;;;;;;;;;;;;;;;;;;IA4BD,GAAG,CAAC,EAAe,EAAE,IAAuB,EAAE,GAAW,EAAE,QAAgB,EAAE,SAAiB,EAAE,GAAe;QAC3G,IAAI,IAAI,GAAqB,IAAI,CAAC;QAClC,QAAQ,IAAI,IAAI,IAAI,GAAG;YACnB,IAAI,CAAC,GAAe,IAAI,CAAC,KAAK,CAAC,EAAE,EAAE,IAAI,EAAE,GAAG,EAAE,QAAQ,EAAE,SAAS,CAAC,CAAC;YACnE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAClB,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;YACrD,GAAG,CAAC,YAAY,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC;YACtC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;SACpB;KACJ;;;AC9NL;;;;;;;MAOa,IAAI;;;;;;;;;IAgJb,YAAY,IAAY,EAAE,GAAkB,EAAE,GAAW,EAAE,GAAW;QAClE,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC;QACd,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC;QACb,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC;QACb,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,GAAG,GAAG,GAAG,aAAH,GAAG,cAAH,GAAG,GAAI,EAAE,CAAC;QACrB,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;QACf,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;KAClB;;;;;;;IAQD,OAAO,aAAa,CAAC,YAAoB;QACrC,OAAO,IAAI,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,KAAK,GAAG,GAAG,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,MAAM,EAAE,YAAY,EAAE,CAAC,EAAE,YAAY,CAAC,MAAM,CAAC,CAAC;KAC7G;;;;;;;;IASD,OAAO,aAAa,CAAC,gBAAwB;QACzC,OAAO,IAAI,CAAC,OAAO,CAAC,gBAAgB,EAAE,CAAC,CAAC,CAAC;KAC5C;;;;;;;;;IAUD,OAAO,gBAAgB,CAAC,gBAAwB;QAC5C,IAAI,GAAG,GAAW,CAAC,CAAC;QACpB,IAAI,IAAI,GAAW,CAAC,CAAC;QACrB,QAAQ,IAAI,GAAG;YACX,IAAI,GAAG,GAAW,gBAAgB,CAAC,GAAG,EAAE,CAAC,CAAC;YAC1C,IAAI,GAAG,KAAK,GAAG,EAAE;gBACb,MAAM;aACT;iBAAM,IAAI,GAAG,KAAK,GAAG,EAAE;gBACpB,QAAQ,gBAAgB,CAAC,GAAG,EAAE,CAAC,KAAK,GAAG,GAAG;iBACzC;gBACD,EAAE,IAAI,CAAC;aACV;iBAAM,IAAI,GAAG,KAAK,GAAG,EAAE;gBACpB,EAAE,IAAI,CAAC;aACV;SACJ;QACD,IAAI,IAAI,GAAW,IAAI,KAAK,CAAC,IAAI,CAAC,CAAC;QACnC,GAAG,GAAG,CAAC,CAAC;QACR,IAAI,GAAG,CAAC,CAAC;QACT,QAAQ,gBAAgB,CAAC,GAAG,CAAC,KAAK,GAAG,GAAG;YACpC,IAAI,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,gBAAgB,EAAE,GAAG,CAAC,CAAC;YACjD,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,KAAK,IAAI,CAAC,MAAM,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;YAClE,IAAI,IAAI,CAAC,CAAC;SACb;QACD,OAAO,IAAI,CAAC;KACf;;;;;;;;;;;IAYD,OAAO,0BAA0B,CAAC,IAAY;QAC1C,IAAI,CAAC,GAAW,CAAC,CAAC;QAClB,IAAI,CAAC,GAAW,CAAC,CAAC;QAClB,QAAQ,IAAI,GAAG;YACX,IAAI,GAAG,GAAW,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC;YACnC,IAAI,GAAG,KAAK,GAAG,EAAE;gBACb,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;gBACrB,OAAO,CAAC,IAAI,CAAC,IAAI,GAAG,KAAK,GAAG,GAAG,CAAC,IAAI,GAAG,KAAK,GAAG,IAAI,GAAG,KAAK,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aAC5E;iBAAM,IAAI,GAAG,KAAK,GAAG,EAAE;gBACpB,QAAQ,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,KAAK,GAAG,GAAG;iBAClC;gBACD,CAAC,IAAI,CAAC,CAAC;aACV;iBAAM,IAAI,GAAG,KAAK,GAAG,EAAE;gBACpB,QAAQ,CAAC,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,GAAG,GAAG;oBACrC,EAAE,CAAC,CAAC;iBACP;gBACD,IAAI,GAAG,KAAK,GAAG,IAAI,GAAG,KAAK,GAAG,EAAE;oBAC5B,CAAC,IAAI,CAAC,CAAC;iBACV;aACJ;iBAAM,IAAI,GAAG,KAAK,GAAG,IAAI,GAAG,KAAK,GAAG,EAAE;gBACnC,CAAC,IAAI,CAAC,CAAC;aACV;iBAAM;gBACH,CAAC,IAAI,CAAC,CAAC;aACV;SACJ;QACD,OAAO,CAAC,CAAC;KACZ;;;;;;;;;;IAWD,OAAO,OAAO,CAAC,GAAW,EAAE,MAAc,CAAC;QACvC,IAAI,GAAW,CAAC;QAChB,IAAI,GAAG,GAAG,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;QACzB,QAAQ,GAAG,CAAC,GAAG,CAAC;YACZ,KAAK,GAAG;gBACJ,OAAO,IAAI,CAAC,SAAS,CAAC;YAC1B,KAAK,GAAG;gBACJ,OAAO,IAAI,CAAC,YAAY,CAAC;YAC7B,KAAK,GAAG;gBACJ,OAAO,IAAI,CAAC,SAAS,CAAC;YAC1B,KAAK,GAAG;gBACJ,OAAO,IAAI,CAAC,SAAS,CAAC;YAC1B,KAAK,GAAG;gBACJ,OAAO,IAAI,CAAC,UAAU,CAAC;YAC3B,KAAK,GAAG;gBACJ,OAAO,IAAI,CAAC,QAAQ,CAAC;YACzB,KAAK,GAAG;gBACJ,OAAO,IAAI,CAAC,UAAU,CAAC;YAC3B,KAAK,GAAG;gBACJ,OAAO,IAAI,CAAC,SAAS,CAAC;YAC1B,KAAK,GAAG;gBACJ,OAAO,IAAI,CAAC,WAAW,CAAC;YAC5B,KAAK,GAAG;gBACJ,GAAG,GAAG,CAAC,CAAC;gBACR,QAAQ,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,KAAK,GAAG,GAAG;oBAC7B,EAAE,GAAG,CAAC;iBACT;gBACD,IAAI,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,KAAK,GAAG,EAAE;oBACxB,EAAE,GAAG,CAAC;oBACN,QAAQ,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,KAAK,GAAG,GAAG;wBAC7B,EAAE,GAAG,CAAC;qBACT;iBACJ;gBACD,OAAO,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,GAAG,CAAC,CAAC,CAAC;YACnD,KAAK,GAAG;gBACJ,GAAG,GAAG,CAAC,CAAC;gBACR,QAAQ,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,KAAK,GAAG,GAAG;oBAC7B,EAAE,GAAG,CAAC;iBACT;gBACD,OAAO,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,EAAE,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,CAAC,CAAC,CAAC;YACxD;gBACI,OAAO,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,MAAM,GAAG,GAAG,CAAC,CAAC;SAChE;KACJ;;;;;;;;;IAUD,IAAI,YAAY;QACZ,OAAO,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;KAC9C;;;;;;;IAQD,aAAa,CAAC,MAAW,EAAE;QACvB,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,MAAM,EAAE;YAC1B,GAAG,KAAK,GAAG,CAAC,CAAC;YACb,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC,EAAE,EAAE;gBAC/B,GAAG,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC;aACjC;;YAED,GAAG,KAAK,GAAG,CAAC,CAAC;SAChB;aACI;YACD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC,EAAE,EAAE;gBAC/B,GAAG,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC;aACjC;;SAEJ;KACJ;;;;;;;;IASD,IAAI,IAAI;QACJ,OAAO,IAAI,CAAC,GAAG,IAAI,IAAI,IAAI,IAAI,CAAC,GAAG,GAAG,GAAG,IAAI,CAAC,CAAC;KAClD;;;;;;;IAQD,MAAM,CAAC,CAAM;QACT,IAAI,IAAI,KAAK,CAAC,EAAE;YACZ,OAAO,IAAI,CAAC;SACf;QACD,IAAI,EAAE,CAAC,IAAI,IAAI,IAAI,CAAC,YAAY,IAAI,CAAC,EAAE;YACnC,OAAO,KAAK,CAAC;SAChB;QACD,IAAI,CAAC,GAAS,CAAC,CAAC;QAChB,IAAI,IAAI,CAAC,IAAI,KAAK,CAAC,CAAC,IAAI,EAAE;YACtB,OAAO,KAAK,CAAC;SAChB;QACD,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,KAAK,EAAE;YACzB,IAAI,IAAI,CAAC,GAAG,KAAK,CAAC,CAAC,GAAG,EAAE;gBACpB,OAAO,KAAK,CAAC;aAChB;YACD,KAAK,IAAI,CAAC,GAAW,IAAI,CAAC,GAAG,EAAE,CAAC,GAAW,CAAC,CAAC,GAAG,EAAE,GAAG,GAAW,CAAC,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAG,CAAC,EAAE,EAAE;gBAC9F,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE;oBAC1B,OAAO,KAAK,CAAC;iBAChB;aACJ;SACJ;QACD,OAAO,IAAI,CAAC;KACf;;;;;;IAOD,QAAQ;QACJ,IAAI,EAAE,GAAW,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC;QAChC,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,KAAK,EAAE;YACzB,KAAK,IAAI,CAAC,GAAW,IAAI,CAAC,GAAG,EAAE,GAAG,GAAW,CAAC,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE;gBACrE,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;aAChD;SACJ;QACD,OAAO,EAAE,CAAC;KACb;;;;;;IAOD,QAAQ;QACJ,OAAO,IAAI,CAAC,aAAa,EAAE,CAAC;KAC/B;;AA9YD;;;AAGgB,SAAI,GAAW,CAAC,CAAC;AAEjC;;;AAGgB,YAAO,GAAW,CAAC,CAAC;AAEpC;;;AAGgB,SAAI,GAAW,CAAC,CAAC;AAEjC;;;AAGgB,SAAI,GAAW,CAAC,CAAC;AAEjC;;;AAGgB,UAAK,GAAW,CAAC,CAAC;AAElC;;;AAGgB,QAAG,GAAW,CAAC,CAAC;AAEhC;;;AAGgB,UAAK,GAAW,CAAC,CAAC;AAElC;;;AAGgB,SAAI,GAAW,CAAC,CAAC;AAEjC;;;AAGgB,WAAM,GAAW,CAAC,CAAC;AAEnC;;;AAGgB,UAAK,GAAW,CAAC,CAAC;AAElC;;;AAGgB,WAAM,GAAW,EAAE,CAAC;AAEpC;;;AAGgB,WAAM,GAAW,EAAE,CAAC;AAEpC;;;AAGgB,cAAS,GAAS,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC,IAAI,EAAE,KAAK,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;AAExG;;;AAGgB,iBAAY,GAAS,IAAI,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC,IAAI,EAAE,KAAK,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;AAEjH;;;AAGgB,cAAS,GAAS,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC,IAAI,EAAE,KAAK,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;AAE3G;;;AAGgB,cAAS,GAAS,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC,IAAI,EAAE,KAAK,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;AAE3G;;;AAGgB,eAAU,GAAS,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC,IAAI,EAAE,KAAK,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;AAE7G;;;AAGgB,aAAQ,GAAS,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,EAAE,CAAC,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC,IAAI,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC;AAE9F;;;AAGgB,eAAU,GAAS,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC,IAAI,EAAE,KAAK,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;AAEzH;;;AAGgB,cAAS,GAAS,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC,IAAI,EAAE,KAAK,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;AAEvH;;;AAGgB,gBAAW,GAAS,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC,IAAI,EAAE,KAAK,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;;AC/I9H;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8CA;MAEa,gBAAiB,SAAQ,iBAAiB;;;;;;;;;;;;;;;;IA8DnD,YAAY,EAAe,EAAE,KAAc,EAAE,EAAc,EAAE,SAA4B,IAAI,EAAE,MAAc;QACzG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;;;;QAvBxB,SAAI,GAA4B,IAAI,CAAC;;;;QAKrC,SAAI,GAA4B,IAAI,CAAC;QAmBjC,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC;QACd,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;QAChB,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC;QACb,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC;QACb,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;KACxB;IAEM,KAAK,CAAC,IAAY,EAAE,KAAU;QACjC,EAAE,IAAI,CAAC,IAAI,CAAC;QACZ,IAAI,IAAI,CAAC,KAAK,EAAE;YACZ,IAAI,CAAC,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;SAC3C;QACD,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;YAC3B,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC;SAC9D;aAAM,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;YAClC,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC;SACvE;aAAM,IAAI,OAAO,KAAK,KAAK,SAAS,EAAE;YACnC,IAAI,CAAC,GAAW,CAAC,KAAK,IAAI,CAAC,GAAG,CAAC,CAAC;YAChC,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;SACnE;aAAM,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;YAClC,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,CAAC,KAAK,EAAE,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;SACvF;aAAM,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;YAClC,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,EAAE,CAAC,UAAU,EAAE,KAAK,EAAE,CAAC,KAAK,CAAC,CAAC;SACzE;aAAM,IAAI,KAAK,IAAI,IAAI,IAAI,KAAK,YAAY,IAAI,EAAE;YAC/C,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,aAAa,EAAE,CAAC,CAAC,CAAC;SAChF;aAAM,IAAI,KAAK,IAAI,IAAI,IAAI,KAAK,YAAY,KAAK,EAAE;YAChD,IAAI,CAAC,GAAa,KAAiB,CAAC;YACpC,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC;YAC7C,KAAK,IAAI,CAAC,GAAW,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBACvC,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;aACtE;SACJ;aAAM,IAAI,KAAK,IAAI,IAAI,IAAI,KAAK,YAAY,KAAK,EAAE;YAChD,IAAI,CAAC,GAAyB,KAAK,CAAC;YACpC,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC;YAC7C,KAAK,IAAI,CAAC,GAAW,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBACvC,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;aAC9E;SACJ;aAAM,IAAI,KAAK,IAAI,IAAI,IAAI,KAAK,YAAY,KAAK,EAAE;YAChD,IAAI,CAAC,GAAa,KAAiB,CAAC;YACpC,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC;YAC7C,KAAK,IAAI,CAAC,GAAW,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBACvC,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;aACtE;SACJ;aAAM,IAAI,KAAK,IAAI,IAAI,IAAI,KAAK,YAAY,KAAK,EAAE;YAChD,IAAI,CAAC,GAAuB,KAAK,CAAC;YAClC,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC;YAC7C,KAAK,IAAI,CAAC,GAAW,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBACvC,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;aACtF;SACJ;aAAM,IAAI,KAAK,IAAI,IAAI,IAAI,KAAK,YAAY,KAAK,EAAE;YAChD,IAAI,CAAC,GAAa,KAAiB,CAAC;YACpC,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC;YAC7C,KAAK,IAAI,CAAC,GAAW,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBACvC,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;aACtE;SACJ;aAAM,IAAI,KAAK,IAAI,IAAI,IAAI,KAAK,YAAY,KAAK,EAAE;YAChD,IAAI,CAAC,GAAa,KAAiB,CAAC;YACpC,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC;YAC7C,KAAK,IAAI,CAAC,GAAW,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;;;aAG1C;SACJ;aAAM,IAAI,KAAK,IAAI,IAAI,IAAI,KAAK,YAAY,KAAK,EAAE;YAChD,IAAI,CAAC,GAAa,KAAiB,CAAC;YACpC,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC;YAC7C,KAAK,IAAI,CAAC,GAAW,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBACvC,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;aACpE;SACJ;aAAM,IAAI,KAAK,IAAI,IAAI,IAAI,KAAK,YAAY,KAAK,EAAE;YAChD,IAAI,CAAC,GAAa,KAAiB,CAAC;YACpC,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC;YAC7C,KAAK,IAAI,CAAC,GAAW,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBACvC,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;aACrE;SACJ;aAAM;YACH,IAAI,CAAC,GAAS,IAAI,CAAC,EAAE,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;YAC1C,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC;SACtE;KACJ;IAEM,SAAS,CAAC,IAAY,EAAE,IAAY,EAAE,KAAa;QACtD,EAAE,IAAI,CAAC,IAAI,CAAC;QACZ,IAAI,IAAI,CAAC,KAAK,EAAE;YACZ,IAAI,CAAC,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;SAC3C;QACD,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC;KAC9F;IAEM,eAAe,CAAC,IAAY,EAAE,IAAY;QAC7C,EAAE,IAAI,CAAC,IAAI,CAAC;QACZ,IAAI,IAAI,CAAC,KAAK,EAAE;YACZ,IAAI,CAAC,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;SAC3C;QACD,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;QACtE,OAAO,IAAI,gBAAgB,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,EAAE,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;KACpF;IAEM,UAAU,CAAC,IAAY;QAC1B,EAAE,IAAI,CAAC,IAAI,CAAC;QACZ,IAAI,IAAI,CAAC,KAAK,EAAE;YACZ,IAAI,CAAC,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;SAC3C;QACD,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QACtC,OAAO,IAAI,gBAAgB,CAAC,IAAI,CAAC,EAAE,EAAE,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,EAAE,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;KACrF;IAEM,QAAQ;QACX,IAAI,IAAI,CAAC,MAAM,IAAI,IAAI,EAAE;YACrB,IAAI,IAAI,GAAe,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;YACxC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;YAC5C,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC;SAC3C;KACJ;;;;;;IAOD,OAAO;QACH,IAAI,IAAI,GAAW,CAAC,CAAC;QACrB,IAAI,EAAE,GAA4B,IAAI,CAAC;QACvC,QAAQ,EAAE,IAAI,IAAI,GAAG;YACjB,IAAI,IAAI,EAAE,CAAC,EAAE,CAAC,MAAM,CAAC;YACrB,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC;SAChB;QACD,OAAO,IAAI,CAAC;KACf;;;;;;;;IASD,GAAG,CAAC,GAAe;QACf,IAAI,CAAC,GAAW,CAAC,CAAC;QAClB,IAAI,IAAI,GAAW,CAAC,CAAC;QACrB,IAAI,EAAE,GAA4B,IAAI,CAAC;QACvC,IAAI,IAAI,GAA4B,IAAI,CAAC;QACzC,QAAQ,EAAE,IAAI,IAAI,GAAG;YACjB,EAAE,CAAC,CAAC;YACJ,IAAI,IAAI,EAAE,CAAC,EAAE,CAAC,MAAM,CAAC;YACrB,EAAE,CAAC,QAAQ,EAAE,CAAC;YACd,EAAE,CAAC,IAAI,GAAG,IAAI,CAAC;YACf,IAAI,GAAG,EAAE,CAAC;YACV,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC;SAChB;QACD,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QACjB,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;QAChB,EAAE,GAAG,IAAI,CAAC;QACV,QAAQ,EAAE,IAAI,IAAI,GAAG;YACjB,GAAG,CAAC,YAAY,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC;YAC9C,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC;SAChB;KACJ;;;;;;;;;;;IAYD,OAAO,GAAG,CAAC,KAAyB,EAAE,GAAW,EAAE,GAAe;QAC9D,IAAI,IAAI,GAAW,CAAC,GAAG,CAAC,IAAI,KAAK,CAAC,MAAM,GAAG,GAAG,CAAC,CAAC;QAChD,KAAK,IAAI,CAAC,GAAW,GAAG,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;YAC7C,IAAI,IAAI,KAAK,CAAC,CAAC,CAAC,IAAI,IAAI,GAAG,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC;SACrD;QACD,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,MAAM,GAAG,GAAG,CAAC,CAAC;QAC7C,KAAK,IAAI,CAAC,GAAW,GAAG,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;YAC7C,IAAI,EAAE,GAA4B,KAAK,CAAC,CAAC,CAAC,CAAC;YAC3C,IAAI,IAAI,GAA4B,IAAI,CAAC;YACzC,IAAI,CAAC,GAAW,CAAC,CAAC;YAClB,QAAQ,EAAE,IAAI,IAAI,GAAG;gBACjB,EAAE,CAAC,CAAC;gBACJ,EAAE,CAAC,QAAQ,EAAE,CAAC;gBACd,EAAE,CAAC,IAAI,GAAG,IAAI,CAAC;gBACf,IAAI,GAAG,EAAE,CAAC;gBACV,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC;aAChB;YACD,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;YAChB,EAAE,GAAG,IAAI,CAAC;YACV,QAAQ,EAAE,IAAI,IAAI,GAAG;gBACjB,GAAG,CAAC,YAAY,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC;gBAC9C,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC;aAChB;SACJ;KACJ;;;;;;;;;;;;;;IAeD,OAAO,SAAS,CAAC,OAAe,EAAE,QAAkB,EAAE,GAAe;QACjE,SAAS,OAAO,KAAK,EAAE;YACnB,KAAK,CAAC,CAAC;YACP,KAAK,CAAC,CAAC;YACP,KAAK,EAAE;gBACH,GAAG,CAAC,QAAQ,CAAC,OAAO,KAAK,EAAE,CAAC,CAAC;gBAC7B,MAAM;YACV,KAAK,EAAE,CAAC;YACR,KAAK,EAAE,CAAC;YACR,KAAK,EAAE;gBACH,GAAG,CAAC,OAAO,CAAC,OAAO,KAAK,EAAE,CAAC,CAAC;gBAC5B,MAAM;YACV,KAAK,EAAE,CAAC;YACR,KAAK,EAAE,CAAC;YACR,KAAK,EAAE,CAAC;YACR,KAAK,EAAE,CAAC;YACR,KAAK,EAAE;gBACH,GAAG,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;gBACpB,MAAM;YACV;gBACI,GAAG,CAAC,KAAK,CAAC,OAAO,KAAK,EAAE,EAAE,CAAC,OAAO,GAAG,QAAQ,KAAK,CAAC,CAAC,CAAC;gBACrD,MAAM;SACb;QACD,IAAI,QAAQ,IAAI,IAAI,EAAE;YAClB,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;SAClB;aAAM;YACH,IAAI,MAAM,GAAW,QAAQ,CAAC,GAAG,CAAC,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YAC3D,GAAG,CAAC,YAAY,CAAC,QAAQ,CAAC,GAAG,EAAE,QAAQ,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;SAC3D;KACJ;;;AC/VL;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MA8CsB,YAAY;;;;;;;;;;;IAuB9B,YAAmB,GAAW,EAAE,KAA0B,IAAI;QAC1D,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC;QACb,IAAI,GAAG,KAAK,OAAO,CAAC,IAAI,IAAI,GAAG,KAAK,OAAO,CAAC,IAAI,EAAE;YAC9C,MAAM,IAAI,KAAK,EAAE,CAAC;SACrB;QACD,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;QACf,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC;KAChB;;;;;;;;;;;;;;;;;;;;;;;;;;IA2BM,KAAK,CAAC,OAAe,EAAE,MAAc,EAAE,IAAY,EAAE,SAAwB,EAAE,SAAwB,EAAE,UAA2B;QACvI,IAAI,IAAI,CAAC,EAAE,IAAI,IAAI,EAAE;YACjB,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,OAAO,EAAE,MAAM,EAAE,IAAI,EAAE,SAAS,EAAE,SAAS,EAAE,UAAU,CAAC,CAAC;SAC1E;KACJ;;;;;;;;;;;;IAaM,WAAW,CAAC,MAAqB,EAAE,KAAoB;QAC1D,IAAI,IAAI,CAAC,EAAE,IAAI,IAAI,EAAE;YACjB,IAAI,CAAC,EAAE,CAAC,WAAW,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;SACtC;KACJ;;;;;;;;;;;;;;;;IAiBM,eAAe,CAAC,KAAa,EAAE,IAAmB,EAAE,IAAmB;QAC1E,IAAI,IAAI,CAAC,EAAE,IAAI,IAAI,EAAE;YACjB,IAAI,CAAC,EAAE,CAAC,eAAe,CAAC,KAAK,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;SAC9C;KACJ;;;;;;;;;;;IAYM,eAAe,CAAC,IAAmB,EAAE,OAAgB;QACxD,IAAI,IAAI,CAAC,EAAE,IAAI,IAAI,EAAE;YACjB,OAAO,IAAI,CAAC,EAAE,CAAC,eAAe,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;SACjD;QACD,OAAO,IAAI,CAAC;KACf;;;;;;;;;;;;;;;;;;;;;;;IAwBM,mBAAmB,CAAC,OAAe,EAAE,QAAyB,EAAE,IAAmB,EAAE,OAAgB;QACxG,IAAI,IAAI,CAAC,GAAG,GAAG,OAAO,CAAC,IAAI,EAAE;YACzB,MAAM,IAAI,KAAK,EAAE,CAAC;SACrB;QACD,IAAI,IAAI,CAAC,EAAE,IAAI,IAAI,EAAE;YACjB,OAAO,IAAI,CAAC,EAAE,CAAC,mBAAmB,CAAC,OAAO,EAAE,QAAQ,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;SACxE;QACD,OAAO,IAAI,CAAC;KACf;;;;;;;IAQM,cAAc,CAAC,IAAe;QACjC,IAAI,IAAI,CAAC,EAAE,IAAI,IAAI,EAAE;YACjB,IAAI,CAAC,EAAE,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;SAChC;KACJ;;;;;;;;;;;;;;;;;;;IAoBM,eAAe,CAAC,IAAY,EAAE,SAAiB,EAAE,SAAwB,EAAE,MAAc;QAC5F,IAAI,IAAI,CAAC,EAAE,IAAI,IAAI,EAAE;YACjB,IAAI,CAAC,EAAE,CAAC,eAAe,CAAC,IAAI,EAAE,SAAS,EAAE,SAAS,EAAE,MAAM,CAAC,CAAC;SAC/D;KACJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;IA6BM,UAAU,CAAC,MAAc,EAAE,IAAY,EAAE,IAAmB,EAAE,SAAwB,EAAE,KAAU;QACrG,IAAI,IAAI,CAAC,EAAE,IAAI,IAAI,EAAE;YACjB,OAAO,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,SAAS,EAAE,KAAK,CAAC,CAAC;SACnE;QACD,OAAO,IAAI,CAAC;KACf;;;;;;;;;;;;;;;;;;;;;;;;;;IA2BM,WAAW,CAAC,MAAc,EAAE,IAAY,EAAE,IAAY,EAAE,SAAwB,EAAE,UAA2B;QAChH,IAAI,IAAI,CAAC,EAAE,IAAI,IAAI,EAAE;YACjB,OAAO,IAAI,CAAC,EAAE,CAAC,WAAW,CAAC,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,SAAS,EAAE,UAAU,CAAC,CAAC;SACzE;QACD,OAAO,IAAI,CAAC;KACf;;;;;;IAOM,QAAQ;QACX,IAAI,IAAI,CAAC,EAAE,IAAI,IAAI,EAAE;YACjB,IAAI,CAAC,EAAE,CAAC,QAAQ,EAAE,CAAC;SACtB;KACJ;;;ACnTL;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MA0CsB,YAAY;;;;;;;;;;;IAuB9B,YAAmB,GAAW,EAAE,KAA0B,IAAI;QAC1D,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC;QACb,IAAI,GAAG,KAAK,OAAO,CAAC,IAAI,IAAI,GAAG,KAAK,OAAO,CAAC,IAAI,EAAE;YAC9C,MAAM,IAAI,KAAK,EAAE,CAAC;SACrB;QACD,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;QACf,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC;KAChB;;;;;;;;;;;IAYM,eAAe,CAAC,IAAmB,EAAE,OAAgB;QACxD,IAAI,IAAI,CAAC,EAAE,IAAI,IAAI,EAAE;YACjB,OAAO,IAAI,CAAC,EAAE,CAAC,eAAe,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;SACjD;QACD,OAAO,IAAI,CAAC;KACf;;;;;;;;;;;;;;;;;;;IAoBM,mBAAmB,CAAC,OAAe,EAAE,QAAyB,EAAE,IAAmB,EAAE,OAAgB;QACxG,IAAI,IAAI,CAAC,GAAG,GAAG,OAAO,CAAC,IAAI,EAAE;YACzB,MAAM,IAAI,KAAK,EAAE,CAAC;SACrB;QACD,IAAI,IAAI,CAAC,EAAE,IAAI,IAAI,EAAE;YACjB,OAAO,IAAI,CAAC,EAAE,CAAC,mBAAmB,CAAC,OAAO,EAAE,QAAQ,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;SACxE;QACD,OAAO,IAAI,CAAC;KACf;;;;;;;IAQM,cAAc,CAAC,IAAe;QACjC,IAAI,IAAI,CAAC,EAAE,IAAI,IAAI,EAAE;YACjB,IAAI,CAAC,EAAE,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;SAChC;KACJ;;;;;;IAOM,QAAQ;QACX,IAAI,IAAI,CAAC,EAAE,IAAI,IAAI,EAAE;YACjB,IAAI,CAAC,EAAE,CAAC,QAAQ,EAAE,CAAC;SACtB;KACJ;;;MC/FQ,WAAY,SAAQ,YAAY;;;;;;;;;;;;;;;;;IA6EzC,YAAY,EAAe,EAAE,MAAc,EAAE,IAAY,EAAE,IAAY,EAAE,SAAiB,EAAE,KAAU;QAClG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QACpB,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;QAChB,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC;QACd,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC;QACd,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC;QACnB,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC;QACf,IAAI,EAAE,CAAC,UAAU,IAAI,IAAI,EAAE;YACvB,EAAE,CAAC,UAAU,GAAG,IAAI,CAAC;SACxB;aAAM;YACH,EAAE,CAAC,SAAS,CAAC,EAAE,GAAG,IAAI,CAAC;SAC1B;QACD,EAAE,CAAC,SAAS,GAAG,IAAI,CAAC;QACpB,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC;QACb,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,IAAI,GAAG,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAC7B,IAAI,CAAC,IAAI,GAAG,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAC7B,IAAI,WAAW,CAAC,UAAU,IAAI,SAAS,IAAI,IAAI,EAAE;YAC7C,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;SAC1C;QACD,IAAI,KAAK,IAAI,IAAI,EAAE;YACf,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC;SAC7C;KACJ;IAEM,eAAe,CAAC,IAAY,EAAE,OAAgB;QACjD,IAAI,CAAC,WAAW,CAAC,WAAW,EAAE;YAC1B,OAAO,IAAI,CAAC;SACf;QACD,IAAI,EAAE,GAAe,IAAI,UAAU,EAAE,CAAC;QACtC,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;QAC/C,IAAI,EAAE,GAAqB,IAAI,gBAAgB,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC;QAC1E,IAAI,OAAO,EAAE;YACT,EAAE,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;YACpB,IAAI,CAAC,IAAI,GAAG,EAAE,CAAC;SAClB;aAAM;YACH,EAAE,CAAC,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC;YACrB,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC;SACnB;QACD,OAAO,EAAE,CAAC;KACb;IAEM,mBAAmB,CAAC,OAAe,EAAE,QAAkB,EAAE,IAAY,EAAE,OAAgB;QAC1F,IAAI,CAAC,WAAW,CAAC,WAAW,EAAE;YAC1B,OAAO,IAAI,CAAC;SACf;QACD,IAAI,EAAE,GAAe,IAAI,UAAU,EAAE,CAAC;QACtC,gBAAgB,CAAC,SAAS,CAAC,OAAO,EAAE,QAAQ,EAAE,EAAE,CAAC,CAAC;QAClD,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;QAC/C,IAAI,EAAE,GAAqB,IAAI,gBAAgB,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QACtF,IAAI,OAAO,EAAE;YACT,EAAE,CAAC,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC;YACrB,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC;SACnB;aAAM;YACH,EAAE,CAAC,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC;YACtB,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;SACpB;QACD,OAAO,EAAE,CAAC;KACb;IAEM,cAAc,CAAC,IAAe;QACjC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC;QACvB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;KACrB;IAEM,QAAQ;KACd;;;;;;IAOD,OAAO;QACH,IAAI,IAAI,GAAW,CAAC,CAAC;QACrB,IAAI,IAAI,CAAC,KAAK,KAAK,CAAC,EAAE;YAClB,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC;YACjC,IAAI,IAAI,CAAC,CAAC;SACb;QACD,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,aAAa,MAAM,CAAC,EAAE;YAC7C,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,OAAO,GAAG,KAAK,IAAI,OAAO,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,WAAW,CAAC,uBAAuB,MAAM,CAAC,EAAE;gBACvG,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;gBAC7B,IAAI,IAAI,CAAC,CAAC;aACb;SACJ;QACD,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,cAAc,MAAM,CAAC,EAAE;YAC9C,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;YAC9B,IAAI,IAAI,CAAC,CAAC;SACb;QACD,IAAI,WAAW,CAAC,UAAU,IAAI,IAAI,CAAC,SAAS,KAAK,CAAC,EAAE;YAChD,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;YAC7B,IAAI,IAAI,CAAC,CAAC;SACb;QACD,IAAI,WAAW,CAAC,WAAW,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,EAAE;YAC9C,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,2BAA2B,CAAC,CAAC;YAC7C,IAAI,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC;SACnC;QACD,IAAI,WAAW,CAAC,WAAW,IAAI,IAAI,CAAC,KAAK,IAAI,IAAI,EAAE;YAC/C,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,6BAA6B,CAAC,CAAC;YAC/C,IAAI,IAAI,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC;SACpC;QACD,IAAI,WAAW,CAAC,WAAW,IAAI,IAAI,CAAC,KAAK,IAAI,IAAI,EAAE;YAC/C,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,+BAA+B,CAAC,CAAC;YACjD,IAAI,IAAI,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC;SACpC;QACD,IAAI,WAAW,CAAC,WAAW,IAAI,IAAI,CAAC,MAAM,IAAI,IAAI,EAAE;YAChD,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,iCAAiC,CAAC,CAAC;YACnD,IAAI,IAAI,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC;SACrC;QACD,IAAI,IAAI,CAAC,KAAK,IAAI,IAAI,EAAE;YACpB,IAAI,IAAI,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;SACxD;QACD,OAAO,IAAI,CAAC;KACf;;;;;;;IAQD,GAAG,CAAC,GAAe;QACf,IAAI,MAAM,GAAW,WAAW,CAAC,qBAAqB,EAAE,CAAC;QACzD,IAAI,IAAI,GAAW,OAAO,CAAC,cAAc,GAAG,WAAW,CAAC,uBAAuB,KAAK,CAAC,IAAI,CAAC,MAAM,GAAG,WAAW,CAAC,uBAAuB,IAAI,MAAM,GAAG,CAAC,EAAE,CAAC;QACvJ,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC1E,IAAI,cAAc,GAAW,CAAC,CAAC;QAC/B,IAAI,IAAI,CAAC,KAAK,KAAK,CAAC,EAAE;YAClB,EAAE,cAAc,CAAC;SACpB;QACD,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,aAAa,MAAM,CAAC,EAAE;YAC7C,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,OAAO,GAAG,KAAK,IAAI,OAAO,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,WAAW,CAAC,uBAAuB,MAAM,CAAC,EAAE;gBACvG,EAAE,cAAc,CAAC;aACpB;SACJ;QACD,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,cAAc,MAAM,CAAC,EAAE;YAC9C,EAAE,cAAc,CAAC;SACpB;QACD,IAAI,WAAW,CAAC,UAAU,IAAI,IAAI,CAAC,SAAS,KAAK,CAAC,EAAE;YAChD,EAAE,cAAc,CAAC;SACpB;QACD,IAAI,WAAW,CAAC,WAAW,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,EAAE;YAC9C,EAAE,cAAc,CAAC;SACpB;QACD,IAAI,WAAW,CAAC,WAAW,IAAI,IAAI,CAAC,KAAK,IAAI,IAAI,EAAE;YAC/C,EAAE,cAAc,CAAC;SACpB;QACD,IAAI,WAAW,CAAC,WAAW,IAAI,IAAI,CAAC,KAAK,IAAI,IAAI,EAAE;YAC/C,EAAE,cAAc,CAAC;SACpB;QACD,IAAI,WAAW,CAAC,WAAW,IAAI,IAAI,CAAC,MAAM,IAAI,IAAI,EAAE;YAChD,EAAE,cAAc,CAAC;SACpB;QACD,IAAI,IAAI,CAAC,KAAK,IAAI,IAAI,EAAE;YACpB,cAAc,IAAI,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC;SAC3C;QACD,GAAG,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAC;QAC7B,IAAI,IAAI,CAAC,KAAK,KAAK,CAAC,EAAE;YAClB,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC,CAAC;YAC/C,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SACtC;QACD,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,aAAa,MAAM,CAAC,EAAE;YAC7C,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,OAAO,GAAG,KAAK,IAAI,OAAO,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,WAAW,CAAC,uBAAuB,MAAM,CAAC,EAAE;gBACvG,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;aACxD;SACJ;QACD,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,cAAc,MAAM,CAAC,EAAE;YAC9C,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;SACzD;QACD,IAAI,WAAW,CAAC,UAAU,IAAI,IAAI,CAAC,SAAS,KAAK,CAAC,EAAE;YAChD,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC;YAC3C,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;SAC1C;QACD,IAAI,WAAW,CAAC,WAAW,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,EAAE;YAC9C,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,2BAA2B,CAAC,CAAC,CAAC;YAC3D,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;SACtB;QACD,IAAI,WAAW,CAAC,WAAW,IAAI,IAAI,CAAC,KAAK,IAAI,IAAI,EAAE;YAC/C,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,6BAA6B,CAAC,CAAC,CAAC;YAC7D,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;SACvB;QACD,IAAI,WAAW,CAAC,WAAW,IAAI,IAAI,CAAC,KAAK,IAAI,IAAI,EAAE;YAC/C,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,+BAA+B,CAAC,CAAC,CAAC;YAC/D,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;SACvB;QACD,IAAI,WAAW,CAAC,WAAW,IAAI,IAAI,CAAC,MAAM,IAAI,IAAI,EAAE;YAChD,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,iCAAiC,CAAC,CAAC,CAAC;YACjE,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;SACxB;QACD,IAAI,IAAI,CAAC,KAAK,IAAI,IAAI,EAAE;YACpB,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;SACjD;KACJ;;;;;;;;;;;;;;ACzTL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,SAAS,MAAM,EAAE,OAAO,EAAE;AAC3B;AACA,cAEwB,IAAI,OAAOA,eAAO,KAAK,UAAU,IAAI,QAAa,KAAK,QAAQ,IAAI,MAAM,IAAI,MAAM,CAAC,SAAS,CAAC;AACtH,QAAQ,MAAM,CAAC,SAAS,CAAC,GAAG,OAAO,EAAE,CAAC;AACtC;AACA,QAAQ,CAAC,MAAM,CAAC,SAAS,CAAC,GAAG,MAAM,CAAC,SAAS,CAAC,IAAI,EAAE,EAAE,MAAM,CAAC,GAAG,OAAO,EAAE,CAAC;AAC1E;AACA,CAAC,EAAEC,cAAI,EAAE,WAAW;AAEpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,SAAS,IAAI,CAAC,GAAG,EAAE,IAAI,EAAE,QAAQ,EAAE;AACvC;AACA;AACA;AACA;AACA;AACA,QAAQ,IAAI,CAAC,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;AAC3B;AACA;AACA;AACA;AACA;AACA,QAAQ,IAAI,CAAC,IAAI,GAAG,IAAI,GAAG,CAAC,CAAC;AAC7B;AACA;AACA;AACA;AACA;AACA,QAAQ,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC,QAAQ,CAAC;AACnC,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC;AAC9B;AACA,IAAI,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,SAAS,EAAE,YAAY,EAAE;AACxD,QAAQ,KAAK,EAAE,IAAI;AACnB,QAAQ,UAAU,EAAE,KAAK;AACzB,QAAQ,YAAY,EAAE,KAAK;AAC3B,KAAK,CAAC,CAAC;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,SAAS,MAAM,CAAC,GAAG,EAAE;AACzB,QAAQ,OAAO,CAAC,GAAG,IAAI,GAAG,CAAC,YAAY,CAAC,MAAM,IAAI,CAAC;AACnD,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,IAAI,SAAS,GAAG,EAAE,CAAC;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,IAAI,UAAU,GAAG,EAAE,CAAC;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,SAAS,OAAO,CAAC,KAAK,EAAE,QAAQ,EAAE;AACtC,QAAQ,IAAI,GAAG,EAAE,SAAS,EAAE,KAAK,CAAC;AAClC,QAAQ,IAAI,QAAQ,EAAE;AACtB,YAAY,KAAK,MAAM,CAAC,CAAC;AACzB,YAAY,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,IAAI,KAAK,GAAG,GAAG,CAAC,EAAE;AACrD,gBAAgB,SAAS,GAAG,UAAU,CAAC,KAAK,CAAC,CAAC;AAC9C,gBAAgB,IAAI,SAAS;AAC7B,oBAAoB,OAAO,SAAS,CAAC;AACrC,aAAa;AACb,YAAY,GAAG,GAAG,QAAQ,CAAC,KAAK,EAAE,CAAC,KAAK,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,EAAE,IAAI,CAAC,CAAC;AAClE,YAAY,IAAI,KAAK;AACrB,gBAAgB,UAAU,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC;AACxC,YAAY,OAAO,GAAG,CAAC;AACvB,SAAS,MAAM;AACf,YAAY,KAAK,IAAI,CAAC,CAAC;AACvB,YAAY,IAAI,KAAK,IAAI,CAAC,GAAG,IAAI,KAAK,IAAI,KAAK,GAAG,GAAG,CAAC,EAAE;AACxD,gBAAgB,SAAS,GAAG,SAAS,CAAC,KAAK,CAAC,CAAC;AAC7C,gBAAgB,IAAI,SAAS;AAC7B,oBAAoB,OAAO,SAAS,CAAC;AACrC,aAAa;AACb,YAAY,GAAG,GAAG,QAAQ,CAAC,KAAK,EAAE,KAAK,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,EAAE,KAAK,CAAC,CAAC;AAC7D,YAAY,IAAI,KAAK;AACrB,gBAAgB,SAAS,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC;AACvC,YAAY,OAAO,GAAG,CAAC;AACvB,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,SAAS,UAAU,CAAC,KAAK,EAAE,QAAQ,EAAE;AACzC,QAAQ,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC;AAC5C,YAAY,OAAO,QAAQ,GAAG,KAAK,GAAG,IAAI,CAAC;AAC3C,QAAQ,IAAI,QAAQ,EAAE;AACtB,YAAY,IAAI,KAAK,GAAG,CAAC;AACzB,gBAAgB,OAAO,KAAK,CAAC;AAC7B,YAAY,IAAI,KAAK,IAAI,cAAc;AACvC,gBAAgB,OAAO,kBAAkB,CAAC;AAC1C,SAAS,MAAM;AACf,YAAY,IAAI,KAAK,IAAI,CAAC,cAAc;AACxC,gBAAgB,OAAO,SAAS,CAAC;AACjC,YAAY,IAAI,KAAK,GAAG,CAAC,IAAI,cAAc;AAC3C,gBAAgB,OAAO,SAAS,CAAC;AACjC,SAAS;AACT,QAAQ,IAAI,KAAK,GAAG,CAAC;AACrB,YAAY,OAAO,UAAU,CAAC,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC,GAAG,EAAE,CAAC;AACtD,QAAQ,OAAO,QAAQ,CAAC,CAAC,KAAK,GAAG,cAAc,IAAI,CAAC,EAAE,CAAC,KAAK,GAAG,cAAc,IAAI,CAAC,EAAE,QAAQ,CAAC,CAAC;AAC9F,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,SAAS,QAAQ,CAAC,OAAO,EAAE,QAAQ,EAAE,QAAQ,EAAE;AACnD,QAAQ,OAAO,IAAI,IAAI,CAAC,OAAO,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;AACrD,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,IAAI,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,SAAS,UAAU,CAAC,GAAG,EAAE,QAAQ,EAAE,KAAK,EAAE;AAC9C,QAAQ,IAAI,GAAG,CAAC,MAAM,KAAK,CAAC;AAC5B,YAAY,MAAM,KAAK,CAAC,cAAc,CAAC,CAAC;AACxC,QAAQ,IAAI,GAAG,KAAK,KAAK,IAAI,GAAG,KAAK,UAAU,IAAI,GAAG,KAAK,WAAW,IAAI,GAAG,KAAK,WAAW;AAC7F,YAAY,OAAO,IAAI,CAAC;AACxB,QAAQ,IAAI,OAAO,QAAQ,KAAK,QAAQ,EAAE;AAC1C;AACA,YAAY,KAAK,GAAG,QAAQ;AAC5B,YAAY,QAAQ,GAAG,KAAK,CAAC;AAC7B,SAAS,MAAM;AACf,YAAY,QAAQ,GAAG,CAAC,EAAE,QAAQ,CAAC;AACnC,SAAS;AACT,QAAQ,KAAK,GAAG,KAAK,IAAI,EAAE,CAAC;AAC5B,QAAQ,IAAI,KAAK,GAAG,CAAC,IAAI,EAAE,GAAG,KAAK;AACnC,YAAY,MAAM,UAAU,CAAC,OAAO,CAAC,CAAC;AACtC;AACA,QAAQ,IAAI,CAAC,CAAC;AACd,QAAQ,IAAI,CAAC,CAAC,GAAG,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC;AACtC,YAAY,MAAM,KAAK,CAAC,iBAAiB,CAAC,CAAC;AAC3C,aAAa,IAAI,CAAC,KAAK,CAAC,EAAE;AAC1B,YAAY,OAAO,UAAU,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,QAAQ,EAAE,KAAK,CAAC,CAAC,GAAG,EAAE,CAAC;AACvE,SAAS;AACT;AACA;AACA;AACA,QAAQ,IAAI,YAAY,GAAG,UAAU,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC;AACzD;AACA,QAAQ,IAAI,MAAM,GAAG,IAAI,CAAC;AAC1B,QAAQ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE;AAChD,YAAY,IAAI,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,MAAM,GAAG,CAAC,CAAC;AAClD,gBAAgB,KAAK,GAAG,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,EAAE,KAAK,CAAC,CAAC;AACpE,YAAY,IAAI,IAAI,GAAG,CAAC,EAAE;AAC1B,gBAAgB,IAAI,KAAK,GAAG,UAAU,CAAC,OAAO,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC,CAAC;AAC7D,gBAAgB,MAAM,GAAG,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;AAClE,aAAa,MAAM;AACnB,gBAAgB,MAAM,GAAG,MAAM,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;AAClD,gBAAgB,MAAM,GAAG,MAAM,CAAC,GAAG,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;AACvD,aAAa;AACb,SAAS;AACT,QAAQ,MAAM,CAAC,QAAQ,GAAG,QAAQ,CAAC;AACnC,QAAQ,OAAO,MAAM,CAAC;AACtB,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,SAAS,SAAS,CAAC,GAAG,EAAE;AAC5B,QAAQ,IAAI,GAAG,gCAAgC,IAAI;AACnD,YAAY,OAAO,GAAG,CAAC;AACvB,QAAQ,IAAI,OAAO,GAAG,KAAK,QAAQ;AACnC,YAAY,OAAO,UAAU,CAAC,GAAG,CAAC,CAAC;AACnC,QAAQ,IAAI,OAAO,GAAG,KAAK,QAAQ;AACnC,YAAY,OAAO,UAAU,CAAC,GAAG,CAAC,CAAC;AACnC;AACA,QAAQ,OAAO,QAAQ,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,IAAI,EAAE,GAAG,CAAC,QAAQ,CAAC,CAAC;AACzD,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,IAAI,cAAc,GAAG,CAAC,IAAI,EAAE,CAAC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,IAAI,cAAc,GAAG,CAAC,IAAI,EAAE,CAAC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,IAAI,cAAc,GAAG,cAAc,GAAG,cAAc,CAAC;AACzD;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,IAAI,cAAc,GAAG,cAAc,GAAG,cAAc,CAAC;AACzD;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,IAAI,cAAc,GAAG,cAAc,GAAG,CAAC,CAAC;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,IAAI,UAAU,GAAG,OAAO,CAAC,cAAc,CAAC,CAAC;AAC7C;AACA;AACA;AACA;AACA;AACA,IAAI,IAAI,IAAI,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;AAC1B;AACA;AACA;AACA;AACA;AACA,IAAI,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;AACrB;AACA;AACA;AACA;AACA;AACA,IAAI,IAAI,KAAK,GAAG,OAAO,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;AACjC;AACA;AACA;AACA;AACA;AACA,IAAI,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;AACvB;AACA;AACA;AACA;AACA;AACA,IAAI,IAAI,GAAG,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;AACzB;AACA;AACA;AACA;AACA;AACA,IAAI,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;AACnB;AACA;AACA;AACA;AACA;AACA,IAAI,IAAI,IAAI,GAAG,OAAO,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;AAChC;AACA;AACA;AACA;AACA;AACA,IAAI,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;AACrB;AACA;AACA;AACA;AACA;AACA,IAAI,IAAI,OAAO,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9B;AACA;AACA;AACA;AACA;AACA,IAAI,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;AAC3B;AACA;AACA;AACA;AACA;AACA,IAAI,IAAI,SAAS,GAAG,QAAQ,CAAC,UAAU,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;AAChE;AACA;AACA;AACA;AACA;AACA,IAAI,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;AAC/B;AACA;AACA;AACA;AACA;AACA,IAAI,IAAI,kBAAkB,GAAG,QAAQ,CAAC,UAAU,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;AACxE;AACA;AACA;AACA;AACA;AACA,IAAI,IAAI,CAAC,kBAAkB,GAAG,kBAAkB,CAAC;AACjD;AACA;AACA;AACA;AACA;AACA,IAAI,IAAI,SAAS,GAAG,QAAQ,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;AACrD;AACA;AACA;AACA;AACA;AACA,IAAI,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;AAC/B;AACA;AACA;AACA;AACA;AACA,IAAI,IAAI,aAAa,GAAG,IAAI,CAAC,SAAS,CAAC;AACvC;AACA;AACA;AACA;AACA;AACA,IAAI,aAAa,CAAC,KAAK,GAAG,SAAS,KAAK,GAAG;AAC3C,QAAQ,OAAO,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,GAAG,KAAK,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC;AACzD,KAAK,CAAC;AACN;AACA;AACA;AACA;AACA;AACA,IAAI,aAAa,CAAC,QAAQ,GAAG,SAAS,QAAQ,GAAG;AACjD,QAAQ,IAAI,IAAI,CAAC,QAAQ;AACzB,YAAY,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,KAAK,CAAC,IAAI,cAAc,KAAK,IAAI,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC;AAC3E,QAAQ,OAAO,IAAI,CAAC,IAAI,GAAG,cAAc,IAAI,IAAI,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC;AAC7D,KAAK,CAAC;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,aAAa,CAAC,QAAQ,GAAG,SAAS,QAAQ,CAAC,KAAK,EAAE;AACtD,QAAQ,KAAK,GAAG,KAAK,IAAI,EAAE,CAAC;AAC5B,QAAQ,IAAI,KAAK,GAAG,CAAC,IAAI,EAAE,GAAG,KAAK;AACnC,YAAY,MAAM,UAAU,CAAC,OAAO,CAAC,CAAC;AACtC,QAAQ,IAAI,IAAI,CAAC,MAAM,EAAE;AACzB,YAAY,OAAO,GAAG,CAAC;AACvB,QAAQ,IAAI,IAAI,CAAC,UAAU,EAAE,EAAE;AAC/B,YAAY,IAAI,IAAI,CAAC,EAAE,CAAC,SAAS,CAAC,EAAE;AACpC;AACA;AACA,gBAAgB,IAAI,SAAS,GAAG,UAAU,CAAC,KAAK,CAAC;AACjD,oBAAoB,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC;AAC7C,oBAAoB,IAAI,GAAG,GAAG,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;AACxD,gBAAgB,OAAO,GAAG,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,KAAK,EAAE,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;AAC1E,aAAa;AACb,gBAAgB,OAAO,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;AACxD,SAAS;AACT;AACA;AACA;AACA,QAAQ,IAAI,YAAY,GAAG,UAAU,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC;AACvE,YAAY,GAAG,GAAG,IAAI,CAAC;AACvB,QAAQ,IAAI,MAAM,GAAG,EAAE,CAAC;AACxB,QAAQ,OAAO,IAAI,EAAE;AACrB,YAAY,IAAI,MAAM,GAAG,GAAG,CAAC,GAAG,CAAC,YAAY,CAAC;AAC9C,gBAAgB,MAAM,GAAG,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC,CAAC,KAAK,EAAE,KAAK,CAAC;AACxE,gBAAgB,MAAM,GAAG,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;AAChD,YAAY,GAAG,GAAG,MAAM,CAAC;AACzB,YAAY,IAAI,GAAG,CAAC,MAAM,EAAE;AAC5B,gBAAgB,OAAO,MAAM,GAAG,MAAM,CAAC;AACvC,iBAAiB;AACjB,gBAAgB,OAAO,MAAM,CAAC,MAAM,GAAG,CAAC;AACxC,oBAAoB,MAAM,GAAG,GAAG,GAAG,MAAM,CAAC;AAC1C,gBAAgB,MAAM,GAAG,EAAE,GAAG,MAAM,GAAG,MAAM,CAAC;AAC9C,aAAa;AACb,SAAS;AACT,KAAK,CAAC;AACN;AACA;AACA;AACA;AACA;AACA,IAAI,aAAa,CAAC,WAAW,GAAG,SAAS,WAAW,GAAG;AACvD,QAAQ,OAAO,IAAI,CAAC,IAAI,CAAC;AACzB,KAAK,CAAC;AACN;AACA;AACA;AACA;AACA;AACA,IAAI,aAAa,CAAC,mBAAmB,GAAG,SAAS,mBAAmB,GAAG;AACvE,QAAQ,OAAO,IAAI,CAAC,IAAI,KAAK,CAAC,CAAC;AAC/B,KAAK,CAAC;AACN;AACA;AACA;AACA;AACA;AACA,IAAI,aAAa,CAAC,UAAU,GAAG,SAAS,UAAU,GAAG;AACrD,QAAQ,OAAO,IAAI,CAAC,GAAG,CAAC;AACxB,KAAK,CAAC;AACN;AACA;AACA;AACA;AACA;AACA,IAAI,aAAa,CAAC,kBAAkB,GAAG,SAAS,kBAAkB,GAAG;AACrE,QAAQ,OAAO,IAAI,CAAC,GAAG,KAAK,CAAC,CAAC;AAC9B,KAAK,CAAC;AACN;AACA;AACA;AACA;AACA;AACA,IAAI,aAAa,CAAC,aAAa,GAAG,SAAS,aAAa,GAAG;AAC3D,QAAQ,IAAI,IAAI,CAAC,UAAU,EAAE;AAC7B,YAAY,OAAO,IAAI,CAAC,EAAE,CAAC,SAAS,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC,aAAa,EAAE,CAAC;AACxE,QAAQ,IAAI,GAAG,GAAG,IAAI,CAAC,IAAI,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC;AACxD,QAAQ,KAAK,IAAI,GAAG,GAAG,EAAE,EAAE,GAAG,GAAG,CAAC,EAAE,GAAG,EAAE;AACzC,YAAY,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,GAAG,CAAC,KAAK,CAAC;AACvC,gBAAgB,MAAM;AACtB,QAAQ,OAAO,IAAI,CAAC,IAAI,IAAI,CAAC,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,CAAC,CAAC;AACnD,KAAK,CAAC;AACN;AACA;AACA;AACA;AACA;AACA,IAAI,aAAa,CAAC,MAAM,GAAG,SAAS,MAAM,GAAG;AAC7C,QAAQ,OAAO,IAAI,CAAC,IAAI,KAAK,CAAC,IAAI,IAAI,CAAC,GAAG,KAAK,CAAC,CAAC;AACjD,KAAK,CAAC;AACN;AACA;AACA;AACA;AACA;AACA,IAAI,aAAa,CAAC,UAAU,GAAG,SAAS,UAAU,GAAG;AACrD,QAAQ,OAAO,CAAC,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC;AAC/C,KAAK,CAAC;AACN;AACA;AACA;AACA;AACA;AACA,IAAI,aAAa,CAAC,UAAU,GAAG,SAAS,UAAU,GAAG;AACrD,QAAQ,OAAO,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,CAAC;AAC/C,KAAK,CAAC;AACN;AACA;AACA;AACA;AACA;AACA,IAAI,aAAa,CAAC,KAAK,GAAG,SAAS,KAAK,GAAG;AAC3C,QAAQ,OAAO,CAAC,IAAI,CAAC,GAAG,GAAG,CAAC,MAAM,CAAC,CAAC;AACpC,KAAK,CAAC;AACN;AACA;AACA;AACA;AACA;AACA,IAAI,aAAa,CAAC,MAAM,GAAG,SAAS,MAAM,GAAG;AAC7C,QAAQ,OAAO,CAAC,IAAI,CAAC,GAAG,GAAG,CAAC,MAAM,CAAC,CAAC;AACpC,KAAK,CAAC;AACN;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,aAAa,CAAC,MAAM,GAAG,SAAS,MAAM,CAAC,KAAK,EAAE;AAClD,QAAQ,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC;AAC1B,YAAY,KAAK,GAAG,SAAS,CAAC,KAAK,CAAC,CAAC;AACrC,QAAQ,IAAI,IAAI,CAAC,QAAQ,KAAK,KAAK,CAAC,QAAQ,IAAI,CAAC,IAAI,CAAC,IAAI,KAAK,EAAE,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,KAAK,EAAE,MAAM,CAAC;AACrG,YAAY,OAAO,KAAK,CAAC;AACzB,QAAQ,OAAO,IAAI,CAAC,IAAI,KAAK,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,GAAG,KAAK,KAAK,CAAC,GAAG,CAAC;AAClE,KAAK,CAAC;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,aAAa,CAAC,EAAE,GAAG,aAAa,CAAC,MAAM,CAAC;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,aAAa,CAAC,SAAS,GAAG,SAAS,SAAS,CAAC,KAAK,EAAE;AACxD,QAAQ,OAAO,CAAC,IAAI,CAAC,EAAE,iBAAiB,KAAK,CAAC,CAAC;AAC/C,KAAK,CAAC;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,aAAa,CAAC,GAAG,GAAG,aAAa,CAAC,SAAS,CAAC;AAChD;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,aAAa,CAAC,QAAQ,GAAG,SAAS,QAAQ,CAAC,KAAK,EAAE;AACtD,QAAQ,OAAO,IAAI,CAAC,IAAI,iBAAiB,KAAK,CAAC,GAAG,CAAC,CAAC;AACpD,KAAK,CAAC;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,aAAa,CAAC,EAAE,GAAG,aAAa,CAAC,QAAQ,CAAC;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,aAAa,CAAC,eAAe,GAAG,SAAS,eAAe,CAAC,KAAK,EAAE;AACpE,QAAQ,OAAO,IAAI,CAAC,IAAI,iBAAiB,KAAK,CAAC,IAAI,CAAC,CAAC;AACrD,KAAK,CAAC;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,aAAa,CAAC,GAAG,GAAG,aAAa,CAAC,eAAe,CAAC;AACtD;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,aAAa,CAAC,WAAW,GAAG,SAAS,WAAW,CAAC,KAAK,EAAE;AAC5D,QAAQ,OAAO,IAAI,CAAC,IAAI,iBAAiB,KAAK,CAAC,GAAG,CAAC,CAAC;AACpD,KAAK,CAAC;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,aAAa,CAAC,EAAE,GAAG,aAAa,CAAC,WAAW,CAAC;AACjD;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,aAAa,CAAC,kBAAkB,GAAG,SAAS,kBAAkB,CAAC,KAAK,EAAE;AAC1E,QAAQ,OAAO,IAAI,CAAC,IAAI,iBAAiB,KAAK,CAAC,IAAI,CAAC,CAAC;AACrD,KAAK,CAAC;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,aAAa,CAAC,GAAG,GAAG,aAAa,CAAC,kBAAkB,CAAC;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,aAAa,CAAC,OAAO,GAAG,SAAS,OAAO,CAAC,KAAK,EAAE;AACpD,QAAQ,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC;AAC1B,YAAY,KAAK,GAAG,SAAS,CAAC,KAAK,CAAC,CAAC;AACrC,QAAQ,IAAI,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC;AAC1B,YAAY,OAAO,CAAC,CAAC;AACrB,QAAQ,IAAI,OAAO,GAAG,IAAI,CAAC,UAAU,EAAE;AACvC,YAAY,QAAQ,GAAG,KAAK,CAAC,UAAU,EAAE,CAAC;AAC1C,QAAQ,IAAI,OAAO,IAAI,CAAC,QAAQ;AAChC,YAAY,OAAO,CAAC,CAAC,CAAC;AACtB,QAAQ,IAAI,CAAC,OAAO,IAAI,QAAQ;AAChC,YAAY,OAAO,CAAC,CAAC;AACrB;AACA,QAAQ,IAAI,CAAC,IAAI,CAAC,QAAQ;AAC1B,YAAY,OAAO,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,UAAU,EAAE,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;AACzD;AACA,QAAQ,OAAO,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,CAAC,KAAK,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC,KAAK,IAAI,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;AACrI,KAAK,CAAC;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,aAAa,CAAC,IAAI,GAAG,aAAa,CAAC,OAAO,CAAC;AAC/C;AACA;AACA;AACA;AACA;AACA,IAAI,aAAa,CAAC,MAAM,GAAG,SAAS,MAAM,GAAG;AAC7C,QAAQ,IAAI,CAAC,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,EAAE,CAAC,SAAS,CAAC;AAChD,YAAY,OAAO,SAAS,CAAC;AAC7B,QAAQ,OAAO,IAAI,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;AACnC,KAAK,CAAC;AACN;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,aAAa,CAAC,GAAG,GAAG,aAAa,CAAC,MAAM,CAAC;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,aAAa,CAAC,GAAG,GAAG,SAAS,GAAG,CAAC,MAAM,EAAE;AAC7C,QAAQ,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC;AAC3B,YAAY,MAAM,GAAG,SAAS,CAAC,MAAM,CAAC,CAAC;AACvC;AACA;AACA;AACA,QAAQ,IAAI,GAAG,GAAG,IAAI,CAAC,IAAI,KAAK,EAAE,CAAC;AACnC,QAAQ,IAAI,GAAG,GAAG,IAAI,CAAC,IAAI,GAAG,MAAM,CAAC;AACrC,QAAQ,IAAI,GAAG,GAAG,IAAI,CAAC,GAAG,KAAK,EAAE,CAAC;AAClC,QAAQ,IAAI,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,MAAM,CAAC;AACpC;AACA,QAAQ,IAAI,GAAG,GAAG,MAAM,CAAC,IAAI,KAAK,EAAE,CAAC;AACrC,QAAQ,IAAI,GAAG,GAAG,MAAM,CAAC,IAAI,GAAG,MAAM,CAAC;AACvC,QAAQ,IAAI,GAAG,GAAG,MAAM,CAAC,GAAG,KAAK,EAAE,CAAC;AACpC,QAAQ,IAAI,GAAG,GAAG,MAAM,CAAC,GAAG,GAAG,MAAM,CAAC;AACtC;AACA,QAAQ,IAAI,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,CAAC,CAAC;AAC/C,QAAQ,GAAG,IAAI,GAAG,GAAG,GAAG,CAAC;AACzB,QAAQ,GAAG,IAAI,GAAG,KAAK,EAAE,CAAC;AAC1B,QAAQ,GAAG,IAAI,MAAM,CAAC;AACtB,QAAQ,GAAG,IAAI,GAAG,GAAG,GAAG,CAAC;AACzB,QAAQ,GAAG,IAAI,GAAG,KAAK,EAAE,CAAC;AAC1B,QAAQ,GAAG,IAAI,MAAM,CAAC;AACtB,QAAQ,GAAG,IAAI,GAAG,GAAG,GAAG,CAAC;AACzB,QAAQ,GAAG,IAAI,GAAG,KAAK,EAAE,CAAC;AAC1B,QAAQ,GAAG,IAAI,MAAM,CAAC;AACtB,QAAQ,GAAG,IAAI,GAAG,GAAG,GAAG,CAAC;AACzB,QAAQ,GAAG,IAAI,MAAM,CAAC;AACtB,QAAQ,OAAO,QAAQ,CAAC,CAAC,GAAG,IAAI,EAAE,IAAI,GAAG,EAAE,CAAC,GAAG,IAAI,EAAE,IAAI,GAAG,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;AAC7E,KAAK,CAAC;AACN;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,aAAa,CAAC,QAAQ,GAAG,SAAS,QAAQ,CAAC,UAAU,EAAE;AAC3D,QAAQ,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC;AAC/B,YAAY,UAAU,GAAG,SAAS,CAAC,UAAU,CAAC,CAAC;AAC/C,QAAQ,OAAO,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,GAAG,EAAE,CAAC,CAAC;AAC1C,KAAK,CAAC;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,aAAa,CAAC,GAAG,GAAG,aAAa,CAAC,QAAQ,CAAC;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,aAAa,CAAC,QAAQ,GAAG,SAAS,QAAQ,CAAC,UAAU,EAAE;AAC3D,QAAQ,IAAI,IAAI,CAAC,MAAM,EAAE;AACzB,YAAY,OAAO,IAAI,CAAC;AACxB,QAAQ,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC;AAC/B,YAAY,UAAU,GAAG,SAAS,CAAC,UAAU,CAAC,CAAC;AAC/C,QAAQ,IAAI,UAAU,CAAC,MAAM,EAAE;AAC/B,YAAY,OAAO,IAAI,CAAC;AACxB,QAAQ,IAAI,IAAI,CAAC,EAAE,CAAC,SAAS,CAAC;AAC9B,YAAY,OAAO,UAAU,CAAC,KAAK,EAAE,GAAG,SAAS,GAAG,IAAI,CAAC;AACzD,QAAQ,IAAI,UAAU,CAAC,EAAE,CAAC,SAAS,CAAC;AACpC,YAAY,OAAO,IAAI,CAAC,KAAK,EAAE,GAAG,SAAS,GAAG,IAAI,CAAC;AACnD;AACA,QAAQ,IAAI,IAAI,CAAC,UAAU,EAAE,EAAE;AAC/B,YAAY,IAAI,UAAU,CAAC,UAAU,EAAE;AACvC,gBAAgB,OAAO,IAAI,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,UAAU,CAAC,GAAG,EAAE,CAAC,CAAC;AACxD;AACA,gBAAgB,OAAO,IAAI,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,GAAG,EAAE,CAAC;AACxD,SAAS,MAAM,IAAI,UAAU,CAAC,UAAU,EAAE;AAC1C,YAAY,OAAO,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC;AACpD;AACA;AACA,QAAQ,IAAI,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,IAAI,UAAU,CAAC,EAAE,CAAC,UAAU,CAAC;AAC5D,YAAY,OAAO,UAAU,CAAC,IAAI,CAAC,QAAQ,EAAE,GAAG,UAAU,CAAC,QAAQ,EAAE,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;AACtF;AACA;AACA;AACA;AACA,QAAQ,IAAI,GAAG,GAAG,IAAI,CAAC,IAAI,KAAK,EAAE,CAAC;AACnC,QAAQ,IAAI,GAAG,GAAG,IAAI,CAAC,IAAI,GAAG,MAAM,CAAC;AACrC,QAAQ,IAAI,GAAG,GAAG,IAAI,CAAC,GAAG,KAAK,EAAE,CAAC;AAClC,QAAQ,IAAI,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,MAAM,CAAC;AACpC;AACA,QAAQ,IAAI,GAAG,GAAG,UAAU,CAAC,IAAI,KAAK,EAAE,CAAC;AACzC,QAAQ,IAAI,GAAG,GAAG,UAAU,CAAC,IAAI,GAAG,MAAM,CAAC;AAC3C,QAAQ,IAAI,GAAG,GAAG,UAAU,CAAC,GAAG,KAAK,EAAE,CAAC;AACxC,QAAQ,IAAI,GAAG,GAAG,UAAU,CAAC,GAAG,GAAG,MAAM,CAAC;AAC1C;AACA,QAAQ,IAAI,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,CAAC,CAAC;AAC/C,QAAQ,GAAG,IAAI,GAAG,GAAG,GAAG,CAAC;AACzB,QAAQ,GAAG,IAAI,GAAG,KAAK,EAAE,CAAC;AAC1B,QAAQ,GAAG,IAAI,MAAM,CAAC;AACtB,QAAQ,GAAG,IAAI,GAAG,GAAG,GAAG,CAAC;AACzB,QAAQ,GAAG,IAAI,GAAG,KAAK,EAAE,CAAC;AAC1B,QAAQ,GAAG,IAAI,MAAM,CAAC;AACtB,QAAQ,GAAG,IAAI,GAAG,GAAG,GAAG,CAAC;AACzB,QAAQ,GAAG,IAAI,GAAG,KAAK,EAAE,CAAC;AAC1B,QAAQ,GAAG,IAAI,MAAM,CAAC;AACtB,QAAQ,GAAG,IAAI,GAAG,GAAG,GAAG,CAAC;AACzB,QAAQ,GAAG,IAAI,GAAG,KAAK,EAAE,CAAC;AAC1B,QAAQ,GAAG,IAAI,MAAM,CAAC;AACtB,QAAQ,GAAG,IAAI,GAAG,GAAG,GAAG,CAAC;AACzB,QAAQ,GAAG,IAAI,GAAG,KAAK,EAAE,CAAC;AAC1B,QAAQ,GAAG,IAAI,MAAM,CAAC;AACtB,QAAQ,GAAG,IAAI,GAAG,GAAG,GAAG,CAAC;AACzB,QAAQ,GAAG,IAAI,GAAG,KAAK,EAAE,CAAC;AAC1B,QAAQ,GAAG,IAAI,MAAM,CAAC;AACtB,QAAQ,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAC7D,QAAQ,GAAG,IAAI,MAAM,CAAC;AACtB,QAAQ,OAAO,QAAQ,CAAC,CAAC,GAAG,IAAI,EAAE,IAAI,GAAG,EAAE,CAAC,GAAG,IAAI,EAAE,IAAI,GAAG,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;AAC7E,KAAK,CAAC;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,aAAa,CAAC,GAAG,GAAG,aAAa,CAAC,QAAQ,CAAC;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,aAAa,CAAC,MAAM,GAAG,SAAS,MAAM,CAAC,OAAO,EAAE;AACpD,QAAQ,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC;AAC5B,YAAY,OAAO,GAAG,SAAS,CAAC,OAAO,CAAC,CAAC;AACzC,QAAQ,IAAI,OAAO,CAAC,MAAM,EAAE;AAC5B,YAAY,MAAM,KAAK,CAAC,kBAAkB,CAAC,CAAC;AAC5C,QAAQ,IAAI,IAAI,CAAC,MAAM,EAAE;AACzB,YAAY,OAAO,IAAI,CAAC,QAAQ,GAAG,KAAK,GAAG,IAAI,CAAC;AAChD,QAAQ,IAAI,MAAM,EAAE,GAAG,EAAE,GAAG,CAAC;AAC7B,QAAQ,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;AAC5B;AACA;AACA,YAAY,IAAI,IAAI,CAAC,EAAE,CAAC,SAAS,CAAC,EAAE;AACpC,gBAAgB,IAAI,OAAO,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,OAAO,CAAC,EAAE,CAAC,OAAO,CAAC;AAC1D,oBAAoB,OAAO,SAAS,CAAC;AACrC,qBAAqB,IAAI,OAAO,CAAC,EAAE,CAAC,SAAS,CAAC;AAC9C,oBAAoB,OAAO,GAAG,CAAC;AAC/B,qBAAqB;AACrB;AACA,oBAAoB,IAAI,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AAC/C,oBAAoB,MAAM,GAAG,QAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AAC1D,oBAAoB,IAAI,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE;AACzC,wBAAwB,OAAO,OAAO,CAAC,UAAU,EAAE,GAAG,GAAG,GAAG,OAAO,CAAC;AACpE,qBAAqB,MAAM;AAC3B,wBAAwB,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC;AAC5D,wBAAwB,GAAG,GAAG,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC;AAC3D,wBAAwB,OAAO,GAAG,CAAC;AACnC,qBAAqB;AACrB,iBAAiB;AACjB,aAAa,MAAM,IAAI,OAAO,CAAC,EAAE,CAAC,SAAS,CAAC;AAC5C,gBAAgB,OAAO,IAAI,CAAC,QAAQ,GAAG,KAAK,GAAG,IAAI,CAAC;AACpD,YAAY,IAAI,IAAI,CAAC,UAAU,EAAE,EAAE;AACnC,gBAAgB,IAAI,OAAO,CAAC,UAAU,EAAE;AACxC,oBAAoB,OAAO,IAAI,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC,CAAC;AACzD,gBAAgB,OAAO,IAAI,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,CAAC;AACrD,aAAa,MAAM,IAAI,OAAO,CAAC,UAAU,EAAE;AAC3C,gBAAgB,OAAO,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC;AACrD,YAAY,GAAG,GAAG,IAAI,CAAC;AACvB,SAAS,MAAM;AACf;AACA;AACA,YAAY,IAAI,CAAC,OAAO,CAAC,QAAQ;AACjC,gBAAgB,OAAO,GAAG,OAAO,CAAC,UAAU,EAAE,CAAC;AAC/C,YAAY,IAAI,OAAO,CAAC,EAAE,CAAC,IAAI,CAAC;AAChC,gBAAgB,OAAO,KAAK,CAAC;AAC7B,YAAY,IAAI,OAAO,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AACxC,gBAAgB,OAAO,IAAI,CAAC;AAC5B,YAAY,GAAG,GAAG,KAAK,CAAC;AACxB,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,GAAG,GAAG,IAAI,CAAC;AACnB,QAAQ,OAAO,GAAG,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE;AACjC;AACA;AACA,YAAY,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,QAAQ,EAAE,GAAG,OAAO,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;AAClF;AACA;AACA;AACA,YAAY,IAAI,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC;AAC7D,gBAAgB,KAAK,GAAG,CAAC,IAAI,IAAI,EAAE,IAAI,CAAC,GAAG,OAAO,CAAC,CAAC,EAAE,IAAI,GAAG,EAAE,CAAC;AAChE;AACA;AACA;AACA,gBAAgB,SAAS,GAAG,UAAU,CAAC,MAAM,CAAC;AAC9C,gBAAgB,SAAS,GAAG,SAAS,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;AACnD,YAAY,OAAO,SAAS,CAAC,UAAU,EAAE,IAAI,SAAS,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE;AAChE,gBAAgB,MAAM,IAAI,KAAK,CAAC;AAChC,gBAAgB,SAAS,GAAG,UAAU,CAAC,MAAM,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;AAC9D,gBAAgB,SAAS,GAAG,SAAS,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;AACnD,aAAa;AACb;AACA;AACA;AACA,YAAY,IAAI,SAAS,CAAC,MAAM,EAAE;AAClC,gBAAgB,SAAS,GAAG,GAAG,CAAC;AAChC;AACA,YAAY,GAAG,GAAG,GAAG,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;AACrC,YAAY,GAAG,GAAG,GAAG,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;AACrC,SAAS;AACT,QAAQ,OAAO,GAAG,CAAC;AACnB,KAAK,CAAC;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,aAAa,CAAC,GAAG,GAAG,aAAa,CAAC,MAAM,CAAC;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,aAAa,CAAC,MAAM,GAAG,SAAS,MAAM,CAAC,OAAO,EAAE;AACpD,QAAQ,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC;AAC5B,YAAY,OAAO,GAAG,SAAS,CAAC,OAAO,CAAC,CAAC;AACzC,QAAQ,OAAO,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC;AACxD,KAAK,CAAC;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,aAAa,CAAC,GAAG,GAAG,aAAa,CAAC,MAAM,CAAC;AAC7C;AACA;AACA;AACA;AACA;AACA,IAAI,aAAa,CAAC,GAAG,GAAG,SAAS,GAAG,GAAG;AACvC,QAAQ,OAAO,QAAQ,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;AAC9D,KAAK,CAAC;AACN;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,aAAa,CAAC,GAAG,GAAG,SAAS,GAAG,CAAC,KAAK,EAAE;AAC5C,QAAQ,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC;AAC1B,YAAY,KAAK,GAAG,SAAS,CAAC,KAAK,CAAC,CAAC;AACrC,QAAQ,OAAO,QAAQ,CAAC,IAAI,CAAC,GAAG,GAAG,KAAK,CAAC,GAAG,EAAE,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;AACrF,KAAK,CAAC;AACN;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,aAAa,CAAC,EAAE,GAAG,SAAS,EAAE,CAAC,KAAK,EAAE;AAC1C,QAAQ,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC;AAC1B,YAAY,KAAK,GAAG,SAAS,CAAC,KAAK,CAAC,CAAC;AACrC,QAAQ,OAAO,QAAQ,CAAC,IAAI,CAAC,GAAG,GAAG,KAAK,CAAC,GAAG,EAAE,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;AACrF,KAAK,CAAC;AACN;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,aAAa,CAAC,GAAG,GAAG,SAAS,GAAG,CAAC,KAAK,EAAE;AAC5C,QAAQ,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC;AAC1B,YAAY,KAAK,GAAG,SAAS,CAAC,KAAK,CAAC,CAAC;AACrC,QAAQ,OAAO,QAAQ,CAAC,IAAI,CAAC,GAAG,GAAG,KAAK,CAAC,GAAG,EAAE,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;AACrF,KAAK,CAAC;AACN;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,aAAa,CAAC,SAAS,GAAG,SAAS,SAAS,CAAC,OAAO,EAAE;AAC1D,QAAQ,IAAI,MAAM,CAAC,OAAO,CAAC;AAC3B,YAAY,OAAO,GAAG,OAAO,CAAC,KAAK,EAAE,CAAC;AACtC,QAAQ,IAAI,CAAC,OAAO,IAAI,EAAE,MAAM,CAAC;AACjC,YAAY,OAAO,IAAI,CAAC;AACxB,aAAa,IAAI,OAAO,GAAG,EAAE;AAC7B,YAAY,OAAO,QAAQ,CAAC,IAAI,CAAC,GAAG,IAAI,OAAO,EAAE,CAAC,IAAI,CAAC,IAAI,IAAI,OAAO,KAAK,IAAI,CAAC,GAAG,MAAM,EAAE,GAAG,OAAO,CAAC,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;AACxH;AACA,YAAY,OAAO,QAAQ,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,KAAK,OAAO,GAAG,EAAE,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;AAC1E,KAAK,CAAC;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,aAAa,CAAC,GAAG,GAAG,aAAa,CAAC,SAAS,CAAC;AAChD;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,aAAa,CAAC,UAAU,GAAG,SAAS,UAAU,CAAC,OAAO,EAAE;AAC5D,QAAQ,IAAI,MAAM,CAAC,OAAO,CAAC;AAC3B,YAAY,OAAO,GAAG,OAAO,CAAC,KAAK,EAAE,CAAC;AACtC,QAAQ,IAAI,CAAC,OAAO,IAAI,EAAE,MAAM,CAAC;AACjC,YAAY,OAAO,IAAI,CAAC;AACxB,aAAa,IAAI,OAAO,GAAG,EAAE;AAC7B,YAAY,OAAO,QAAQ,CAAC,CAAC,IAAI,CAAC,GAAG,KAAK,OAAO,KAAK,IAAI,CAAC,IAAI,KAAK,EAAE,GAAG,OAAO,CAAC,CAAC,EAAE,IAAI,CAAC,IAAI,IAAI,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;AACzH;AACA,YAAY,OAAO,QAAQ,CAAC,IAAI,CAAC,IAAI,KAAK,OAAO,GAAG,EAAE,CAAC,EAAE,IAAI,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;AACjG,KAAK,CAAC;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,aAAa,CAAC,GAAG,GAAG,aAAa,CAAC,UAAU,CAAC;AACjD;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,aAAa,CAAC,kBAAkB,GAAG,SAAS,kBAAkB,CAAC,OAAO,EAAE;AAC5E,QAAQ,IAAI,MAAM,CAAC,OAAO,CAAC;AAC3B,YAAY,OAAO,GAAG,OAAO,CAAC,KAAK,EAAE,CAAC;AACtC,QAAQ,OAAO,IAAI,EAAE,CAAC;AACtB,QAAQ,IAAI,OAAO,KAAK,CAAC;AACzB,YAAY,OAAO,IAAI,CAAC;AACxB,aAAa;AACb,YAAY,IAAI,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;AACjC,YAAY,IAAI,OAAO,GAAG,EAAE,EAAE;AAC9B,gBAAgB,IAAI,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC;AACnC,gBAAgB,OAAO,QAAQ,CAAC,CAAC,GAAG,KAAK,OAAO,KAAK,IAAI,KAAK,EAAE,GAAG,OAAO,CAAC,CAAC,EAAE,IAAI,KAAK,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;AAC/G,aAAa,MAAM,IAAI,OAAO,KAAK,EAAE;AACrC,gBAAgB,OAAO,QAAQ,CAAC,IAAI,EAAE,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;AACxD;AACA,gBAAgB,OAAO,QAAQ,CAAC,IAAI,MAAM,OAAO,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;AAC3E,SAAS;AACT,KAAK,CAAC;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,aAAa,CAAC,IAAI,GAAG,aAAa,CAAC,kBAAkB,CAAC;AAC1D;AACA;AACA;AACA;AACA;AACA,IAAI,aAAa,CAAC,QAAQ,GAAG,SAAS,QAAQ,GAAG;AACjD,QAAQ,IAAI,CAAC,IAAI,CAAC,QAAQ;AAC1B,YAAY,OAAO,IAAI,CAAC;AACxB,QAAQ,OAAO,QAAQ,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;AACpD,KAAK,CAAC;AACN;AACA;AACA;AACA;AACA;AACA,IAAI,aAAa,CAAC,UAAU,GAAG,SAAS,UAAU,GAAG;AACrD,QAAQ,IAAI,IAAI,CAAC,QAAQ;AACzB,YAAY,OAAO,IAAI,CAAC;AACxB,QAAQ,OAAO,QAAQ,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;AACnD,KAAK,CAAC;AACN;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,aAAa,CAAC,OAAO,GAAG,SAAS,EAAE,EAAE;AACzC,QAAQ,OAAO,EAAE,GAAG,IAAI,CAAC,SAAS,EAAE,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC;AACxD,MAAK;AACL;AACA;AACA;AACA;AACA;AACA,IAAI,aAAa,CAAC,SAAS,GAAG,WAAW;AACzC,QAAQ,IAAI,EAAE,GAAG,IAAI,CAAC,IAAI;AAC1B,YAAY,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC;AAC1B,QAAQ,OAAO;AACf,aAAa,EAAE,WAAW,IAAI;AAC9B,YAAY,CAAC,EAAE,MAAM,CAAC,IAAI,IAAI;AAC9B,YAAY,CAAC,EAAE,KAAK,EAAE,IAAI,IAAI;AAC9B,YAAY,CAAC,EAAE,KAAK,EAAE,IAAI,IAAI;AAC9B,aAAa,EAAE,WAAW,IAAI;AAC9B,YAAY,CAAC,EAAE,MAAM,CAAC,IAAI,IAAI;AAC9B,YAAY,CAAC,EAAE,KAAK,EAAE,IAAI,IAAI;AAC9B,YAAY,CAAC,EAAE,KAAK,EAAE,IAAI,IAAI;AAC9B,SAAS,CAAC;AACV,MAAK;AACL;AACA;AACA;AACA;AACA;AACA,IAAI,aAAa,CAAC,SAAS,GAAG,WAAW;AACzC,QAAQ,IAAI,EAAE,GAAG,IAAI,CAAC,IAAI;AAC1B,YAAY,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC;AAC1B,QAAQ,OAAO;AACf,YAAY,CAAC,EAAE,KAAK,EAAE,IAAI,IAAI;AAC9B,YAAY,CAAC,EAAE,KAAK,EAAE,IAAI,IAAI;AAC9B,YAAY,CAAC,EAAE,MAAM,CAAC,IAAI,IAAI;AAC9B,aAAa,EAAE,WAAW,IAAI;AAC9B,YAAY,CAAC,EAAE,KAAK,EAAE,IAAI,IAAI;AAC9B,YAAY,CAAC,EAAE,KAAK,EAAE,IAAI,IAAI;AAC9B,YAAY,CAAC,EAAE,MAAM,CAAC,IAAI,IAAI;AAC9B,aAAa,EAAE,WAAW,IAAI;AAC9B,SAAS,CAAC;AACV,MAAK;AACL;AACA,IAAI,OAAO,IAAI,CAAC;AAChB,CAAC,CAAC;;;ACxrCF,IAAI,IAAI,GAAG,IAAI,SAAS,CAAC,CAAC,CAAC,CAAC;AAC5B,IAAI,KAAK,GAAG,IAAI,UAAU,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;AAC9C,IAAI,OAAO,GAAG,IAAI,YAAY,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;AAE3C,MAAM,SAAS,GAAG,CAAC,KAAK,CAAC;AACzB,MAAM,SAAS,GAAG,KAAK,CAAA;SAEd,cAAc,CAAC,IAAY;IACvC,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC;IAChB,OAAO,OAAO,CAAC,CAAC,CAAC,CAAC;AACtB,CAAC;SAEe,cAAc,CAAC,IAAY;IACvC,OAAO,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC;IAClB,OAAO,KAAK,CAAC,CAAC,CAAC,CAAC;AACpB,CAAC;AAED,IAAI,KAAK,GAAG,IAAI,UAAU,CAAC,CAAC,CAAC,CAAC;AAC9B,IAAI,KAAK,GAAG,IAAI,UAAU,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;AAC/C,IAAI,OAAO,GAAG,IAAI,YAAY,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;SAInC,gBAAgB,CAAC,IAAU;IACvC,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC;IACrB,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC;IACpB,OAAO,OAAO,CAAC,CAAC,CAAC,CAAC;AACtB,CAAC;SAEe,gBAAgB,CAAC,MAAc;IAC3C,OAAO,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC;IACpB,OAAO,IAAIC,MAAI,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;AACxC;;AChCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAuCa,IAAI;;;;;;;;;IA6Eb,YAAmB,KAAa,EAAE,CAAQ;;;;QA5C1C,WAAM,GAAW,CAAC,CAAC;;;;QAKnB,YAAO,GAASA,MAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;;;;;QAMhC,YAAO,GAAW,EAAE,CAAC;;;;;QAMrB,YAAO,GAAW,EAAE,CAAC;;;;;QAMrB,YAAO,GAAW,EAAE,CAAC;;;;;QAWrB,SAAI,GAAgB,IAAI,CAAC;QAWrB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,EAAE;YACH,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;YACnB,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC,IAAI,CAAC;YACnB,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,MAAM,CAAC;YACvB,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC,OAAO,CAAC;YACzB,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC,OAAO,CAAC;YACzB,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC,OAAO,CAAC;YACzB,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC,OAAO,CAAC;YACzB,IAAI,CAAC,UAAU,GAAG,CAAC,CAAC,UAAU,CAAC;SAClC;KACJ;;;;;;;IAQD,OAAO,CAAC,MAAc;QAClB,IAAI,CAAC,IAAI,GAAG,WAAW,CAAC,GAAG,CAAC;QAC5B,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,UAAU,GAAG,UAAU,IAAI,IAAI,CAAC,IAAI,GAAG,MAAM,CAAC,CAAC;KACvD;;;;;;;IAQD,QAAQ,CAAC,OAAa;QAClB,IAAI,CAAC,IAAI,GAAG,WAAW,CAAC,IAAI,CAAC;QAC7B,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,UAAU,GAAG,UAAU,IAAI,IAAI,CAAC,IAAI,IAAI,OAAO,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC;KACvE;;;;;;;IAQD,SAAS,CAAC,QAAgB;QACtB,IAAI,CAAC,IAAI,GAAG,WAAW,CAAC,KAAK,CAAC;QAC9B,IAAI,CAAC,MAAM,GAAG,cAAc,CAAC,QAAQ,CAAC,CAAC;QACvC,IAAI,CAAC,UAAU,GAAG,UAAU,IAAI,IAAI,CAAC,IAAI,IAAI,QAAQ,GAAG,CAAC,CAAC,CAAC,CAAC;KAC/D;;;;;;;IAQD,UAAU,CAAC,SAAiB;QACxB,IAAI,CAAC,IAAI,GAAG,WAAW,CAAC,MAAM,CAAC;QAC/B,IAAI,CAAC,OAAO,GAAG,gBAAgB,CAAC,SAAS,CAAC,CAAC;QAC3C,IAAI,CAAC,UAAU,GAAG,UAAU,IAAI,IAAI,CAAC,IAAI,IAAI,SAAS,GAAG,CAAC,CAAC,CAAC,CAAC;KAChE;;;;;;;;;;;;;IAcM,GAAG,CAAC,IAAY,EAAE,OAAgB,EAAE,OAAgB,EAAE,OAAgB;QACzE,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,OAAO,GAAG,OAAO,aAAP,OAAO,cAAP,OAAO,GAAI,EAAE,CAAC;QAC7B,IAAI,CAAC,OAAO,GAAG,OAAO,aAAP,OAAO,cAAP,OAAO,GAAI,EAAE,CAAC;QAC7B,IAAI,CAAC,OAAO,GAAG,OAAO,aAAP,OAAO,cAAP,OAAO,GAAI,EAAE,CAAC;QAC7B,QAAQ,IAAI;YACR,KAAK,WAAW,CAAC,KAAK;gBAClB,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;YACpB,KAAK,WAAW,CAAC,IAAI,CAAC;YACtB,KAAK,WAAW,CAAC,GAAG,CAAC;YACrB,KAAK,WAAW,CAAC,KAAK,CAAC;YACvB,KAAK,WAAW,CAAC,WAAW;gBACxB,IAAI,CAAC,UAAU,GAAG,UAAU,IAAI,IAAI,GAAG,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;gBAC/D,OAAO;YACX,KAAK,WAAW,CAAC,SAAS,EAAE;gBACxB,IAAI,CAAC,UAAU,GAAG,UAAU,IAAI,IAAI,GAAG,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC;sBACvD,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;gBAC9B,OAAO;aACV;;;;;YAKD;gBACI,IAAI,CAAC,UAAU,GAAG,UAAU,IAAI,IAAI,GAAG,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC;sBACvD,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;SAC9D;KACJ;;;;;;;;;;;IAYD,cAAc,CAAC,IAAY,EAAE,IAAY,EAAE,QAAgB;QACvD,IAAI,CAAC,IAAI,GAAG,WAAW,CAAC,IAAI,CAAC;QAC7B,IAAI,CAAC,OAAO,GAAGA,MAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;QACtC,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;QACpB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;QACpB,IAAI,CAAC,UAAU,GAAG,UAAU,IAAI,WAAW,CAAC,IAAI,GAAG,QAAQ,GAAS,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAG,GAAS,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAG,CAAC,CAAC;KAClI;;;;;;;;;;;IAYD,UAAU,CAAC,QAAgB,EAAE,QAAgB;QACzC,IAAI,CAAC,IAAI,GAAG,WAAW,CAAC,GAAG,CAAC;QAC5B,IAAI,CAAC,MAAM,GAAG,QAAQ,CAAC;QACvB,IAAI,CAAC,UAAU,GAAG,QAAQ,CAAC;KAC9B;;;;;;;;;;;IAYD,SAAS,CAAC,CAAO;QACb,SAAS,IAAI,CAAC,IAAI;YACd,KAAK,WAAW,CAAC,IAAI,CAAC;YACtB,KAAK,WAAW,CAAC,GAAG,CAAC;YACrB,KAAK,WAAW,CAAC,KAAK,CAAC;YACvB,KAAK,WAAW,CAAC,KAAK,CAAC;YACvB,KAAK,WAAW,CAAC,WAAW;gBACxB,QAAQ,CAAC,CAAC,OAAO,KAAK,IAAI,CAAC,OAAO,EAAE;YACxC,KAAK,WAAW,CAAC,WAAW,CAAC;YAC7B,KAAK,WAAW,CAAC,IAAI,CAAC;YACtB,KAAK,WAAW,CAAC,MAAM;gBACnB,OAAO,CAAC,CAAC,OAAO,KAAK,IAAI,CAAC,OAAO,CAAC;YACtC,KAAK,WAAW,CAAC,GAAG,CAAC;YACrB,KAAK,WAAW,CAAC,KAAK;gBAClB,OAAO,CAAC,CAAC,MAAM,KAAK,IAAI,CAAC,MAAM,CAAC;YACpC,KAAK,WAAW,CAAC,WAAW;gBACxB,OAAO,CAAC,CAAC,MAAM,KAAK,IAAI,CAAC,MAAM,KAAK,CAAC,CAAC,OAAO,KAAK,IAAI,CAAC,OAAO,CAAC,CAAC;YACpE,KAAK,WAAW,CAAC,SAAS;gBACtB,OAAO,CAAC,CAAC,CAAC,OAAO,KAAK,IAAI,CAAC,OAAO,MAAM,CAAC,CAAC,OAAO,KAAK,IAAI,CAAC,OAAO,CAAC,CAAC;YACxE,KAAK,WAAW,CAAC,IAAI;gBACjB;oBACI,OAAO,CAAC,CAAC,OAAO,KAAK,IAAI,CAAC,OAAO,KAAK,CAAC,CAAC,OAAO,KAAK,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,OAAO,KAAK,IAAI,CAAC,OAAO,CAAC,CAAC;iBACrG;YACL;gBACI,OAAO,CAAC,CAAC,CAAC,OAAO,KAAK,IAAI,CAAC,OAAO,MAAM,CAAC,CAAC,OAAO,KAAK,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,OAAO,KAAK,IAAI,CAAC,OAAO,CAAC,CAAC;SAC3G;KACJ;CACJ;AAGD,SAAS,QAAQ,CAAC,GAAW;IACzB,IAAI,IAAI,GAAG,CAAC,CAAC;IACb,IAAI,GAAG,CAAC,MAAM,IAAI,CAAC,EAAE;QAAE,OAAO,IAAI,CAAC;KAAE;IACrC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;QACjC,IAAI,IAAI,GAAG,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;QAC7B,IAAI,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,IAAI,CAAC;QACnC,IAAI,GAAG,IAAI,GAAG,IAAI,CAAC;KACtB;IACD,OAAO,IAAI,CAAC;AAChB,CAAC;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzTA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MA4DsB,aAAa;;;;;;;;;;;IAuB/B,YAAmB,GAAW,EAAE,KAA2B,IAAI;QAC3D,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC;QACb,IAAI,GAAG,KAAK,OAAO,CAAC,IAAI,IAAI,GAAG,KAAK,OAAO,CAAC,IAAI,EAAE;YAC9C,MAAM,IAAI,KAAK,EAAE,CAAC;SACrB;QACD,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;QACf,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC;KAChB;;;;;;;;;;;IAYM,cAAc,CAAC,IAAmB,EAAE,MAAc;QACrD,IAAI,IAAI,CAAC,GAAG,GAAG,OAAO,CAAC,IAAI,EAAE;YACzB,MAAM,IAAI,KAAK,EAAE,CAAC;SACrB;QACD,IAAI,IAAI,CAAC,EAAE,IAAI,IAAI,EAAE;YACjB,IAAI,CAAC,EAAE,CAAC,cAAc,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;SACxC;KACJ;;;;;;;;;;;IAYM,sBAAsB;QACzB,IAAI,IAAI,CAAC,EAAE,IAAI,IAAI,EAAE;YACjB,OAAO,IAAI,CAAC,EAAE,CAAC,sBAAsB,EAAE,CAAC;SAC3C;QACD,OAAO,IAAI,CAAC;KACf;;;;;;;;;;;IAYM,eAAe,CAAC,IAAmB,EAAE,OAAgB;QACxD,IAAI,IAAI,CAAC,EAAE,IAAI,IAAI,EAAE;YACjB,OAAO,IAAI,CAAC,EAAE,CAAC,eAAe,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;SACjD;QACD,OAAO,IAAI,CAAC;KACf;;;;;;;;;;;;;;;;;;;;;;;;;;IA2BM,mBAAmB,CAAC,OAAe,EAAE,QAAyB,EAAE,IAAmB,EAAE,OAAgB;QACxG,IAAI,IAAI,CAAC,GAAG,GAAG,OAAO,CAAC,IAAI,EAAE;YACzB,MAAM,IAAI,KAAK,EAAE,CAAC;SACrB;QACD,IAAI,IAAI,CAAC,EAAE,IAAI,IAAI,EAAE;YACjB,OAAO,IAAI,CAAC,EAAE,CAAC,mBAAmB,CAAC,OAAO,EAAE,QAAQ,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;SACxE;QACD,OAAO,IAAI,CAAC;KACf;;;;;;;;;;;;;IAcM,wBAAwB,CAAC,SAAiB,EAAE,IAAmB,EAAE,OAAgB;QACpF,IAAI,IAAI,CAAC,EAAE,IAAI,IAAI,EAAE;YACjB,OAAO,IAAI,CAAC,EAAE,CAAC,wBAAwB,CAAC,SAAS,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;SACrE;QACD,OAAO,IAAI,CAAC;KACf;;;;;;;IAQM,cAAc,CAAC,IAAe;QACjC,IAAI,IAAI,CAAC,EAAE,IAAI,IAAI,EAAE;YACjB,IAAI,CAAC,EAAE,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;SAChC;KACJ;;;;IAKM,SAAS;QACZ,IAAI,IAAI,CAAC,EAAE,IAAI,IAAI,EAAE;YACjB,IAAI,CAAC,EAAE,CAAC,SAAS,EAAE,CAAC;SACvB;KACJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IA6EM,UAAU,CAAC,IAAU,EAAE,MAAY,EAAE,KAAW,EAAE,MAAY,EAAE,KAAW;QAC9E,IAAI,CAAC,CAAC,OAAO,IAAI,KAAK,QAAQ,KAAK,IAAI,KAAK,IAAI,MAAM,CAAC,OAAO,MAAM,KAAK,QAAQ,KAAK,MAAM,KAAK,IAAI,CAAC,KAAK,CAAC,KAAK,IAAI,IAAI,IAAI,KAAK,YAAY,KAAK,KAAK,KAAK,KAAK,IAAI,CAAC,KAAK,CAAC,OAAO,MAAM,KAAK,QAAQ,KAAK,MAAM,KAAK,IAAI,CAAC,KAAK,CAAC,KAAK,IAAI,IAAI,IAAI,KAAK,YAAY,KAAK,KAAK,KAAK,KAAK,IAAI,CAAC,EAAE;YAC3R,IAAI,MAAM,GAAG,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;YACnD,OAAY,CAAC;gBACT,IAAI,IAAI,CAAC,EAAE,IAAI,IAAI,EAAE;oBACjB,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC;iBAC1D;aACJ,GAAG,CAAC;SACR;aAAM;YAAE,MAAM,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAC;SAAE;KAClD;;;;;;;;;;;;;;;;;;;;;IAsBM,SAAS,CAAC,MAAc;QAC3B,IAAI,IAAI,CAAC,EAAE,IAAI,IAAI,EAAE;YACjB,IAAI,CAAC,EAAE,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;SAC7B;KACJ;;;;;;;;;;;;;;;;;;;IAoBM,YAAY,CAAC,MAAc,EAAE,OAAe;QAC/C,IAAI,IAAI,CAAC,EAAE,IAAI,IAAI,EAAE;YACjB,IAAI,CAAC,EAAE,CAAC,YAAY,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;SACzC;KACJ;;;;;;;;;;;;;IAcM,YAAY,CAAC,MAAc,EAAE,KAAa;QAC7C,IAAI,IAAI,CAAC,EAAE,IAAI,IAAI,EAAE;YACjB,IAAI,CAAC,EAAE,CAAC,YAAY,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;SACvC;KACJ;;;;;;;;;;;;;IAcM,aAAa,CAAC,MAAc,EAAE,IAAY;QAC7C,IAAI,IAAI,CAAC,EAAE,IAAI,IAAI,EAAE;YACjB,IAAI,CAAC,EAAE,CAAC,aAAa,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;SACvC;KACJ;;;;;;;;;;;;;;;;IAiBM,cAAc,CAAC,MAAc,EAAE,KAAa,EAAE,IAAmB,EAAE,IAAmB;QACzF,IAAI,IAAI,CAAC,EAAE,IAAI,IAAI,EAAE;YACjB,IAAI,CAAC,EAAE,CAAC,cAAc,CAAC,MAAM,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;SACrD;KACJ;;;;;;;;;;;;;;;;;IAkBM,sEAAsE,CAAC,MAAc,EAAE,KAAa,EAAE,IAAY,EAAE,IAAY;QACnI,IAAI,IAAI,CAAC,GAAG,IAAI,OAAO,CAAC,IAAI,EAAE;YAC1B,IAAI,GAAG,GAAY,MAAM,KAAK,OAAO,CAAC,eAAe,CAAC;YACtD,IAAI,CAAC,eAAe,CAAC,MAAM,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,CAAC,CAAC;YACrD,OAAO;SACV;QACD,IAAI,IAAI,CAAC,EAAE,IAAI,IAAI,EAAE;YACjB,IAAI,CAAC,EAAE,CAAC,eAAe,CAAC,MAAM,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;SACtD;KACJ;;;;;;;;;;;;;;;;;;;IAoBM,eAAe,CAAC,MAAY,EAAE,KAAW,EAAE,IAAU,EAAE,IAAU,EAAE,GAAS;QAC/E,IAAI,CAAC,CAAC,OAAO,MAAM,KAAK,QAAQ,KAAK,MAAM,KAAK,IAAI,MAAM,CAAC,OAAO,KAAK,KAAK,QAAQ,KAAK,KAAK,KAAK,IAAI,CAAC,KAAK,CAAC,OAAO,IAAI,KAAK,QAAQ,KAAK,IAAI,KAAK,IAAI,CAAC,KAAK,CAAC,OAAO,IAAI,KAAK,QAAQ,KAAK,IAAI,KAAK,IAAI,CAAC,KAAK,CAAC,OAAO,GAAG,KAAK,SAAS,KAAK,GAAG,KAAK,IAAI,CAAC,EAAE;YACxP,IAAI,MAAM,GAAG,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;YACnD,OAAY,CAAC;gBACT,IAAI,IAAI,CAAC,GAAG,GAAG,OAAO,CAAC,IAAI,EAAE;oBACzB,IAAI,GAAG,MAAM,MAAM,KAAK,OAAO,CAAC,eAAe,CAAC,EAAE;wBAC9C,MAAM,IAAI,KAAK,CAAC,kDAAkD,CAAC,CAAC;qBACvE;oBACD,IAAI,CAAC,eAAe,CAAC,MAAM,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;oBAChD,OAAO;iBACV;gBACD,IAAI,IAAI,CAAC,EAAE,IAAI,IAAI,EAAE;oBACjB,IAAI,CAAC,EAAE,CAAC,eAAe,CAAC,MAAM,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,CAAC,CAAC;iBAC3D;aACJ,GAAG,CAAC;SACR;aAAM,IAAI,CAAC,CAAC,OAAO,MAAM,KAAK,QAAQ,KAAK,MAAM,KAAK,IAAI,MAAM,CAAC,OAAO,KAAK,KAAK,QAAQ,KAAK,KAAK,KAAK,IAAI,CAAC,KAAK,CAAC,OAAO,IAAI,KAAK,QAAQ,KAAK,IAAI,KAAK,IAAI,CAAC,KAAK,CAAC,OAAO,IAAI,KAAK,QAAQ,KAAK,IAAI,KAAK,IAAI,CAAC,IAAI,GAAG,KAAK,SAAS,EAAE;YACpO,OAAY,IAAI,CAAC,sEAAsE,CAAC,MAAM,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;SACtH;aAAM;YAAE,MAAM,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAC;SAAE;KAClD;;;;;;;;;;;;;;;;;IAkBM,sBAAsB,CAAC,IAAY,EAAE,IAAY,EAAE,GAAW,EAAE,GAAG,OAAc;QACpF,IAAI,IAAI,CAAC,EAAE,IAAI,IAAI,EAAE;YACjB,IAAI,CAAC,EAAE,CAAC,sBAAsB,CAAC,IAAI,EAAE,IAAI,EAAE,GAAG,EAAE,GAAG,OAAO,CAAC,CAAC;SAC/D;KACJ;;;;;;;;;;;;;;;IAgBM,aAAa,CAAC,MAAc,EAAE,KAAY;QAC7C,IAAI,IAAI,CAAC,EAAE,IAAI,IAAI,EAAE;YACjB,IAAI,CAAC,EAAE,CAAC,aAAa,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;SACxC;KACJ;;;;;;;;IASM,UAAU,CAAC,KAAY;QAC1B,IAAI,IAAI,CAAC,EAAE,IAAI,IAAI,EAAE;YACjB,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;SAC7B;KACJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IA8CM,YAAY,CAAC,GAAQ;QACxB,IAAI,IAAI,CAAC,EAAE,IAAI,IAAI,EAAE;YACjB,IAAI,CAAC,EAAE,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;SAC7B;KACJ;;;;;;;;;IAUM,aAAa,CAAC,KAAa,EAAE,SAAiB;QACjD,IAAI,IAAI,CAAC,EAAE,IAAI,IAAI,EAAE;YACjB,IAAI,CAAC,EAAE,CAAC,aAAa,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC;SAC3C;KACJ;;;;;;;;;;;;;;IAeM,oBAAoB,CAAC,GAAW,EAAE,GAAW,EAAE,IAAW,EAAE,GAAG,MAAe;QACjF,IAAI,IAAI,CAAC,EAAE,IAAI,IAAI,EAAE;YACjB,IAAI,CAAC,EAAE,CAAC,oBAAoB,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,MAAM,CAAC,CAAC;SAC3D;KACJ;;;;;;;;;;;;IAaM,qBAAqB,CAAC,IAAW,EAAE,IAAc,EAAE,MAAe;QACrE,IAAI,IAAI,CAAC,EAAE,IAAI,IAAI,EAAE;YACjB,IAAI,CAAC,EAAE,CAAC,qBAAqB,CAAC,IAAI,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC;SACrD;KACJ;;;;;;;;;IAUM,uBAAuB,CAAC,IAAY,EAAE,IAAY;QACrD,IAAI,IAAI,CAAC,EAAE,IAAI,IAAI,EAAE;YACjB,IAAI,CAAC,EAAE,CAAC,uBAAuB,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;SAC/C;KACJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAiCM,mBAAmB,CAAC,OAAe,EAAE,QAAyB,EAAE,IAAmB,EAAE,OAAgB;QACxG,IAAI,IAAI,CAAC,GAAG,GAAG,OAAO,CAAC,IAAI,EAAE;YACzB,MAAM,IAAI,KAAK,EAAE,CAAC;SACrB;QACD,IAAI,IAAI,CAAC,EAAE,IAAI,IAAI,EAAE;YACjB,OAAO,IAAI,CAAC,EAAE,CAAC,mBAAmB,CAAC,OAAO,EAAE,QAAQ,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;SACxE;QACD,OAAO,IAAI,CAAC;KACf;;;;;;;;;;;;;;;;;;IAmBM,kBAAkB,CAAC,KAAY,EAAE,GAAU,EAAE,OAAc,EAAE,IAAmB;QACnF,IAAI,IAAI,CAAC,EAAE,IAAI,IAAI,EAAE;YACjB,IAAI,CAAC,EAAE,CAAC,kBAAkB,CAAC,KAAK,EAAE,GAAG,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;SACzD;KACJ;;;;;;;;;;;;;;;;;;;;;;IAuBM,uBAAuB,CAAC,OAAe,EAAE,QAAyB,EAAE,IAAmB,EAAE,OAAgB;QAC5G,IAAI,IAAI,CAAC,GAAG,GAAG,OAAO,CAAC,IAAI,EAAE;YACzB,MAAM,IAAI,KAAK,EAAE,CAAC;SACrB;QACD,IAAI,IAAI,CAAC,EAAE,IAAI,IAAI,EAAE;YACjB,OAAO,IAAI,CAAC,EAAE,CAAC,uBAAuB,CAAC,OAAO,EAAE,QAAQ,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;SAC5E;QACD,OAAO,IAAI,CAAC;KACf;;;;;;;;;;;;;;;;;;;;;;;;IAyBM,kBAAkB,CAAC,IAAmB,EAAE,IAAmB,EAAE,SAAwB,EAAE,KAAY,EAAE,GAAU,EAAE,KAAa;QACjI,IAAI,IAAI,CAAC,EAAE,IAAI,IAAI,EAAE;YACjB,IAAI,CAAC,EAAE,CAAC,kBAAkB,CAAC,IAAI,EAAE,IAAI,EAAE,SAAS,EAAE,KAAK,EAAE,GAAG,EAAE,KAAK,CAAC,CAAC;SACxE;KACJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IA+BM,4BAA4B,CAAC,OAAe,EAAE,QAAyB,EAAE,KAAc,EAAE,GAAY,EAAE,KAAe,EAAE,IAAmB,EAAE,OAAgB;QAChK,IAAI,IAAI,CAAC,GAAG,GAAG,OAAO,CAAC,IAAI,EAAE;YACzB,MAAM,IAAI,KAAK,EAAE,CAAC;SACrB;QACD,IAAI,IAAI,CAAC,EAAE,IAAI,IAAI,EAAE;YACjB,OAAO,IAAI,CAAC,EAAE,CAAC,4BAA4B,CAAC,OAAO,EAAE,QAAQ,EAAE,KAAK,EAAE,GAAG,EAAE,KAAK,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;SACpG;QACD,OAAO,IAAI,CAAC;KACf;;;;;;;;;;;;;IAcM,eAAe,CAAC,IAAY,EAAE,KAAY;QAC7C,IAAI,IAAI,CAAC,EAAE,IAAI,IAAI,EAAE;YACjB,IAAI,CAAC,EAAE,CAAC,eAAe,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;SACxC;KACJ;;;;;;;;;;IAWM,SAAS,CAAC,QAAgB,EAAE,SAAiB;QAChD,IAAI,IAAI,CAAC,EAAE,IAAI,IAAI,EAAE;YACjB,IAAI,CAAC,EAAE,CAAC,SAAS,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC;SAC1C;KACJ;;;;;;IAOM,QAAQ;QACX,IAAI,IAAI,CAAC,EAAE,IAAI,IAAI,EAAE;YACjB,IAAI,CAAC,EAAE,CAAC,QAAQ,EAAE,CAAC;SACtB;KACJ;;;ACp1BL;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MA0Ca,KAAK;IAgxCd,YAAY,KAAY;;;;QAvkCxB,gBAAW,GAAa,EAAE,CAAC;;;;QAK3B,eAAU,GAAa,EAAE,CAAC;;;;QAKlB,iBAAY,GAAa,EAAE,CAAC;;;;QAK5B,gBAAW,GAAa,EAAE,CAAC;;;;;;;;;;;;;;QAkC3B,oBAAe,GAAoB,IAAI,CAAC;QAuhC5C,IAAI,CAAC,cAAc,GAAG,CAAC,CAAC;QACxB,IAAI,CAAC,mBAAmB,GAAG,CAAC,CAAC;QAC7B,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;KACtB;IAlxCD,OAAO,mBAAmB,KAAK,IAAI,CAAC,KAAK,CAAC,oBAAoB,EAAE;QAAE,KAAK,CAAC,oBAAoB,GAAG,IAAI,CAAC;QAAC,KAAK,CAAC,sBAAsB,EAAE,CAAC;KAAE,EAAE;IA8DjI,OAAO,WAAW,KAAa,KAAK,CAAC,mBAAmB,EAAE,CAAC,CAAC,IAAI,KAAK,CAAC,MAAM,IAAI,IAAI,EAAE;QAAE,KAAK,CAAC,MAAM,GAAG,KAAK,CAAC,IAAI,GAAG,OAAO,CAAC;KAAE,CAAC,OAAO,KAAK,CAAC,MAAM,CAAC,EAAE;;IASrJ,OAAO,kBAAkB,KAAa,KAAK,CAAC,mBAAmB,EAAE,CAAC,CAAC,IAAI,KAAK,CAAC,aAAa,IAAI,IAAI,EAAE;QAAE,KAAK,CAAC,aAAa,GAAG,KAAK,CAAC,IAAI,GAAG,OAAO,CAAC;KAAE,CAAC,OAAO,KAAK,CAAC,aAAa,CAAC,EAAE;;IAoBjL,OAAO,QAAQ,KAAa,KAAK,CAAC,mBAAmB,EAAE,CAAC,CAAC,IAAI,KAAK,CAAC,GAAG,IAAI,IAAI,EAAE;QAAE,KAAK,CAAC,GAAG,GAAG,KAAK,CAAC,IAAI,GAAG,CAAC,CAAC;KAAE,CAAC,OAAO,KAAK,CAAC,GAAG,CAAC,EAAE;;IAOnI,OAAO,YAAY,KAAa,KAAK,CAAC,mBAAmB,EAAE,CAAC,CAAC,IAAI,KAAK,CAAC,OAAO,IAAI,IAAI,EAAE;QAAE,KAAK,CAAC,OAAO,GAAG,KAAK,CAAC,IAAI,GAAG,CAAC,CAAC;KAAE,CAAC,OAAO,KAAK,CAAC,OAAO,CAAC,EAAE;;IAOnJ,OAAO,SAAS,KAAa,KAAK,CAAC,mBAAmB,EAAE,CAAC,CAAC,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,EAAE;QAAE,KAAK,CAAC,IAAI,GAAG,KAAK,CAAC,IAAI,GAAG,EAAE,CAAC;KAAE,CAAC,OAAO,KAAK,CAAC,IAAI,CAAC,EAAE;;IAOxI,OAAO,SAAS,KAAa,KAAK,CAAC,mBAAmB,EAAE,CAAC,CAAC,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,EAAE;QAAE,KAAK,CAAC,IAAI,GAAG,KAAK,CAAC,IAAI,GAAG,EAAE,CAAC;KAAE,CAAC,OAAO,KAAK,CAAC,IAAI,CAAC,EAAE;;IAOxI,OAAO,UAAU,KAAa,KAAK,CAAC,mBAAmB,EAAE,CAAC,CAAC,IAAI,KAAK,CAAC,KAAK,IAAI,IAAI,EAAE;QAAE,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC,IAAI,GAAG,EAAE,CAAC;KAAE,CAAC,OAAO,KAAK,CAAC,KAAK,CAAC,EAAE;;IAO5I,OAAO,YAAY,KAAa,KAAK,CAAC,mBAAmB,EAAE,CAAC,CAAC,IAAI,KAAK,CAAC,OAAO,IAAI,IAAI,EAAE;QAAE,KAAK,CAAC,OAAO,GAAG,KAAK,CAAC,IAAI,GAAG,CAAC,CAAC;KAAE,CAAC,OAAO,KAAK,CAAC,OAAO,CAAC,EAAE;;IAOnJ,OAAO,UAAU,KAAa,KAAK,CAAC,mBAAmB,EAAE,CAAC,CAAC,IAAI,KAAK,CAAC,KAAK,IAAI,IAAI,EAAE;QAAE,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC,IAAI,GAAG,CAAC,CAAC;KAAE,CAAC,OAAO,KAAK,CAAC,KAAK,CAAC,EAAE;;IAO3I,OAAO,WAAW,KAAa,KAAK,CAAC,mBAAmB,EAAE,CAAC,CAAC,IAAI,KAAK,CAAC,MAAM,IAAI,IAAI,EAAE;QAAE,KAAK,CAAC,MAAM,GAAG,KAAK,CAAC,IAAI,GAAG,CAAC,CAAC;KAAE,CAAC,OAAO,KAAK,CAAC,MAAM,CAAC,EAAE;;IAO/I,OAAO,SAAS,KAAa,KAAK,CAAC,mBAAmB,EAAE,CAAC,CAAC,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,EAAE;QAAE,KAAK,CAAC,IAAI,GAAG,KAAK,CAAC,IAAI,GAAG,CAAC,CAAC;KAAE,CAAC,OAAO,KAAK,CAAC,IAAI,CAAC,EAAE;;IAOvI,OAAO,SAAS,KAAa,KAAK,CAAC,mBAAmB,EAAE,CAAC,CAAC,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,EAAE;QAAE,KAAK,CAAC,IAAI,GAAG,KAAK,CAAC,IAAI,GAAG,CAAC,CAAC;KAAE,CAAC,OAAO,KAAK,CAAC,IAAI,CAAC,EAAE;;IAOvI,OAAO,uBAAuB;QACjC,KAAK,CAAC,mBAAmB,EAAE,CAAC;QAC5B,IAAI,KAAK,CAAC,kBAAkB,IAAI,IAAI,EAAE;YAClC,KAAK,CAAC,kBAAkB,GAAG,KAAK,CAAC,IAAI,GAAG,CAAC,CAAC;SAC7C;QAAC,OAAO,KAAK,CAAC,kBAAkB,CAAC;KACrC;;IASM,OAAO,SAAS;QACnB,KAAK,CAAC,mBAAmB,EAAE,CAAC;QAC5B,OAAO,KAAK,CAAC,IAAI,CAAC;KACrB;;IAED,OAAO,sBAAsB;QACzB,IAAI,CAAS,CAAC;QACd,IAAI,CAAC,GAAa,IAAI,KAAK,CAAC,GAAG,CAAC,CAAC;QACjC,IAAI,CAAC,GAAW,4MAA4M,CAAC;QAC7N,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;YAC3B,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC,CAAC;SAC5D;QACD,KAAK,CAAC,IAAI,GAAG,CAAC,CAAC;KAClB;;;;;;;;;;;;;;;;;;;;;;;;IAqFM,GAAG,CAAC,EAAQ,EAAE,MAAY,EAAE,KAAW,EAAE,MAAY,EAAE,KAAW;QACrE,IAAI,CAAC,CAAC,EAAE,IAAI,IAAI,IAAI,EAAE,YAAY,WAAW,KAAK,EAAE,KAAK,IAAI,MAAM,CAAC,OAAO,MAAM,KAAK,QAAQ,KAAK,MAAM,KAAK,IAAI,CAAC,KAAK,CAAC,KAAK,IAAI,IAAI,IAAI,KAAK,YAAY,KAAK,KAAK,KAAK,KAAK,IAAI,CAAC,KAAK,CAAC,OAAO,MAAM,KAAK,QAAQ,KAAK,MAAM,KAAK,IAAI,CAAC,KAAK,CAAC,KAAK,IAAI,IAAI,IAAI,KAAK,YAAY,KAAK,KAAK,KAAK,KAAK,IAAI,CAAC,EAAE;YACxS,IAAI,MAAM,GAAG,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;YACnD,OAAY,CAAC;gBACT,IAAI,CAAC,GAAW,KAAK,CAAC,OAAO,CAAC,EAAE,EAAE,MAAM,EAAE,KAAK,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;gBACnE,QAAQ,CAAC,GAAG,KAAK,CAAC,MAAM,GAAG;oBACvB,IAAI,CAAC,WAAW,CAAC,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,QAAQ,EAAE,CAAC;iBAC5C;gBACD,IAAI,SAAS,GAAW,CAAC,CAAC;gBAC1B,KAAK,IAAI,CAAC,GAAW,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,EAAE,CAAC,EAAE;oBACrC,IAAI,KAAK,CAAC,CAAC,CAAC,KAAK,OAAO,CAAC,IAAI,IAAI,KAAK,CAAC,CAAC,CAAC,KAAK,OAAO,CAAC,MAAM,EAAE;wBAC1D,EAAE,SAAS,CAAC;qBACf;iBACJ;gBACD,IAAI,CAAC,UAAU,GAAG,IAAI,KAAK,CAAC,MAAM,GAAG,SAAS,CAAC,CAAC;gBAChD,KAAK,CAAC,OAAO,CAAC,EAAE,EAAE,MAAM,EAAE,KAAK,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;gBAClD,IAAI,CAAC,cAAc,GAAG,CAAC,CAAC;gBACxB,IAAI,CAAC,mBAAmB,GAAG,CAAC,CAAC;aAChC,GAAG,CAAC;SACR;aAAM,IAAI,CAAC,CAAC,OAAO,EAAE,KAAK,QAAQ,KAAK,EAAE,KAAK,IAAI,MAAM,CAAC,OAAO,MAAM,KAAK,QAAQ,KAAK,MAAM,KAAK,IAAI,CAAC,IAAI,KAAK,KAAK,SAAS,IAAI,MAAM,KAAK,SAAS,IAAI,KAAK,KAAK,SAAS,EAAE;YAC7K,OAAY,IAAI,CAAC,WAAW,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC;SAC5C;aAAM,IAAI,CAAC,CAAC,EAAE,IAAI,IAAI,IAAI,EAAE,YAAY,KAAK,KAAK,EAAE,KAAK,IAAI,KAAK,MAAM,KAAK,SAAS,IAAI,KAAK,KAAK,SAAS,IAAI,MAAM,KAAK,SAAS,IAAI,KAAK,KAAK,SAAS,EAAE;YAC3J,OAAY,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC;SAClC;aAAM;YAAE,MAAM,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAC;SAAE;KAClD;;;;;;;;;;;;;;;;;;;;;;;;IAyBO,OAAO,OAAO,CAAC,EAAe,EAAE,MAAc,EAAE,KAAY,EAAE,MAAgB;QAClF,IAAI,CAAC,GAAW,CAAC,CAAC;QAClB,KAAK,IAAI,CAAC,GAAW,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,EAAE,CAAC,EAAE;YACrC,IAAI,OAAO,KAAK,CAAC,CAAC,CAAC,KAAK,QAAQ,EAAE;gBAC9B,MAAM,CAAC,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,IAAI,mBAA2B,KAAK,CAAC,CAAC,CAAE,GAAG,CAAC,CAAC,CAAC;gBAClE,IAAI,KAAK,CAAC,CAAC,CAAC,KAAK,OAAO,CAAC,IAAI,IAAI,KAAK,CAAC,CAAC,CAAC,KAAK,OAAO,CAAC,MAAM,EAAE;oBAC1D,MAAM,CAAC,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,QAAQ,EAAE,CAAC;iBAClC;aACJ;iBAAM,IAAI,OAAO,KAAK,CAAC,CAAC,CAAC,KAAK,QAAQ,EAAE;gBACrC,MAAM,CAAC,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,aAAa,CAAS,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,aAAa,EAAE,CAAC,CAAC;aACtF;iBAAM;gBACH,MAAM,CAAC,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,kBAAkB,EAAE,GAAG,EAAE,CAAC,oBAAoB,CAAC,EAAE,EAAU,KAAK,CAAC,CAAC,CAAE,CAAC,QAAQ,CAAC,CAAC;aACtG;SACJ;QACD,OAAO,CAAC,CAAC;KACZ;;;;;;;;;;IAWD,SAAS,CAAC,CAAQ;QACd,IAAI,CAAC,WAAW,GAAG,CAAC,CAAC,WAAW,CAAC;QACjC,IAAI,CAAC,UAAU,GAAG,CAAC,CAAC,UAAU,CAAC;QAC/B,IAAI,CAAC,YAAY,GAAG,CAAC,CAAC,YAAY,CAAC;QACnC,IAAI,CAAC,WAAW,GAAG,CAAC,CAAC,WAAW,CAAC;QACjC,IAAI,CAAC,cAAc,GAAG,CAAC,CAAC,cAAc,CAAC;QACvC,IAAI,CAAC,mBAAmB,GAAG,CAAC,CAAC,mBAAmB,CAAC;QACjD,IAAI,CAAC,eAAe,GAAG,CAAC,CAAC,eAAe,CAAC;KAC5C;;;;;;;;IASO,GAAG,CAAC,KAAa;QACrB,IAAI,IAAI,CAAC,YAAY,IAAI,IAAI,IAAI,KAAK,IAAI,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE;YAChE,OAAO,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC;SAC9B;aAAM;YACH,IAAI,IAAI,GAAW,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;YAC5C,IAAI,IAAI,KAAK,CAAC,EAAE;gBACZ,IAAI,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC;aACzD;YACD,OAAO,IAAI,CAAC;SACf;KACJ;;;;;;;;;IAUO,WAAW,CAAC,KAAa,EAAE,IAAY;QAC3C,IAAI,IAAI,CAAC,YAAY,IAAI,IAAI,EAAE;YAC3B,IAAI,CAAC,YAAY,GAAG,IAAI,KAAK,CAAC,EAAE,CAAC,CAAC;SACrC;QACD,IAAI,CAAC,GAAW,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC;QACzC,IAAI,KAAK,IAAI,CAAC,EAAE;YACZ,IAAI,CAAC,GAAa,IAAI,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;YACxD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;gBACxB,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;aAC/B;;YAED,IAAI,CAAC,YAAY,GAAG,CAAC,CAAC;SACzB;QACD,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC;KACnC;;;;;;;IAQO,QAAQ,CAAC,IAAY;QACzB,IAAI,IAAI,CAAC,WAAW,IAAI,IAAI,EAAE;YAC1B,IAAI,CAAC,WAAW,GAAG,IAAI,KAAK,CAAC,EAAE,CAAC,CAAC;SACpC;QACD,IAAI,CAAC,GAAW,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC;QACxC,IAAI,IAAI,CAAC,cAAc,IAAI,CAAC,EAAE;YAC1B,IAAI,CAAC,GAAa,IAAI,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,cAAc,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;YACtE,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;gBACxB,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;aAC9B;;YAED,IAAI,CAAC,WAAW,GAAG,CAAC,CAAC;SACxB;QACD,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,cAAc,EAAE,CAAC,GAAG,IAAI,CAAC;QAC/C,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACnB,IAAI,GAAG,GAAW,IAAI,CAAC,KAAK,CAAC,aAAa,GAAG,IAAI,CAAC,cAAc,CAAC;QACjE,IAAI,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,cAAc,EAAE;YACjC,IAAI,CAAC,KAAK,CAAC,cAAc,GAAG,GAAG,CAAC;SACnC;KACJ;;;;;;;;;;;IAYM,IAAI,CAAC,EAAQ,EAAE,IAAU;QAC5B,IAAI,CAAC,CAAC,EAAE,IAAI,IAAI,IAAI,EAAE,YAAY,WAAW,KAAK,EAAE,KAAK,IAAI,MAAM,CAAC,OAAO,IAAI,KAAK,QAAQ,KAAK,IAAI,KAAK,IAAI,CAAC,EAAE;YAC7G,IAAI,MAAM,GAAG,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;YACnD,OAAY,CAAC;gBACT,IAAI,IAAI,GAAW,KAAK,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC;gBACxC,IAAI,IAAI,KAAK,CAAC,EAAE;oBACZ,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;oBAChB,IAAI,IAAI,KAAK,KAAK,CAAC,SAAS,EAAE,IAAI,IAAI,KAAK,KAAK,CAAC,WAAW,EAAE,EAAE;wBAC5D,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC;qBAC/B;iBACJ;aACJ,GAAG,CAAC;SACR;aAAM,IAAI,CAAC,CAAC,OAAO,EAAE,KAAK,QAAQ,KAAK,EAAE,KAAK,IAAI,KAAK,IAAI,KAAK,SAAS,EAAE;YACxE,OAAY,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;SACjC;aAAM;YAAE,MAAM,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAC;SAAE;KAClD;;;;;;;;;;IAWO,OAAO,IAAI,CAAC,EAAe,EAAE,IAAY;QAC7C,IAAI,CAAS,CAAC;QACd,IAAI,KAAK,GAAW,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QACvE,SAAS,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC;YACvB,KAAK,GAAG;gBACJ,OAAO,CAAC,CAAC;YACb,KAAK,GAAG,CAAC;YACT,KAAK,GAAG,CAAC;YACT,KAAK,GAAG,CAAC;YACT,KAAK,GAAG,CAAC;YACT,KAAK,GAAG;gBACJ,OAAO,KAAK,CAAC,YAAY,EAAE,CAAC;YAChC,KAAK,GAAG;gBACJ,OAAO,KAAK,CAAC,UAAU,EAAE,CAAC;YAC9B,KAAK,GAAG;gBACJ,OAAO,KAAK,CAAC,SAAS,EAAE,CAAC;YAC7B,KAAK,GAAG;gBACJ,OAAO,KAAK,CAAC,WAAW,EAAE,CAAC;YAC/B,KAAK,GAAG;gBACJ,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,GAAG,CAAC,EAAE,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;gBAC/C,OAAO,KAAK,CAAC,WAAW,EAAE,GAAG,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;YAC/C;gBACI,IAAI,IAAY,CAAC;gBACjB,IAAI,IAAI,GAAW,KAAK,GAAG,CAAC,CAAC;gBAC7B,QAAQ,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,GAAG,GAAG;oBAChC,EAAE,IAAI,CAAC;iBACV;gBACD,SAAS,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;oBACtB,KAAK,GAAG;wBACJ,IAAI,GAAG,KAAK,CAAC,YAAY,EAAE,CAAC;wBAC5B,MAAM;oBACV,KAAK,GAAG;wBACJ,IAAI,GAAG,KAAK,CAAC,SAAS,EAAE,CAAC;wBACzB,MAAM;oBACV,KAAK,GAAG;wBACJ,IAAI,GAAG,KAAK,CAAC,SAAS,EAAE,CAAC;wBACzB,MAAM;oBACV,KAAK,GAAG;wBACJ,IAAI,GAAG,KAAK,CAAC,UAAU,EAAE,CAAC;wBAC1B,MAAM;oBACV,KAAK,GAAG;wBACJ,IAAI,GAAG,KAAK,CAAC,YAAY,EAAE,CAAC;wBAC5B,MAAM;oBACV,KAAK,GAAG;wBACJ,IAAI,GAAG,KAAK,CAAC,UAAU,EAAE,CAAC;wBAC1B,MAAM;oBACV,KAAK,GAAG;wBACJ,IAAI,GAAG,KAAK,CAAC,SAAS,EAAE,CAAC;wBACzB,MAAM;oBACV,KAAK,GAAG;wBACJ,IAAI,GAAG,KAAK,CAAC,WAAW,EAAE,CAAC;wBAC3B,MAAM;oBACV;wBACI,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,GAAG,CAAC,EAAE,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;wBAC9C,IAAI,GAAG,KAAK,CAAC,WAAW,EAAE,GAAG,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;iBAClD;gBACD,OAAO,CAAC,IAAI,GAAG,KAAK,KAAK,EAAE,GAAG,IAAI,CAAC;SAC1C;KACJ;;;;;;IAOO,IAAI;QACR,IAAI,IAAI,CAAC,cAAc,GAAG,CAAC,EAAE;YACzB,OAAO,IAAI,CAAC,WAAW,CAAC,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC;SAClD;aAAM;YACH,OAAO,KAAK,CAAC,KAAK,GAAG,EAAE,EAAE,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;SACtD;KACJ;;;;;;;IAQO,OAAO,CAAC,QAAgB;QAC5B,IAAI,IAAI,CAAC,cAAc,IAAI,QAAQ,EAAE;YACjC,IAAI,CAAC,cAAc,IAAI,QAAQ,CAAC;SACnC;aAAM;YACH,IAAI,CAAC,KAAK,CAAC,aAAa,IAAI,QAAQ,GAAG,IAAI,CAAC,cAAc,CAAC;YAC3D,IAAI,CAAC,cAAc,GAAG,CAAC,CAAC;SAC3B;KACJ;;;;;;;;;IAUM,GAAG,CAAC,IAAsB;QAC7B,KAAK,CAAC,OAAO,IAAI,KAAK,QAAQ,KAAK,IAAI,KAAK,IAAI,GAAG;YAC/C,IAAI,MAAM,GAAG,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;YACnD,OAAY,CAAC;gBACT,IAAI,CAAC,GAAW,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;gBAC/B,IAAI,CAAC,KAAK,GAAG,EAAE;oBACX,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,0BAA0B,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;iBAC9D;qBAAM,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,GAAG,EAAE;oBAC/B,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;iBACf;qBAAM;oBACH,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;iBACf;aACJ,GAAG,CAAC;SACR;aAAM,KAAK,CAAC,OAAO,IAAI,KAAK,QAAQ,KAAK,IAAI,KAAK,IAAI,GAAG;YACtD,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;SAC7B;aAAM,IAAI,IAAI,KAAK,SAAS,EAAE;YAC3B,OAAO,IAAI,CAAC,IAAI,EAAE,CAAC;SACtB;aAAM;YAAE,MAAM,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAC;SAAE;KAClD;;;;;;;;IASO,QAAQ,CAAC,KAAa;QAC1B,IAAI,IAAI,CAAC,eAAe,IAAI,IAAI,EAAE;YAC9B,IAAI,CAAC,eAAe,GAAG,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC;SACvC;QACD,IAAI,CAAC,GAAW,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC;QAC5C,IAAI,IAAI,CAAC,mBAAmB,IAAI,CAAC,EAAE;YAC/B,IAAI,CAAC,GAAa,IAAI,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,mBAAmB,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;YAC3E,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;gBACxB,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;aAClC;;YAED,IAAI,CAAC,eAAe,GAAG,CAAC,CAAC;SAC5B;QACD,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,mBAAmB,EAAE,CAAC,GAAG,KAAK,CAAC;KAC5D;;;;;;;;;;;;IAaM,IAAI,CAAC,EAAQ,EAAE,CAAO;QACzB,IAAI,CAAC,CAAC,EAAE,IAAI,IAAI,IAAI,EAAE,YAAY,WAAW,KAAK,EAAE,KAAK,IAAI,MAAM,CAAC,OAAO,CAAC,KAAK,QAAQ,KAAK,CAAC,KAAK,IAAI,CAAC,EAAE;YACvG,IAAI,MAAM,GAAG,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;YACnD,OAAO,CAAC;gBACJ,IAAI,CAAS,CAAC;gBACd,IAAI,CAAC,KAAK,KAAK,CAAC,uBAAuB,EAAE,EAAE;oBACvC,CAAC,GAAG,KAAK,CAAC,WAAW,EAAE,GAAG,EAAE,CAAC,OAAO,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC;iBACrD;qBAAM,IAAI,CAAC,CAAC,IAAI,KAAK,CAAC,GAAG,GAAG,KAAK,CAAC,SAAS,CAAC,MAAM,KAAK,CAAC,kBAAkB,EAAE,EAAE;oBAC3E,IAAI,IAAI,GAAW,EAAE,CAAC,SAAS,CAAC,CAAC,GAAG,KAAK,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC;oBAC9D,CAAC,GAAG,KAAK,CAAC,WAAW,EAAE,GAAG,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;iBAC9C;qBAAM;oBACH,OAAO,CAAC,CAAC;iBACZ;gBACD,KAAK,IAAI,CAAC,GAAW,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,mBAAmB,EAAE,EAAE,CAAC,EAAE;oBACvD,IAAI,CAAC,GAAW,IAAI,CAAC,eAAgB,CAAC,CAAC,CAAC,CAAC;oBACzC,IAAI,GAAG,GAAW,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC;oBAChC,IAAI,IAAI,GAAW,CAAC,GAAG,KAAK,CAAC,IAAI,CAAC;oBAClC,IAAI,IAAI,KAAK,KAAK,CAAC,KAAK,EAAE;wBACtB,CAAC,GAAG,GAAG,GAAG,IAAI,CAAC,WAAW,CAAC,CAAC,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC;qBAC/C;yBAAM,IAAI,IAAI,KAAK,KAAK,CAAC,KAAK,EAAE;wBAC7B,CAAC,GAAG,GAAG,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,IAAI,CAAC,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;qBACzE;oBACD,IAAI,CAAC,KAAK,CAAC,EAAE;wBACT,OAAO,CAAC,CAAC;qBACZ;iBACJ;gBACD,OAAO,CAAC,CAAC;aACZ,GAAG,CAAC;SACR;aAAM,IAAI,CAAC,CAAC,OAAO,EAAE,KAAK,QAAQ,KAAK,EAAE,KAAK,IAAI,KAAK,CAAC,KAAK,SAAS,EAAE;YACrE,OAAY,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;SACjC;aAAM;YAAE,MAAM,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAC;SAAE;KAClD;;;;;;;;;;;;;;IAeD,cAAc,CAAC,EAAe,EAAE,MAAc,EAAE,IAAY,EAAE,SAAiB;QAC3E,IAAI,CAAC,WAAW,GAAG,IAAI,KAAK,CAAC,SAAS,CAAC,CAAC;QACxC,IAAI,CAAC,UAAU,GAAG,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC;QAC/B,IAAI,CAAC,GAAW,CAAC,CAAC;QAClB,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,UAAU,MAAM,CAAC,EAAE;YACrC,IAAI,CAAC,MAAM,GAAG,YAAY,CAAC,eAAe,MAAM,CAAC,EAAE;gBAC/C,IAAI,CAAC,WAAW,CAAC,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,WAAW,EAAE,GAAG,EAAE,CAAC,OAAO,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC;aACzE;iBAAM;gBACH,IAAI,CAAC,WAAW,CAAC,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,uBAAuB,EAAE,CAAC;aAC3D;SACJ;QACD,KAAK,IAAI,CAAC,GAAW,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;YAC1C,IAAI,CAAC,GAAW,KAAK,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,aAAa,EAAE,CAAC,CAAC;YACxD,IAAI,CAAC,WAAW,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;YAC1B,IAAI,CAAC,KAAK,KAAK,CAAC,SAAS,EAAE,IAAI,CAAC,KAAK,KAAK,CAAC,WAAW,EAAE,EAAE;gBACtD,IAAI,CAAC,WAAW,CAAC,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,QAAQ,EAAE,CAAC;aAC5C;SACJ;QACD,QAAQ,CAAC,GAAG,SAAS,GAAG;YACpB,IAAI,CAAC,WAAW,CAAC,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,QAAQ,EAAE,CAAC;SAC5C;KACJ;;;;;;;;;;;;;IAcD,OAAO,CAAC,MAAc,EAAE,GAAW,EAAE,EAAsB,EAAE,IAAiB;QAC1E,IAAI,EAAU,CAAC;QACf,IAAI,EAAU,CAAC;QACf,IAAI,EAAU,CAAC;QACf,IAAI,EAAU,CAAC;QACf,SAAS,MAAM;YACX,KAAK,OAAO,CAAC,GAAG,CAAC;YACjB,KAAK,OAAO,CAAC,IAAI,CAAC;YAClB,KAAK,OAAO,CAAC,IAAI,CAAC;YAClB,KAAK,OAAO,CAAC,IAAI,CAAC;YAClB,KAAK,OAAO,CAAC,IAAI,CAAC;YAClB,KAAK,OAAO,CAAC,GAAG,CAAC;YACjB,KAAK,OAAO,CAAC,GAAG,CAAC;YACjB,KAAK,OAAO,CAAC,GAAG,CAAC;YACjB,KAAK,OAAO,CAAC,IAAI,CAAC;YAClB,KAAK,OAAO,CAAC,MAAM;gBACf,MAAM;YACV,KAAK,OAAO,CAAC,WAAW;gBACpB,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE,CAAC,CAAC;gBAC7B,MAAM;YACV,KAAK,OAAO,CAAC,SAAS,CAAC;YACvB,KAAK,OAAO,CAAC,QAAQ,CAAC;YACtB,KAAK,OAAO,CAAC,QAAQ,CAAC;YACtB,KAAK,OAAO,CAAC,QAAQ,CAAC;YACtB,KAAK,OAAO,CAAC,QAAQ,CAAC;YACtB,KAAK,OAAO,CAAC,QAAQ,CAAC;YACtB,KAAK,OAAO,CAAC,QAAQ,CAAC;YACtB,KAAK,OAAO,CAAC,MAAM,CAAC;YACpB,KAAK,OAAO,CAAC,MAAM,CAAC;YACpB,KAAK,OAAO,CAAC,KAAK;gBACd,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,YAAY,EAAE,CAAC,CAAC;gBAChC,MAAM;YACV,KAAK,OAAO,CAAC,QAAQ,CAAC;YACtB,KAAK,OAAO,CAAC,QAAQ,CAAC;YACtB,KAAK,OAAO,CAAC,KAAK;gBACd,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE,CAAC,CAAC;gBAC7B,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC;gBAC5B,MAAM;YACV,KAAK,OAAO,CAAC,QAAQ,CAAC;YACtB,KAAK,OAAO,CAAC,QAAQ,CAAC;YACtB,KAAK,OAAO,CAAC,QAAQ,CAAC;YACtB,KAAK,OAAO,CAAC,KAAK;gBACd,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,CAAC,CAAC;gBAC9B,MAAM;YACV,KAAK,OAAO,CAAC,QAAQ,CAAC;YACtB,KAAK,OAAO,CAAC,QAAQ,CAAC;YACtB,KAAK,OAAO,CAAC,KAAK;gBACd,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC,CAAC;gBAC/B,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC;gBAC5B,MAAM;YACV,KAAK,OAAO,CAAC,GAAG;gBACZ,MAAM,CAAC,EAAE,CAAC,CAAC;gBACX,MAAM,CAAC,IAAI,CAAC,CAAC;gBACb,SAAS,IAAI,CAAC,IAAI;oBACd,KAAK,WAAW,CAAC,GAAG;wBAChB,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,YAAY,EAAE,CAAC,CAAC;wBAChC,MAAM;oBACV,KAAK,WAAW,CAAC,IAAI;wBACjB,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE,CAAC,CAAC;wBAC7B,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC;wBAC5B,MAAM;oBACV,KAAK,WAAW,CAAC,KAAK;wBAClB,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,CAAC,CAAC;wBAC9B,MAAM;oBACV,KAAK,WAAW,CAAC,MAAM;wBACnB,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC,CAAC;wBAC/B,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC;wBAC5B,MAAM;oBACV,KAAK,WAAW,CAAC,KAAK;wBAClB,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,WAAW,EAAE,GAAG,EAAE,CAAC,OAAO,CAAC,iBAAiB,CAAC,CAAC,CAAC;wBAC/D,MAAM;oBACV,KAAK,WAAW,CAAC,GAAG;wBAChB,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,WAAW,EAAE,GAAG,EAAE,CAAC,OAAO,CAAC,kBAAkB,CAAC,CAAC,CAAC;wBAChE,MAAM;oBACV,KAAK,WAAW,CAAC,KAAK;wBAClB,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,WAAW,EAAE,GAAG,EAAE,CAAC,OAAO,CAAC,6BAA6B,CAAC,CAAC,CAAC;wBAC3E,MAAM;oBACV;wBACI,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,WAAW,EAAE,GAAG,EAAE,CAAC,OAAO,CAAC,+BAA+B,CAAC,CAAC,CAAC;iBACpF;gBACD,MAAM;YACV,KAAK,OAAO,CAAC,KAAK;gBACd,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;gBACzB,MAAM;YACV,KAAK,OAAO,CAAC,MAAM,CAAC;YACpB,KAAK,OAAO,CAAC,MAAM,CAAC;YACpB,KAAK,OAAO,CAAC,MAAM,CAAC;YACpB,KAAK,OAAO,CAAC,MAAM;gBACf,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;gBACZ,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,YAAY,EAAE,CAAC,CAAC;gBAChC,MAAM;YACV,KAAK,OAAO,CAAC,MAAM,CAAC;YACpB,KAAK,OAAO,CAAC,GAAG;gBACZ,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;gBACZ,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE,CAAC,CAAC;gBAC7B,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC;gBAC5B,MAAM;YACV,KAAK,OAAO,CAAC,MAAM;gBACf,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;gBACZ,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,CAAC,CAAC;gBAC9B,MAAM;YACV,KAAK,OAAO,CAAC,MAAM,CAAC;YACpB,KAAK,OAAO,CAAC,GAAG;gBACZ,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;gBACZ,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC,CAAC;gBAC/B,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC;gBAC5B,MAAM;YACV,KAAK,OAAO,CAAC,MAAM;gBACf,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;gBACZ,EAAE,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;gBAChB,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,UAAU,GAAG,EAAE,CAAC,CAAC;gBACjC,MAAM;YACV,KAAK,OAAO,CAAC,MAAM,CAAC;YACpB,KAAK,OAAO,CAAC,MAAM,CAAC;YACpB,KAAK,OAAO,CAAC,MAAM;gBACf,EAAE,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;gBAChB,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;gBAClB,IAAI,GAAG,GAAG,CAAC,EAAE;oBACT,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC;oBACvB,IAAI,EAAE,KAAK,KAAK,CAAC,SAAS,EAAE,IAAI,EAAE,KAAK,KAAK,CAAC,WAAW,EAAE,EAAE;wBACxD,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,EAAE,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC;qBACvC;yBAAM,IAAI,CAAC,EAAE,GAAG,KAAK,CAAC,IAAI,MAAM,KAAK,CAAC,IAAI,EAAE;wBACzC,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,EAAE,EAAE,GAAG,KAAK,CAAC,qBAAqB,CAAC,CAAC;qBACvD;iBACJ;gBACD,MAAM;YACV,KAAK,OAAO,CAAC,MAAM,CAAC;YACpB,KAAK,OAAO,CAAC,MAAM;gBACf,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;gBACZ,EAAE,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;gBAChB,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;gBAClB,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,EAAE,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC;gBACpC,IAAI,GAAG,GAAG,CAAC,EAAE;oBACT,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC;oBACvB,IAAI,EAAE,KAAK,KAAK,CAAC,SAAS,EAAE,IAAI,EAAE,KAAK,KAAK,CAAC,WAAW,EAAE,EAAE;wBACxD,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,EAAE,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC;qBACvC;yBAAM,IAAI,CAAC,EAAE,GAAG,KAAK,CAAC,IAAI,MAAM,KAAK,CAAC,IAAI,EAAE;wBACzC,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,EAAE,EAAE,GAAG,KAAK,CAAC,qBAAqB,CAAC,CAAC;qBACvD;iBACJ;gBACD,MAAM;YACV,KAAK,OAAO,CAAC,OAAO,CAAC;YACrB,KAAK,OAAO,CAAC,OAAO,CAAC;YACrB,KAAK,OAAO,CAAC,OAAO,CAAC;YACrB,KAAK,OAAO,CAAC,OAAO,CAAC;YACrB,KAAK,OAAO,CAAC,OAAO,CAAC;YACrB,KAAK,OAAO,CAAC,OAAO;gBAChB,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;gBACZ,MAAM;YACV,KAAK,OAAO,CAAC,OAAO,CAAC;YACrB,KAAK,OAAO,CAAC,OAAO;gBAChB,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;gBACZ,MAAM;YACV,KAAK,OAAO,CAAC,GAAG,CAAC;YACjB,KAAK,OAAO,CAAC,IAAI,CAAC;YAClB,KAAK,OAAO,CAAC,IAAI,CAAC;YAClB,KAAK,OAAO,CAAC,IAAI,CAAC;YAClB,KAAK,OAAO,CAAC,IAAI,CAAC;YAClB,KAAK,OAAO,CAAC,IAAI,CAAC;YAClB,KAAK,OAAO,CAAC,IAAI,CAAC;YAClB,KAAK,OAAO,CAAC,OAAO,CAAC;YACrB,KAAK,OAAO,CAAC,OAAO,CAAC;YACrB,KAAK,OAAO,CAAC,OAAO,CAAC;YACrB,KAAK,OAAO,CAAC,WAAW,CAAC;YACzB,KAAK,OAAO,CAAC,YAAY,CAAC;YAC1B,KAAK,OAAO,CAAC,MAAM,CAAC;YACpB,KAAK,OAAO,CAAC,YAAY,CAAC;YAC1B,KAAK,OAAO,CAAC,WAAW,CAAC;YACzB,KAAK,OAAO,CAAC,MAAM,CAAC;YACpB,KAAK,OAAO,CAAC,SAAS;gBAClB,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;gBACZ,MAAM;YACV,KAAK,OAAO,CAAC,IAAI,CAAC;YAClB,KAAK,OAAO,CAAC,SAAS,CAAC;YACvB,KAAK,OAAO,CAAC,SAAS,CAAC;YACvB,KAAK,OAAO,CAAC,SAAS,CAAC;YACvB,KAAK,OAAO,CAAC,SAAS,CAAC;YACvB,KAAK,OAAO,CAAC,SAAS,CAAC;YACvB,KAAK,OAAO,CAAC,SAAS,CAAC;YACvB,KAAK,OAAO,CAAC,SAAS,CAAC;YACvB,KAAK,OAAO,CAAC,SAAS,CAAC;YACvB,KAAK,OAAO,CAAC,OAAO,CAAC;YACrB,KAAK,OAAO,CAAC,OAAO;gBAChB,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;gBACZ,MAAM;YACV,KAAK,OAAO,CAAC,GAAG;gBACZ,EAAE,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;gBAChB,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;gBACd,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;gBACd,MAAM;YACV,KAAK,OAAO,CAAC,MAAM;gBACf,EAAE,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;gBAChB,EAAE,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;gBAChB,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;gBACd,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;gBACd,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;gBACd,MAAM;YACV,KAAK,OAAO,CAAC,MAAM;gBACf,EAAE,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;gBAChB,EAAE,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;gBAChB,EAAE,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;gBAChB,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;gBACd,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;gBACd,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;gBACd,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;gBACd,MAAM;YACV,KAAK,OAAO,CAAC,IAAI;gBACb,EAAE,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;gBAChB,EAAE,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;gBAChB,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;gBACd,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;gBACd,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;gBACd,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;gBACd,MAAM;YACV,KAAK,OAAO,CAAC,OAAO;gBAChB,EAAE,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;gBAChB,EAAE,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;gBAChB,EAAE,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;gBAChB,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;gBACd,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;gBACd,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;gBACd,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;gBACd,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;gBACd,MAAM;YACV,KAAK,OAAO,CAAC,OAAO;gBAChB,EAAE,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;gBAChB,EAAE,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;gBAChB,EAAE,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;gBAChB,EAAE,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;gBAChB,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;gBACd,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;gBACd,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;gBACd,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;gBACd,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;gBACd,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;gBACd,MAAM;YACV,KAAK,OAAO,CAAC,IAAI;gBACb,EAAE,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;gBAChB,EAAE,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;gBAChB,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;gBACd,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;gBACd,MAAM;YACV,KAAK,OAAO,CAAC,IAAI,CAAC;YAClB,KAAK,OAAO,CAAC,IAAI,CAAC;YAClB,KAAK,OAAO,CAAC,IAAI,CAAC;YAClB,KAAK,OAAO,CAAC,IAAI,CAAC;YAClB,KAAK,OAAO,CAAC,IAAI,CAAC;YAClB,KAAK,OAAO,CAAC,IAAI,CAAC;YAClB,KAAK,OAAO,CAAC,GAAG,CAAC;YACjB,KAAK,OAAO,CAAC,IAAI,CAAC;YAClB,KAAK,OAAO,CAAC,IAAI,CAAC;YAClB,KAAK,OAAO,CAAC,IAAI,CAAC;YAClB,KAAK,OAAO,CAAC,KAAK,CAAC;YACnB,KAAK,OAAO,CAAC,GAAG,CAAC;YACjB,KAAK,OAAO,CAAC,GAAG,CAAC;YACjB,KAAK,OAAO,CAAC,KAAK,CAAC;YACnB,KAAK,OAAO,CAAC,KAAK;gBACd,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;gBACZ,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,YAAY,EAAE,CAAC,CAAC;gBAChC,MAAM;YACV,KAAK,OAAO,CAAC,IAAI,CAAC;YAClB,KAAK,OAAO,CAAC,IAAI,CAAC;YAClB,KAAK,OAAO,CAAC,IAAI,CAAC;YAClB,KAAK,OAAO,CAAC,IAAI,CAAC;YAClB,KAAK,OAAO,CAAC,IAAI,CAAC;YAClB,KAAK,OAAO,CAAC,IAAI,CAAC;YAClB,KAAK,OAAO,CAAC,GAAG,CAAC;YACjB,KAAK,OAAO,CAAC,IAAI;gBACb,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;gBACZ,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE,CAAC,CAAC;gBAC7B,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC;gBAC5B,MAAM;YACV,KAAK,OAAO,CAAC,IAAI,CAAC;YAClB,KAAK,OAAO,CAAC,IAAI,CAAC;YAClB,KAAK,OAAO,CAAC,IAAI,CAAC;YAClB,KAAK,OAAO,CAAC,IAAI,CAAC;YAClB,KAAK,OAAO,CAAC,IAAI,CAAC;YAClB,KAAK,OAAO,CAAC,GAAG,CAAC;YACjB,KAAK,OAAO,CAAC,GAAG;gBACZ,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;gBACZ,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,CAAC,CAAC;gBAC9B,MAAM;YACV,KAAK,OAAO,CAAC,IAAI,CAAC;YAClB,KAAK,OAAO,CAAC,IAAI,CAAC;YAClB,KAAK,OAAO,CAAC,IAAI,CAAC;YAClB,KAAK,OAAO,CAAC,IAAI,CAAC;YAClB,KAAK,OAAO,CAAC,IAAI;gBACb,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;gBACZ,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC,CAAC;gBAC/B,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC;gBAC5B,MAAM;YACV,KAAK,OAAO,CAAC,IAAI,CAAC;YAClB,KAAK,OAAO,CAAC,IAAI,CAAC;YAClB,KAAK,OAAO,CAAC,KAAK;gBACd,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;gBACZ,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE,CAAC,CAAC;gBAC7B,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC;gBAC5B,MAAM;YACV,KAAK,OAAO,CAAC,IAAI;gBACb,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,YAAY,EAAE,CAAC,CAAC;gBACpC,MAAM;YACV,KAAK,OAAO,CAAC,GAAG,CAAC;YACjB,KAAK,OAAO,CAAC,GAAG;gBACZ,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;gBACZ,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE,CAAC,CAAC;gBAC7B,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC;gBAC5B,MAAM;YACV,KAAK,OAAO,CAAC,GAAG;gBACZ,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;gBACZ,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,CAAC,CAAC;gBAC9B,MAAM;YACV,KAAK,OAAO,CAAC,GAAG,CAAC;YACjB,KAAK,OAAO,CAAC,GAAG;gBACZ,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;gBACZ,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC,CAAC;gBAC/B,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC;gBAC5B,MAAM;YACV,KAAK,OAAO,CAAC,GAAG,CAAC;YACjB,KAAK,OAAO,CAAC,WAAW,CAAC;YACzB,KAAK,OAAO,CAAC,UAAU;gBACnB,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;gBACZ,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,YAAY,EAAE,CAAC,CAAC;gBAChC,MAAM;YACV,KAAK,OAAO,CAAC,IAAI,CAAC;YAClB,KAAK,OAAO,CAAC,KAAK,CAAC;YACnB,KAAK,OAAO,CAAC,KAAK;gBACd,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;gBACZ,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,YAAY,EAAE,CAAC,CAAC;gBAChC,MAAM;YACV,KAAK,OAAO,CAAC,GAAG,CAAC;YACjB,KAAK,OAAO,CAAC,GAAG;gBACZ,MAAM,IAAI,KAAK,CAAC,qDAAqD,CAAC,CAAC;YAC3E,KAAK,OAAO,CAAC,SAAS;gBAClB,MAAM,CAAC,IAAI,CAAC,CAAC;gBACb,IAAI,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;gBAC5B,MAAM;YACV,KAAK,OAAO,CAAC,SAAS;gBAClB,MAAM,CAAC,IAAI,CAAC,CAAC;gBACb,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;gBACvB,MAAM;YACV,KAAK,OAAO,CAAC,QAAQ;gBACjB,MAAM,CAAC,IAAI,CAAC,CAAC;gBACb,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;gBACZ,IAAI,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;gBAC5B,MAAM;YACV,KAAK,OAAO,CAAC,QAAQ;gBACjB,MAAM,CAAC,IAAI,CAAC,CAAC;gBACb,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;gBACvB,IAAI,CAAC,GAAG,EAAE,CAAC;gBACX,MAAM;YACV,KAAK,OAAO,CAAC,aAAa,CAAC;YAC3B,KAAK,OAAO,CAAC,aAAa,CAAC;YAC3B,KAAK,OAAO,CAAC,YAAY,CAAC;YAC1B,KAAK,OAAO,CAAC,eAAe;gBACxB,MAAM,CAAC,IAAI,CAAC,CAAC;gBACb,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;gBACvB,IAAI,MAAM,KAAK,OAAO,CAAC,YAAY,EAAE;oBACjC,EAAE,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;oBAChB,IAAI,MAAM,KAAK,OAAO,CAAC,aAAa,IAAI,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;wBACpE,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;qBACjB;iBACJ;gBACD,IAAI,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;gBAC5B,MAAM;YACV,KAAK,OAAO,CAAC,aAAa;gBACtB,MAAM,CAAC,IAAI,CAAC,CAAC;gBACb,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;gBACvB,IAAI,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;gBAC5B,MAAM;YACV,KAAK,OAAO,CAAC,GAAG;gBACZ,MAAM,CAAC,IAAI,CAAC,CAAC;gBACb,MAAM,CAAC,EAAE,CAAC,CAAC;gBACX,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,kBAAkB,EAAE,GAAG,EAAE,CAAC,oBAAoB,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,CAAC;gBACnF,MAAM;YACV,KAAK,OAAO,CAAC,QAAQ;gBACjB,IAAI,CAAC,GAAG,EAAE,CAAC;gBACX,SAAS,GAAG;oBACR,KAAK,OAAO,CAAC,SAAS;wBAClB,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,GAAG,KAAK,CAAC,YAAY,EAAE,CAAC,CAAC;wBACjD,MAAM;oBACV,KAAK,OAAO,CAAC,MAAM;wBACf,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,GAAG,KAAK,CAAC,SAAS,EAAE,CAAC,CAAC;wBAC9C,MAAM;oBACV,KAAK,OAAO,CAAC,MAAM;wBACf,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,GAAG,KAAK,CAAC,SAAS,EAAE,CAAC,CAAC;wBAC9C,MAAM;oBACV,KAAK,OAAO,CAAC,OAAO;wBAChB,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,GAAG,KAAK,CAAC,UAAU,EAAE,CAAC,CAAC;wBAC/C,MAAM;oBACV,KAAK,OAAO,CAAC,KAAK;wBACd,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,GAAG,KAAK,CAAC,YAAY,EAAE,CAAC,CAAC;wBACjD,MAAM;oBACV,KAAK,OAAO,CAAC,OAAO;wBAChB,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,GAAG,KAAK,CAAC,UAAU,EAAE,CAAC,CAAC;wBAC/C,MAAM;oBACV,KAAK,OAAO,CAAC,QAAQ;wBACjB,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,GAAG,KAAK,CAAC,WAAW,EAAE,CAAC,CAAC;wBAChD,MAAM;oBACV;wBACI,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,GAAG,KAAK,CAAC,SAAS,EAAE,CAAC,CAAC;wBAC9C,MAAM;iBACb;gBACD,MAAM;YACV,KAAK,OAAO,CAAC,SAAS;gBAClB,MAAM,CAAC,IAAI,CAAC,CAAC;gBACb,MAAM,CAAC,EAAE,CAAC,CAAC;gBACX,IAAI,CAAC,GAAW,IAAI,CAAC,OAAO,CAAC;gBAC7B,IAAI,CAAC,GAAG,EAAE,CAAC;gBACX,IAAI,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;oBACrB,IAAI,CAAC,IAAI,CAAC,EAAE,EAAE,GAAG,GAAG,CAAC,CAAC,CAAC;iBAC1B;qBAAM;oBACH,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,GAAG,KAAK,CAAC,WAAW,EAAE,GAAG,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;iBACnE;gBACD,MAAM;YACV,KAAK,OAAO,CAAC,SAAS;gBAClB,MAAM,CAAC,IAAI,CAAC,CAAC;gBACb,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC;gBACjB,IAAI,CAAC,GAAG,EAAE,CAAC;gBACX,IAAI,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;oBACrB,IAAI,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;iBACpB;qBAAM;oBACH,MAAM,CAAC,EAAE,CAAC,CAAC;oBACX,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,WAAW,EAAE,GAAG,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;iBAClD;gBACD,MAAM;YACV;gBACI,MAAM,CAAC,IAAI,CAAC,CAAC;gBACb,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;gBACd,IAAI,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;gBAC5B,MAAM;SACb;KACJ;;;;;;;;;;;;;;;;IAiBD,KAAK,CAAC,EAAe,EAAE,KAAY,EAAE,IAAY;QAC7C,IAAI,OAAO,GAAY,KAAK,CAAC;QAC7B,IAAI,CAAS,CAAC;QACd,IAAI,CAAS,CAAC;QACd,IAAI,GAAW,CAAC;QAChB,IAAI,IAAY,CAAC;QACjB,IAAI,CAAS,CAAC;QACd,IAAI,MAAM,GAAW,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC;QAC7C,IAAI,MAAM,GAAW,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC;QAC5C,IAAI,KAAK,CAAC,WAAW,IAAI,IAAI,EAAE;YAC3B,KAAK,CAAC,WAAW,GAAG,IAAI,KAAK,CAAC,MAAM,CAAC,CAAC;YACtC,OAAO,GAAG,IAAI,CAAC;SAClB;QACD,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,EAAE,CAAC,EAAE;YACzB,IAAI,IAAI,CAAC,YAAY,IAAI,IAAI,IAAI,CAAC,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE;gBAC3D,CAAC,GAAG,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;gBACzB,IAAI,CAAC,KAAK,CAAC,EAAE;oBACT,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;iBAC3B;qBAAM;oBACH,GAAG,GAAG,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC;oBACpB,IAAI,GAAG,CAAC,GAAG,KAAK,CAAC,IAAI,CAAC;oBACtB,IAAI,IAAI,KAAK,KAAK,CAAC,IAAI,EAAE;wBACrB,CAAC,GAAG,CAAC,CAAC;qBACT;yBAAM;wBACH,IAAI,IAAI,KAAK,KAAK,CAAC,KAAK,EAAE;4BACtB,CAAC,GAAG,GAAG,GAAG,IAAI,CAAC,WAAW,CAAC,CAAC,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC;yBAC/C;6BAAM;4BACH,CAAC,GAAG,GAAG,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,IAAI,CAAC,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;yBACzD;wBACD,IAAI,CAAC,CAAC,GAAG,KAAK,CAAC,qBAAqB,MAAM,CAAC,KAAK,CAAC,KAAK,KAAK,CAAC,SAAS,EAAE,IAAI,CAAC,KAAK,KAAK,CAAC,WAAW,EAAE,CAAC,EAAE;4BACnG,CAAC,GAAG,KAAK,CAAC,QAAQ,EAAE,CAAC;yBACxB;qBACJ;iBACJ;aACJ;iBAAM;gBACH,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;aAC3B;YACD,IAAI,IAAI,CAAC,eAAe,IAAI,IAAI,EAAE;gBAC9B,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;aACxB;YACD,OAAO,GAAG,OAAO,IAAI,KAAK,CAAC,KAAK,CAAC,EAAE,EAAE,CAAC,EAAE,KAAK,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;SACjE;QACD,IAAI,IAAI,GAAG,CAAC,EAAE;YACV,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,EAAE,CAAC,EAAE;gBACzB,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;gBACxB,OAAO,GAAG,OAAO,IAAI,KAAK,CAAC,KAAK,CAAC,EAAE,EAAE,CAAC,EAAE,KAAK,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;aACjE;YACD,IAAI,KAAK,CAAC,UAAU,IAAI,IAAI,EAAE;gBAC1B,KAAK,CAAC,UAAU,GAAG,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC;gBAChC,OAAO,GAAG,IAAI,CAAC;aAClB;YACD,OAAO,GAAG,OAAO,IAAI,KAAK,CAAC,KAAK,CAAC,EAAE,EAAE,IAAI,EAAE,KAAK,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC;YAChE,OAAO,OAAO,CAAC;SAClB;QACD,IAAI,WAAW,GAAW,IAAI,CAAC,UAAU,CAAC,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC;QAC5E,IAAI,KAAK,CAAC,UAAU,IAAI,IAAI,EAAE;YAC1B,KAAK,CAAC,UAAU,GAAG,IAAI,KAAK,CAAC,WAAW,GAAG,IAAI,CAAC,cAAc,CAAC,CAAC;YAChE,OAAO,GAAG,IAAI,CAAC;SAClB;QACD,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,WAAW,EAAE,EAAE,CAAC,EAAE;YAC9B,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;YACvB,IAAI,IAAI,CAAC,eAAe,IAAI,IAAI,EAAE;gBAC9B,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;aACxB;YACD,OAAO,GAAG,OAAO,IAAI,KAAK,CAAC,KAAK,CAAC,EAAE,EAAE,CAAC,EAAE,KAAK,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC;SAChE;QACD,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,cAAc,EAAE,EAAE,CAAC,EAAE;YACtC,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;YACxB,GAAG,GAAG,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC;YACpB,IAAI,GAAG,CAAC,GAAG,KAAK,CAAC,IAAI,CAAC;YACtB,IAAI,IAAI,KAAK,KAAK,CAAC,IAAI,EAAE;gBACrB,CAAC,GAAG,CAAC,CAAC;aACT;iBAAM;gBACH,IAAI,IAAI,KAAK,KAAK,CAAC,KAAK,EAAE;oBACtB,CAAC,GAAG,GAAG,GAAG,IAAI,CAAC,WAAW,CAAC,CAAC,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC;iBAC/C;qBAAM;oBACH,CAAC,GAAG,GAAG,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,IAAI,CAAC,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;iBACzD;gBACD,IAAI,CAAC,CAAC,GAAG,KAAK,CAAC,qBAAqB,MAAM,CAAC,KAAK,CAAC,KAAK,KAAK,CAAC,SAAS,EAAE,IAAI,CAAC,KAAK,KAAK,CAAC,WAAW,EAAE,CAAC,EAAE;oBACnG,CAAC,GAAG,KAAK,CAAC,QAAQ,EAAE,CAAC;iBACxB;aACJ;YACD,IAAI,IAAI,CAAC,eAAe,IAAI,IAAI,EAAE;gBAC9B,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;aACxB;YACD,OAAO,GAAG,OAAO,IAAI,KAAK,CAAC,KAAK,CAAC,EAAE,EAAE,CAAC,EAAE,KAAK,CAAC,UAAU,EAAE,WAAW,GAAG,CAAC,CAAC,CAAC;SAC9E;QACD,OAAO,OAAO,CAAC;KAClB;;;;;;;;;;;;;;;;;IAkBO,OAAO,KAAK,CAAC,EAAe,EAAE,CAAS,EAAE,KAAe,EAAE,KAAa;QAC3E,IAAI,CAAC,GAAW,KAAK,CAAC,KAAK,CAAC,CAAC;QAC7B,IAAI,CAAC,KAAK,CAAC,EAAE;YACT,OAAO,KAAK,CAAC;SAChB;QACD,IAAI,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,MAAM,KAAK,CAAC,SAAS,EAAE,EAAE;YACxC,IAAI,CAAC,KAAK,KAAK,CAAC,SAAS,EAAE,EAAE;gBACzB,OAAO,KAAK,CAAC;aAChB;YACD,CAAC,GAAG,KAAK,CAAC,SAAS,EAAE,CAAC;SACzB;QACD,IAAI,CAAC,KAAK,CAAC,EAAE;YACT,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YACjB,OAAO,IAAI,CAAC;SACf;QACD,IAAI,CAAS,CAAC;QACd,IAAI,CAAC,CAAC,GAAG,KAAK,CAAC,SAAS,MAAM,KAAK,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,MAAM,CAAC,EAAE;YACxE,IAAI,CAAC,KAAK,KAAK,CAAC,SAAS,EAAE,EAAE;gBACzB,OAAO,KAAK,CAAC;aAChB;iBAAM,IAAI,CAAC,CAAC,IAAI,KAAK,CAAC,GAAG,GAAG,KAAK,CAAC,SAAS,CAAC,OAAO,CAAC,IAAI,KAAK,CAAC,GAAG,GAAG,KAAK,CAAC,SAAS,CAAC,CAAC,EAAE;gBACpF,IAAI,CAAC,CAAC,GAAG,KAAK,CAAC,SAAS,MAAM,KAAK,CAAC,WAAW,EAAE,EAAE;oBAC/C,CAAC,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,IAAI,KAAK,CAAC,WAAW,EAAE,GAAG,EAAE,CAAC,aAAa,CAAC,CAAC,GAAG,KAAK,CAAC,UAAU,EAAE,CAAC,GAAG,KAAK,CAAC,UAAU,CAAC,CAAC;iBAC5G;qBAAM;oBACH,IAAI,IAAI,GAAW,KAAK,CAAC,UAAU,IAAI,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC;oBACtD,CAAC,GAAG,IAAI,GAAG,KAAK,CAAC,WAAW,EAAE,GAAG,EAAE,CAAC,OAAO,CAAC,kBAAkB,CAAC,CAAC;iBACnE;aACJ;iBAAM,IAAI,CAAC,CAAC,GAAG,KAAK,CAAC,SAAS,MAAM,KAAK,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,MAAM,CAAC,EAAE;gBAC/E,IAAI,IAAI,GAAW,CAAC,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,GAAG,KAAK,CAAC,SAAS,MAAM,KAAK,CAAC,WAAW,EAAE,IAAI,CAAC,GAAG,KAAK,CAAC,UAAU,KAAK,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC;gBACvI,IAAI,IAAI,GAAW,CAAC,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,GAAG,KAAK,CAAC,SAAS,MAAM,KAAK,CAAC,WAAW,EAAE,IAAI,CAAC,GAAG,KAAK,CAAC,UAAU,KAAK,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC;gBACvI,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC,GAAG,KAAK,CAAC,WAAW,EAAE,GAAG,EAAE,CAAC,OAAO,CAAC,kBAAkB,CAAC,CAAC;aACnF;iBAAM;gBACH,CAAC,GAAG,KAAK,CAAC,QAAQ,EAAE,CAAC;aACxB;SACJ;aAAM,IAAI,CAAC,KAAK,KAAK,CAAC,SAAS,EAAE,EAAE;YAChC,CAAC,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,SAAS,MAAM,KAAK,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,MAAM,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC,QAAQ,EAAE,CAAC;SACrG;aAAM;YACH,CAAC,GAAG,KAAK,CAAC,QAAQ,EAAE,CAAC;SACxB;QACD,IAAI,CAAC,KAAK,CAAC,EAAE;YACT,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YACjB,OAAO,IAAI,CAAC;SACf;QACD,OAAO,KAAK,CAAC;KAChB;;AA7wCM,0BAAoB,GAAY,KAAK,CAAC;AAG7C;;;;AAIO,SAAG,GAAW,CAAC,SAAS,CAAC;AAEhC;;;AAGO,cAAQ,GAAW,SAAS,CAAC;AAEpC;;;AAGO,gBAAU,GAAW,CAAC,SAAS,CAAC;AAEvC;;;;;;;AAOO,UAAI,GAAW,SAAS,CAAC;AAEhC;;;;;;;AAOO,2BAAqB,GAAW,OAAO,CAAC;AAE/C;;;AAGO,WAAK,GAAW,OAAO,CAAC;AAE/B;;;AAGO,eAAS,GAAW,SAAS,CAAC;AAErC;;;AAGO,gBAAU,GAAW,OAAO,CAAC;AAEpC;;;AAGO,UAAI,GAAW,QAAQ,CAAC;AAmB/B;;;;AAIO,WAAK,GAAW,QAAQ,CAAC;AAEhC;;;;;AAKO,WAAK,GAAW,QAAQ,CAAC;AAisCpC,KAAK,CAAC,SAAS,EAAE,CAAC;AAElB,KAAK,CAAC,uBAAuB,EAAE,CAAC;AAEhC,KAAK,CAAC,SAAS,EAAE,CAAC;AAElB,KAAK,CAAC,SAAS,EAAE,CAAC;AAElB,KAAK,CAAC,WAAW,EAAE,CAAC;AAEpB,KAAK,CAAC,UAAU,EAAE,CAAC;AAEnB,KAAK,CAAC,YAAY,EAAE,CAAC;AAErB,KAAK,CAAC,UAAU,EAAE,CAAC;AAEnB,KAAK,CAAC,SAAS,EAAE,CAAC;AAElB,KAAK,CAAC,SAAS,EAAE,CAAC;AAElB,KAAK,CAAC,YAAY,EAAE,CAAC;AAErB,KAAK,CAAC,QAAQ,EAAE,CAAC;AAEjB,KAAK,CAAC,kBAAkB,EAAE,CAAC;AAE3B,KAAK,CAAC,WAAW,EAAE,CAAC;AAEpB,KAAK,CAAC,mBAAmB,EAAE;;MCzzCd,IAAI;IAsCb;;;;;;;;;;;QAbA,SAAI,GAAW,CAAC,CAAC;;;;;QAWjB,SAAI,GAAgB,IAAI,CAAC;QAGrB,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC;KACjB;;AAvCD;;;AAGgB,WAAM,GAAW,CAAC,CAAC;AAEnC;;;;;;;AAOgB,cAAS,GAAW,UAAU;;ACjDlD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MA+Ca,KAAK;;;;IAyLd;;;;;;;;;;;;;;QA9DQ,uBAAkB,GAAoB,IAAI,CAAC;;;;;;QA8BnD,UAAK,GAAiB,IAAI,CAAC;;;;;;;;;;QA2B3B,SAAI,GAAiB,IAAI,CAAC;QAMtB,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;QAChB,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC;QACd,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC;QAClB,IAAI,CAAC,cAAc,GAAG,CAAC,CAAC;QACxB,IAAI,CAAC,aAAa,GAAG,CAAC,CAAC;QACvB,IAAI,CAAC,cAAc,GAAG,CAAC,CAAC;KAC3B;;;;;;;;;;;IAYM,SAAS;QACZ,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC,QAAQ,MAAM,CAAC,EAAE;YACtC,MAAM,IAAI,KAAK,CAAC,iDAAiD,CAAC,CAAC;SACtE;QACD,OAAO,IAAI,CAAC,QAAQ,CAAC;KACxB;;;;;;;;;;;;;;;;;;;;IAqBD,GAAG,CAAC,KAAmB,EAAE,GAAe,EAAE,MAAc,EAAE,UAAmB;QACzE,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC,QAAQ,MAAM,CAAC,EAAE;YACtC,IAAI,UAAU,EAAE;gBACZ,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,GAAG,MAAM,EAAE,GAAG,CAAC,MAAM,CAAC,CAAC;gBAC3C,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;aAClB;iBAAM;gBACH,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE,GAAG,CAAC,MAAM,CAAC,CAAC;gBACtC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;aACpB;SACJ;aAAM;YACH,IAAI,UAAU,EAAE;gBACZ,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,CAAC;aACtC;iBAAM;gBACH,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,CAAC;aACxC;SACJ;KACJ;;;;;;;;;;;;;;IAeO,YAAY,CAAC,cAAsB,EAAE,iBAAyB;QAClE,IAAI,IAAI,CAAC,kBAAkB,IAAI,IAAI,EAAE;YACjC,IAAI,CAAC,kBAAkB,GAAG,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC;SAC1C;QACD,IAAI,IAAI,CAAC,cAAc,IAAI,IAAI,CAAC,kBAAkB,CAAC,MAAM,EAAE;YACvD,IAAI,CAAC,GAAa,IAAI,KAAK,CAAC,IAAI,CAAC,kBAAkB,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;YAChE,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;;YAElC,IAAI,CAAC,kBAAkB,GAAG,CAAC,CAAC;SAC/B;QACD,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,cAAc,EAAE,CAAC,GAAG,cAAc,CAAC;QAChE,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,cAAc,EAAE,CAAC,GAAG,iBAAiB,CAAC;KACtE;;;;;;;;;;;;;;;;;;;;;;;IAwBD,OAAO,CAAC,KAAmB,EAAE,QAAgB,EAAE,IAAgB;QAC3D,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;QAChC,IAAI,UAAU,GAAY,KAAK,CAAC;QAChC,IAAI,CAAC,MAAM,IAAI,KAAK,CAAC,QAAQ,CAAC;QAC9B,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,GAAW,CAAC,CAAC;QAClB,QAAQ,CAAC,GAAG,IAAI,CAAC,cAAc,GAAG;YAC9B,IAAI,MAAM,GAAW,IAAI,CAAC,kBAAkB,CAAC,CAAC,EAAE,CAAC,CAAC;YAClD,IAAI,SAAS,GAAW,IAAI,CAAC,kBAAkB,CAAC,CAAC,EAAE,CAAC,CAAC;YACrD,IAAI,MAAc,CAAC;YACnB,IAAI,MAAM,IAAI,CAAC,EAAE;gBACb,MAAM,GAAG,QAAQ,GAAG,MAAM,CAAC;gBAC3B,IAAI,MAAM,GAAGC,SAAc,IAAI,MAAM,GAAGC,SAAc,EAAE;oBACpD,IAAI,MAAM,GAAW,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC;oBAC/C,IAAI,MAAM,IAAI,OAAO,CAAC,GAAG,EAAE;wBACvB,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC,IAAI,CAAC,MAAM,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC;qBAC7C;yBAAM;wBACH,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC,IAAI,CAAC,MAAM,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC;qBAC7C;oBACD,UAAU,GAAG,IAAI,CAAC;iBACrB;gBACD,IAAI,CAAC,SAAS,EAAE,CAAC,IAAI,CAAC,MAAM,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;gBACzC,IAAI,CAAC,SAAS,CAAC,IAAI,MAAM,GAAG,CAAC,CAAC,CAAC;aAClC;iBAAM;gBACH,MAAM,GAAG,QAAQ,GAAG,MAAM,GAAG,CAAC,CAAC;gBAC/B,IAAI,CAAC,SAAS,EAAE,CAAC,IAAI,CAAC,MAAM,KAAK,EAAE,IAAI,CAAC,CAAC,CAAC;gBAC1C,IAAI,CAAC,SAAS,EAAE,CAAC,IAAI,CAAC,MAAM,KAAK,EAAE,IAAI,CAAC,CAAC,CAAC;gBAC1C,IAAI,CAAC,SAAS,EAAE,CAAC,IAAI,CAAC,MAAM,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;gBACzC,IAAI,CAAC,SAAS,CAAC,IAAI,MAAM,GAAG,CAAC,CAAC,CAAC;aAClC;SACJ;QACD,OAAO,UAAU,CAAC;KACrB;;;;;;;;;IAUD,QAAQ;QACJ,OAAO,CAAC,WAAW,CAAC,MAAM,IAAI,IAAI,CAAC,KAAK,IAAI,IAAI,GAAG,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC;KAC9E;;;;;;;;IASD,YAAY,CAAC,EAAU;QACnB,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;QAChC,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC,OAAO,MAAM,CAAC,EAAE;YACrC,OAAO,CAAC,IAAI,CAAC,kBAAkB,EAAE,CAAC,EAAE,KAAK,EAAE,IAAI,CAAC,EAAE,IAAI,EAAE,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC;SACxE;QACD,OAAO,KAAK,CAAC;KAChB;;;;;;;;;;IAWD,gBAAgB,CAAC,KAAY;QACzB,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC,OAAO,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,KAAK,CAAC,OAAO,MAAM,CAAC,EAAE;YAC7E,OAAO,KAAK,CAAC;SAChB;QACD,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;QAChC,MAAM,CAAC,KAAK,CAAC,kBAAkB,CAAC,CAAC;QACjC,KAAK,IAAI,CAAC,GAAW,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,kBAAkB,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;YAC7D,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,kBAAkB,CAAC,CAAC,CAAC,MAAM,CAAC,EAAE;gBAClE,OAAO,IAAI,CAAC;aACf;SACJ;QACD,OAAO,KAAK,CAAC;KAChB;;;;;;;;;IAUD,eAAe,CAAC,EAAU,EAAE,aAAqB;QAC7C,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;QAChC,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC,OAAO,MAAM,CAAC,EAAE;YACrC,IAAI,CAAC,MAAM,IAAI,KAAK,CAAC,OAAO,CAAC;YAC7B,IAAI,CAAC,kBAAkB,GAAG,IAAI,KAAK,CAAC,CAAC,aAAa,GAAG,EAAE,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;SACrE;QACD,IAAI,CAAC,kBAAkB,EAAE,CAAC,EAAE,KAAK,EAAE,IAAI,CAAC,EAAE,KAAK,EAAE,GAAG,CAAC,CAAC,CAAC;KAC1D;;;;;;;;;;;;;;;;IAiBD,eAAe,CAAC,GAAiB,EAAE,EAAU,EAAE,aAAqB;QAChE,IAAI,KAAK,GAAiB,IAAI,CAAC;QAC/B,QAAQ,KAAK,IAAI,IAAI,GAAG;YACpB,IAAI,CAAC,GAAU,KAAK,CAAC;YACrB,KAAK,GAAG,CAAC,CAAC,IAAI,CAAC;YACf,CAAC,CAAC,IAAI,GAAG,IAAI,CAAC;YACd,IAAI,GAAG,IAAI,IAAI,EAAE;gBACb,IAAI,CAAC,CAAC,CAAC,MAAM,GAAG,KAAK,CAAC,QAAQ,MAAM,CAAC,EAAE;oBACnC,SAAS;iBACZ;gBACD,CAAC,CAAC,MAAM,IAAI,KAAK,CAAC,QAAQ,CAAC;gBAC3B,IAAI,CAAC,CAAC,CAAC,MAAM,GAAG,KAAK,CAAC,GAAG,MAAM,CAAC,EAAE;oBAC9B,IAAI,CAAC,CAAC,CAAC,gBAAgB,CAAC,GAAG,CAAC,EAAE;wBAC1B,IAAI,CAAC,GAAS,IAAI,IAAI,EAAE,CAAC;wBACzB,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC,aAAa,CAAC;wBACzB,CAAC,CAAC,SAAS,GAAG,GAAG,CAAC,UAAU,CAAC,SAAS,CAAC;wBACvC,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC,UAAU,CAAC;wBACtB,CAAC,CAAC,UAAU,GAAG,CAAC,CAAC;qBACpB;iBACJ;aACJ;iBAAM;gBACH,IAAI,CAAC,CAAC,YAAY,CAAC,EAAE,CAAC,EAAE;oBACpB,SAAS;iBACZ;gBACD,CAAC,CAAC,eAAe,CAAC,EAAE,EAAE,aAAa,CAAC,CAAC;aACxC;YACD,IAAI,CAAC,GAAgB,CAAC,CAAC,UAAU,CAAC;YAClC,QAAQ,CAAC,IAAI,IAAI,GAAG;gBAChB,IAAI,CAAC,CAAC,CAAC,MAAM,GAAG,KAAK,CAAC,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC,UAAU,IAAI,CAAC,KAAK,CAAC,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE;oBAC3E,IAAI,CAAC,CAAC,SAAS,IAAI,CAAC,CAAC,SAAS,CAAC,IAAI,IAAI,IAAI,EAAE;wBACzC,CAAC,CAAC,SAAS,CAAC,IAAI,GAAG,KAAK,CAAC;wBACzB,KAAK,GAAG,CAAC,CAAC,SAAS,CAAC;qBACvB;iBACJ;gBACD,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;aACd;SACJ;KACJ;;;;;;IAOM,QAAQ;QACX,OAAO,OAAO,CAAA;;KAEjB;;AA3cD;;;;;;AAMO,WAAK,GAAW,CAAC,CAAC;AAEzB;;;AAGO,cAAQ,GAAW,CAAC,CAAC;AAE5B;;;AAGO,aAAO,GAAW,CAAC,CAAC;AAE3B;;;;AAIO,YAAM,GAAW,CAAC,CAAC;AAE1B;;;;AAIO,YAAM,GAAW,EAAE,CAAC;AAE3B;;;AAGO,WAAK,GAAW,EAAE,CAAC;AAE1B;;;AAGO,eAAS,GAAW,EAAE,CAAC;AAE9B;;;AAGO,SAAG,GAAW,GAAG,CAAC;AAEzB;;;AAGO,SAAG,GAAW,GAAG,CAAC;AAEzB;;;AAGO,gBAAU,GAAW,GAAG,CAAC;AAEhC;;;;AAIO,aAAO,GAAW,IAAI,CAAC;AAE9B;;;;AAIO,cAAQ,GAAW,IAAI;;ACjHlC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MA0Ca,YAAa,SAAQ,KAAK;;;;;;;IAOnC,OAAO,CAAC,MAAe,EAAE,GAAY,EAAE,EAAgB,EAAE,IAAW;QAChE,KAAK,CAAC,OAAO,CAAC,MAAM,EAAE,GAAG,EAAE,EAAE,EAAE,IAAI,CAAC,CAAC;QACrC,IAAI,SAAS,GAAW,IAAI,KAAK,CAAC,IAAW,CAAC,CAAC;QAC/C,IAAI,CAAC,KAAK,CAAC,EAAE,EAAE,SAAS,EAAE,CAAC,CAAC,CAAC;QAC7B,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;QAC1B,IAAI,CAAC,KAAK,CAAC,aAAa,GAAG,CAAC,CAAC;KAChC;;;ACvDL;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAwDa,YAAa,SAAQ,aAAa;;;;;;;;;;;;;;;;;;;;IA+Y3C,YAAY,EAAe,EAAE,MAAc,EAAE,IAAY,EAAE,IAAY,EAAE,SAAiB,EAAE,UAAoB,EAAE,OAAe;QAC7H,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;;;;QAxRxB,cAAS,GAAkB,IAAI,CAAC;;;;;;QA4BhC,eAAU,GAAoB,IAAI,CAAC;;;;QAK3B,SAAI,GAAsB,IAAI,CAAC;;;;QAK/B,SAAI,GAA4B,IAAI,CAAC;;;;QAKrC,UAAK,GAA4B,IAAI,CAAC;;;;;QAMtC,UAAK,GAA4B,IAAI,CAAC;;;;;QAMtC,WAAM,GAA4B,IAAI,CAAC;;;;;QAMvC,UAAK,GAA8B,IAAI,CAAC;;;;;QAMxC,WAAM,GAA8B,IAAI,CAAC;;;;QAUzC,UAAK,GAAqB,IAAI,CAAC;;;;QAK/B,SAAI,GAAe,IAAI,UAAU,EAAE,CAAC;;;;QAyBpC,aAAQ,GAAsB,IAAI,CAAC;;;;;;QAanC,kBAAa,GAAoB,IAAI,CAAC;;;;;;;;;;QAWtC,UAAK,GAAoB,IAAI,CAAC;;;;QAU9B,iBAAY,GAAmB,IAAI,CAAC;;;;QAKpC,gBAAW,GAAmB,IAAI,CAAC;;;;QAUnC,qBAAgB,GAAsB,IAAI,CAAC;;;;QAU3C,aAAQ,GAAsB,IAAI,CAAC;;;;QAUnC,iBAAY,GAAsB,IAAI,CAAC;;;;QAUvC,eAAU,GAAsB,IAAI,CAAC;;;;QAUrC,WAAM,GAA4B,IAAI,CAAC;;;;QAKvC,YAAO,GAA4B,IAAI,CAAC;;;;QAKxC,WAAM,GAAqB,IAAI,CAAC;;;;;;;;QAwBhC,WAAM,GAAiB,IAAI,CAAC;;;;QAK5B,kBAAa,GAAiB,IAAI,CAAC;;;;QAKnC,iBAAY,GAAiB,IAAI,CAAC;QAyCtC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;QAChB,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC;QACd,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC;QACd,IAAI,CAAC,iBAAiB,GAAG,CAAC,CAAC;QAC3B,IAAI,CAAC,iBAAiB,GAAG,CAAC,CAAC;QAC3B,IAAI,CAAC,cAAc,GAAG,CAAC,CAAC;QACxB,IAAI,CAAC,UAAU,GAAG,CAAC,CAAC;QACpB,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC;QAClB,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC;QACnB,IAAI,CAAC,aAAa,GAAG,CAAC,CAAC;QACvB,IAAI,CAAC,UAAU,GAAG,CAAC,CAAC;QACpB,IAAI,CAAC,mBAAmB,GAAG,CAAC,CAAC;QAC7B,IAAI,CAAC,YAAY,GAAG,CAAC,CAAC;QACtB,IAAI,CAAC,qBAAqB,GAAG,CAAC,CAAC;QAC/B,IAAI,CAAC,aAAa,GAAG,CAAC,CAAC;QACvB,IAAI,CAAC,iBAAiB,GAAG,CAAC,CAAC;QAC3B,IAAI,CAAC,eAAe,GAAG,CAAC,CAAC;QACzB,IAAI,CAAC,cAAc,GAAG,CAAC,CAAC;QACxB,IAAI,CAAC,WAAW,GAAG,CAAC,CAAC;QACrB,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC;QACjB,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC;QACnB,IAAI,CAAC,YAAY,GAAG,CAAC,CAAC;QACtB,IAAI,EAAE,CAAC,WAAW,IAAI,IAAI,EAAE;YACxB,EAAE,CAAC,WAAW,GAAG,IAAI,CAAC;SACzB;aAAM;YACH,EAAE,CAAC,UAAU,CAAC,EAAE,GAAG,IAAI,CAAC;SAC3B;QACD,EAAE,CAAC,UAAU,GAAG,IAAI,CAAC;QACrB,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC;QACb,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,KAAK,QAAQ,KAAK,IAAI,GAAG;YACrB,IAAI,CAAC,MAAM,IAAI,YAAY,CAAC,eAAe,CAAC;SAC/C;QACD,IAAI,CAAC,IAAI,GAAG,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAC7B,IAAI,CAAC,IAAI,GAAG,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAC7B,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;QACvB,IAAI,WAAW,CAAC,UAAU,EAAE;YACxB,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;SAC9B;QACD,IAAI,UAAU,IAAI,IAAI,IAAI,UAAU,CAAC,MAAM,GAAG,CAAC,EAAE;YAC7C,IAAI,CAAC,cAAc,GAAG,UAAU,CAAC,MAAM,CAAC;YACxC,IAAI,CAAC,UAAU,GAAG,IAAI,KAAK,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;YACjD,KAAK,IAAI,CAAC,GAAW,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,cAAc,EAAE,EAAE,CAAC,EAAE;gBAClD,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;aACnD;SACJ;QACD,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,OAAO,KAAK,YAAY,CAAC,OAAO,EAAE;YAClC,IAAI,IAAI,GAAW,IAAI,CAAC,0BAA0B,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;YACzE,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,UAAU,MAAM,CAAC,EAAE;gBACrC,EAAE,IAAI,CAAC;aACV;YACD,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;YACtB,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;YAC1B,IAAI,CAAC,MAAM,GAAG,IAAI,KAAK,EAAE,CAAC;YAC1B,IAAI,CAAC,MAAM,CAAC,MAAM,IAAI,KAAK,CAAC,MAAM,CAAC;YACnC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;SAChC;KACJ;IAEM,cAAc,CAAC,IAAY,EAAE,MAAc;QAC9C,IAAI,IAAI,CAAC,gBAAgB,IAAI,IAAI,EAAE;YAC/B,IAAI,CAAC,gBAAgB,GAAG,IAAI,UAAU,EAAE,CAAC;SAC5C;QACD,EAAE,IAAI,CAAC,qBAAqB,CAAC;QAC7B,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC,IAAI,IAAI,IAAI,IAAI,CAAC,GAAG,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;KAC/F;IAEM,sBAAsB;QACzB,IAAI,CAAC,WAAW,CAAC,WAAW,EAAE;YAC1B,OAAO,IAAI,CAAC;SACf;QACD,IAAI,CAAC,IAAI,GAAG,IAAI,UAAU,EAAE,CAAC;QAC7B,OAAO,IAAI,gBAAgB,CAAC,IAAI,CAAC,EAAE,EAAE,KAAK,EAAE,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;KACnE;IAEM,eAAe,CAAC,IAAY,EAAE,OAAgB;QACjD,IAAI,CAAC,WAAW,CAAC,WAAW,EAAE;YAC1B,OAAO,IAAI,CAAC;SACf;QACD,IAAI,EAAE,GAAe,IAAI,UAAU,EAAE,CAAC;QACtC,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;QAC/C,IAAI,EAAE,GAAqB,IAAI,gBAAgB,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC;QAC1E,IAAI,OAAO,EAAE;YACT,EAAE,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;YACpB,IAAI,CAAC,IAAI,GAAG,EAAE,CAAC;SAClB;aAAM;YACH,EAAE,CAAC,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC;YACrB,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC;SACnB;QACD,OAAO,EAAE,CAAC;KACb;IAEM,mBAAmB,CAAC,OAAe,EAAE,QAAkB,EAAE,IAAY,EAAE,OAAgB;QAC1F,IAAI,CAAC,WAAW,CAAC,WAAW,EAAE;YAC1B,OAAO,IAAI,CAAC;SACf;QACD,IAAI,EAAE,GAAe,IAAI,UAAU,EAAE,CAAC;QACtC,gBAAgB,CAAC,SAAS,CAAC,OAAO,EAAE,QAAQ,EAAE,EAAE,CAAC,CAAC;QAClD,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;QAC/C,IAAI,EAAE,GAAqB,IAAI,gBAAgB,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QACtF,IAAI,OAAO,EAAE;YACT,EAAE,CAAC,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC;YACrB,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC;SACnB;aAAM;YACH,EAAE,CAAC,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC;YACtB,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;SACpB;QACD,OAAO,EAAE,CAAC;KACb;IAEM,wBAAwB,CAAC,SAAiB,EAAE,IAAY,EAAE,OAAgB;QAC7E,IAAI,CAAC,WAAW,CAAC,WAAW,EAAE;YAC1B,OAAO,IAAI,CAAC;SACf;QACD,IAAI,EAAE,GAAe,IAAI,UAAU,EAAE,CAAC;QACtC,KAAK,uBAAuB,KAAK,IAAI,GAAG;YACpC,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,UAAU,EAAE,SAAS,GAAG,CAAC,CAAC,CAAC;YAC3D,OAAO,IAAI,gBAAgB,CAAC,IAAI,CAAC,EAAE,EAAE,KAAK,EAAE,EAAE,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;SAC5D;QACD,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;QAC/C,IAAI,EAAE,GAAqB,IAAI,gBAAgB,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC;QAC1E,IAAI,OAAO,EAAE;YACT,IAAI,IAAI,CAAC,KAAK,IAAI,IAAI,EAAE;gBACpB,IAAI,CAAC,KAAK,GAAG,IAAI,KAAK,CAAC,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,MAAM,CAAC,CAAC;aACzE;YACD,EAAE,CAAC,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;YAChC,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,GAAG,EAAE,CAAC;SAC9B;aAAM;YACH,IAAI,IAAI,CAAC,MAAM,IAAI,IAAI,EAAE;gBACrB,IAAI,CAAC,MAAM,GAAG,IAAI,KAAK,CAAC,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,MAAM,CAAC,CAAC;aAC1E;YACD,EAAE,CAAC,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;YACjC,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,GAAG,EAAE,CAAC;SAC/B;QACD,OAAO,EAAE,CAAC;KACb;IAEM,cAAc,CAAC,IAAe;QACjC,IAAI,IAAI,CAAC,eAAe,EAAE,EAAE;YACxB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC;YACxB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;SACtB;aAAM;YACH,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC;YACvB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;SACrB;KACJ;IAEM,SAAS;KACf;IAEM,UAAU,CAAC,IAAU,EAAE,MAAY,EAAE,KAAW,EAAE,MAAY,EAAE,KAAW;QAC9E,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;QAClB,IAAI,CAAC,CAAC,OAAO,IAAI,KAAK,QAAQ,KAAK,IAAI,KAAK,IAAI,MAAM,CAAC,OAAO,MAAM,KAAK,QAAQ,KAAK,MAAM,KAAK,IAAI,CAAC,KAAK,CAAC,KAAK,IAAI,IAAI,IAAI,KAAK,YAAY,KAAK,KAAK,KAAK,KAAK,IAAI,CAAC,KAAK,CAAC,OAAO,MAAM,KAAK,QAAQ,KAAK,MAAM,KAAK,IAAI,CAAC,KAAK,CAAC,KAAK,IAAI,IAAI,IAAI,KAAK,YAAY,KAAK,KAAK,KAAK,KAAK,IAAI,CAAC,EAAE;YAC3R,IAAI,MAAM,GAAG,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;YACnD,OAAY,CAAC;gBACT,IAAI,CAAC,WAAW,CAAC,MAAM,IAAI,IAAI,CAAC,OAAO,KAAK,YAAY,CAAC,MAAM,EAAE;oBAC7D,OAAO;iBACV;gBACD,IAAI,IAAI,CAAC,OAAO,KAAK,YAAY,CAAC,eAAe,EAAE;oBAC/C,IAAI,IAAI,CAAC,YAAY,IAAI,IAAI,CAAC,YAAY,CAAC,KAAK,IAAI,IAAI,EAAE;wBACtD,IAAI,CAAC,YAAY,CAAC,KAAK,GAAG,IAAI,YAAY,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;wBAC9D,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,cAAc,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE,MAAM,CAAC,CAAC;wBAC7G,IAAI,CAAC,uBAAuB,EAAE,CAAC;qBAClC;yBAAM;wBACH,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;wBAC1B,IAAI,IAAI,KAAK,OAAO,CAAC,KAAK,EAAE;4BACxB,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;4BAChC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC;yBAEtE;wBACD,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;qBAC5C;iBACJ;qBAAM,IAAI,IAAI,KAAK,OAAO,CAAC,KAAK,EAAE;oBAC/B,IAAI,IAAI,CAAC,aAAa,IAAI,IAAI,EAAE;wBAC5B,IAAI,CAAC,uBAAuB,EAAE,CAAC;qBAClC;oBACD,IAAI,CAAC,aAAa,GAAG,MAAM,CAAC;oBAC5B,IAAI,UAAU,GAAW,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;oBAC3E,KAAK,IAAI,CAAC,GAAW,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,EAAE,CAAC,EAAE;wBACrC,IAAI,OAAO,KAAK,CAAC,CAAC,CAAC,KAAK,QAAQ,EAAE;4BAC9B,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,CAAC,GAAG,KAAK,CAAC,WAAW,EAAE,GAAG,IAAI,CAAC,EAAE,CAAC,OAAO,CAAS,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;yBACtF;6BAAM,IAAI,OAAO,KAAK,CAAC,CAAC,CAAC,KAAK,QAAQ,EAAE;4BACrC,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,CAAC,mBAA2B,KAAK,CAAC,CAAC,CAAE,GAAG,CAAC,CAAC,CAAC;yBACrE;6BAAM;4BACH,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,CAAC,GAAG,KAAK,CAAC,kBAAkB,EAAE,GAAG,IAAI,CAAC,EAAE,CAAC,oBAAoB,CAAC,EAAE,EAAU,KAAK,CAAC,CAAC,CAAE,CAAC,QAAQ,CAAC,CAAC;yBACxH;qBACJ;oBACD,KAAK,IAAI,CAAC,GAAW,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,EAAE,CAAC,EAAE;wBACrC,IAAI,OAAO,KAAK,CAAC,CAAC,CAAC,KAAK,QAAQ,EAAE;4BAC9B,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,CAAC,GAAG,KAAK,CAAC,WAAW,EAAE,GAAG,IAAI,CAAC,EAAE,CAAC,OAAO,CAAS,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;yBACtF;6BAAM,IAAI,OAAO,KAAK,CAAC,CAAC,CAAC,KAAK,QAAQ,EAAE;4BACrC,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,CAAC,mBAA2B,KAAK,CAAC,CAAC,CAAE,GAAG,CAAC,CAAC,CAAC;yBACrE;6BAAM;4BACH,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,CAAC,GAAG,KAAK,CAAC,kBAAkB,EAAE,GAAG,IAAI,CAAC,EAAE,CAAC,oBAAoB,CAAC,EAAE,EAAU,KAAK,CAAC,CAAC,CAAE,CAAC,QAAQ,CAAC,CAAC;yBACxH;qBACJ;oBACD,IAAI,CAAC,QAAQ,EAAE,CAAC;iBACnB;qBAAM;oBACH,IAAI,KAAa,CAAC;oBAClB,IAAI,IAAI,CAAC,QAAQ,IAAI,IAAI,EAAE;wBACvB,IAAI,CAAC,QAAQ,GAAG,IAAI,UAAU,EAAE,CAAC;wBACjC,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC;qBAC5B;yBAAM;wBACH,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,mBAAmB,GAAG,CAAC,CAAC;wBACxD,IAAI,KAAK,GAAG,CAAC,EAAE;4BACX,IAAI,IAAI,KAAK,OAAO,CAAC,MAAM,EAAE;gCACzB,OAAO;6BACV;iCAAM;gCACH,MAAM,IAAI,KAAK,EAAE,CAAC;6BACrB;yBACJ;qBACJ;oBACD,SAAS,IAAI;wBACT,KAAK,OAAO,CAAC,MAAM;4BACf,IAAI,CAAC,aAAa,GAAG,MAAM,CAAC;4BAC5B,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;4BAChF,KAAK,IAAI,CAAC,GAAW,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,EAAE,CAAC,EAAE;gCACrC,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;6BACjC;4BACD,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;4BAC/B,KAAK,IAAI,CAAC,GAAW,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,EAAE,CAAC,EAAE;gCACrC,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;6BACjC;4BACD,MAAM;wBACV,KAAK,OAAO,CAAC,QAAQ;4BACjB,IAAI,CAAC,aAAa,IAAI,MAAM,CAAC;4BAC7B,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,YAAY,CAAC,mBAAmB,GAAG,MAAM,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;4BACjF,KAAK,IAAI,CAAC,GAAW,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,EAAE,CAAC,EAAE;gCACrC,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;6BACjC;4BACD,MAAM;wBACV,KAAK,OAAO,CAAC,MAAM;4BACf,IAAI,CAAC,aAAa,IAAI,MAAM,CAAC;4BAC7B,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,YAAY,CAAC,mBAAmB,GAAG,MAAM,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;4BACjF,MAAM;wBACV,KAAK,OAAO,CAAC,MAAM;4BACf,IAAI,KAAK,GAAG,EAAE,EAAE;gCACZ,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;6BAChC;iCAAM;gCACH,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,YAAY,CAAC,mBAAmB,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;6BAC3E;4BACD,MAAM;wBACV,KAAK,OAAO,CAAC,OAAO;4BAChB,IAAI,KAAK,GAAG,EAAE,EAAE;gCACZ,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,YAAY,CAAC,8BAA8B,GAAG,KAAK,CAAC,CAAC;6BAC9E;iCAAM;gCACH,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,YAAY,CAAC,uCAAuC,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;6BAC/F;4BACD,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;4BAC9B,MAAM;qBACb;oBACD,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC;oBAC5C,EAAE,IAAI,CAAC,UAAU,CAAC;iBACrB;gBACD,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;gBAChD,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;aACjE,GAAG,CAAC;SACR;aAAM,IAAI,CAAC,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,YAAY,KAAK,KAAK,IAAI,KAAK,IAAI,KAAK,MAAM,KAAK,SAAS,IAAI,KAAK,KAAK,SAAS,IAAI,MAAM,KAAK,SAAS,IAAI,KAAK,KAAK,SAAS,EAAE;YACjK,OAAY,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;SAC3C;aAAM;YAAE,MAAM,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAC;SAAE;KAClD;IAEM,SAAS,CAAC,MAAc;QAC3B,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC;QACvC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QAC1B,IAAI,IAAI,CAAC,YAAY,IAAI,IAAI,EAAE;YAC3B,IAAI,IAAI,CAAC,OAAO,KAAK,YAAY,CAAC,MAAM,IAAI,IAAI,CAAC,OAAO,KAAK,YAAY,CAAC,eAAe,EAAE;gBACvF,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;gBAChC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;aAC1D;iBAAM;gBACH,IAAI,IAAI,GAAW,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC,SAAS,EAAE,CAAC,MAAM,CAAC,CAAC;gBAC9D,IAAI,IAAI,GAAG,IAAI,CAAC,YAAY,EAAE;oBAC1B,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;iBAC5B;gBACD,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;aACzB;YACD,IAAI,CAAC,MAAM,IAAI,OAAO,CAAC,OAAO,IAAI,MAAM,IAAI,OAAO,CAAC,MAAM,KAAK,MAAM,KAAK,OAAO,CAAC,MAAM,EAAE;gBACtF,IAAI,CAAC,WAAW,EAAE,CAAC;aACtB;SACJ;KACJ;IAEM,YAAY,CAAC,MAAc,EAAE,OAAe;QAC/C,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC;QACvC,IAAI,IAAI,CAAC,YAAY,IAAI,IAAI,EAAE;YAC3B,IAAI,IAAI,CAAC,OAAO,KAAK,YAAY,CAAC,MAAM,IAAI,IAAI,CAAC,OAAO,KAAK,YAAY,CAAC,eAAe,EAAE;gBACvF,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;gBAChC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,EAAE,OAAO,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;aAChE;iBAAM,IAAI,MAAM,KAAK,OAAO,CAAC,QAAQ,EAAE;gBACpC,IAAI,IAAI,GAAW,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC;gBACtC,IAAI,IAAI,GAAG,IAAI,CAAC,YAAY,EAAE;oBAC1B,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;iBAC5B;gBACD,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;aACzB;SACJ;QACD,IAAI,MAAM,KAAK,OAAO,CAAC,MAAM,EAAE;YAC3B,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;SACpC;aAAM;YACH,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;SACpC;KACJ;IAEM,YAAY,CAAC,MAAc,EAAE,KAAa;QAC7C,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC;QACvC,IAAI,IAAI,CAAC,YAAY,IAAI,IAAI,EAAE;YAC3B,IAAI,IAAI,CAAC,OAAO,KAAK,YAAY,CAAC,MAAM,IAAI,IAAI,CAAC,OAAO,KAAK,YAAY,CAAC,eAAe,EAAE;gBACvF,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;gBAChC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;aAC9D;iBAAM;gBACH,IAAI,MAAM,KAAK,OAAO,CAAC,GAAG,EAAE;oBACxB,IAAI,CAAC,YAAY,CAAC,MAAM,IAAI,KAAK,CAAC,GAAG,CAAC;oBACtC,IAAI,CAAC,YAAY,CAAC,aAAa,GAAG,IAAI,CAAC,SAAS,CAAC;oBACjD,IAAI,CAAC,WAAW,EAAE,CAAC;iBACtB;qBAAM;oBACH,IAAI,IAAI,GAAW,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC,SAAS,EAAE,CAAC,MAAM,CAAC,CAAC;oBAC9D,IAAI,IAAI,GAAG,IAAI,CAAC,YAAY,EAAE;wBAC1B,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;qBAC5B;oBACD,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;iBACzB;aACJ;SACJ;QACD,IAAI,IAAI,CAAC,OAAO,KAAK,YAAY,CAAC,OAAO,EAAE;YACvC,IAAI,CAAS,CAAC;YACd,IAAI,MAAM,KAAK,OAAO,CAAC,KAAK,IAAI,MAAM,KAAK,OAAO,CAAC,KAAK,IAAI,MAAM,KAAK,OAAO,CAAC,MAAM,IAAI,MAAM,KAAK,OAAO,CAAC,MAAM,EAAE;gBAChH,CAAC,GAAG,KAAK,GAAG,CAAC,CAAC;aACjB;iBAAM;gBACH,CAAC,GAAG,KAAK,GAAG,CAAC,CAAC;aACjB;YACD,IAAI,CAAC,GAAG,IAAI,CAAC,SAAS,EAAE;gBACpB,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC;aACtB;SACJ;QACD,IAAI,KAAK,GAAG,CAAC,IAAI,MAAM,KAAK,OAAO,CAAC,GAAG,EAAE;YACrC,IAAI,GAAW,CAAC;YAChB,IAAI,MAAM,GAAG,OAAO,CAAC,MAAM,EAAE;gBACzB,GAAG,GAAG,EAAE,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,KAAK,KAAK,CAAC,CAAC,GAAG,KAAK,CAAC;aACtD;iBAAM;gBACH,GAAG,GAAG,EAAE,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,KAAK,CAAC,CAAC,GAAG,KAAK,CAAC;aACvD;YACD,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;SAC1B;aAAM,IAAI,KAAK,IAAI,GAAG,EAAE;YACrB,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;SAC/C;aAAM;YACH,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;SAClC;QACD,IAAI,MAAM,IAAI,OAAO,CAAC,MAAM,IAAI,IAAI,CAAC,OAAO,KAAK,YAAY,CAAC,MAAM,IAAI,IAAI,CAAC,YAAY,GAAG,CAAC,EAAE;YAC3F,IAAI,CAAC,UAAU,CAAC,IAAI,KAAK,EAAE,CAAC,CAAC;SAChC;KACJ;IAEM,aAAa,CAAC,MAAc,EAAE,IAAY;QAC7C,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC;QACvC,IAAI,CAAC,GAAS,IAAI,CAAC,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;QACzC,IAAI,IAAI,CAAC,YAAY,IAAI,IAAI,EAAE;YAC3B,IAAI,IAAI,CAAC,OAAO,KAAK,YAAY,CAAC,MAAM,IAAI,IAAI,CAAC,OAAO,KAAK,YAAY,CAAC,eAAe,EAAE;gBACvF,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;gBAChC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,EAAE,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;aACzE;iBAAM,IAAI,MAAM,KAAK,OAAO,CAAC,GAAG,EAAE;gBAC/B,IAAI,IAAI,GAAW,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC;gBACtC,IAAI,IAAI,GAAG,IAAI,CAAC,YAAY,EAAE;oBAC1B,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;iBAC5B;gBACD,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;aACzB;SACJ;QACD,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC;KACpC;IAEM,cAAc,CAAC,MAAc,EAAE,KAAa,EAAE,IAAY,EAAE,IAAY;QAC3E,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC;QACvC,IAAI,CAAC,GAAS,IAAI,CAAC,EAAE,CAAC,YAAY,CAAC,KAAK,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;QACtD,IAAI,IAAI,CAAC,YAAY,IAAI,IAAI,EAAE;YAC3B,IAAI,IAAI,CAAC,OAAO,KAAK,YAAY,CAAC,MAAM,IAAI,IAAI,CAAC,OAAO,KAAK,YAAY,CAAC,eAAe,EAAE;gBACvF,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;gBAChC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;aAC1D;iBAAM;gBACH,IAAI,IAAY,CAAC;gBACjB,IAAI,CAAC,GAAW,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;gBAC/B,SAAS,MAAM;oBACX,KAAK,OAAO,CAAC,SAAS;wBAClB,IAAI,GAAG,IAAI,CAAC,SAAS,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;wBACzD,MAAM;oBACV,KAAK,OAAO,CAAC,SAAS;wBAClB,IAAI,GAAG,IAAI,CAAC,SAAS,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,GAAG,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;wBAC3D,MAAM;oBACV,KAAK,OAAO,CAAC,QAAQ;wBACjB,IAAI,GAAG,IAAI,CAAC,SAAS,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;wBACzD,MAAM;oBACV;wBACI,IAAI,GAAG,IAAI,CAAC,SAAS,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,GAAG,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;wBAC3D,MAAM;iBACb;gBACD,IAAI,IAAI,GAAG,IAAI,CAAC,YAAY,EAAE;oBAC1B,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;iBAC5B;gBACD,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;aACzB;SACJ;QACD,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC;KACpC;IAEM,eAAe,CAAC,MAAY,EAAE,KAAW,EAAE,IAAU,EAAE,IAAU,EAAE,GAAS;QAC/E,IAAI,CAAC,CAAC,OAAO,MAAM,KAAK,QAAQ,KAAK,MAAM,KAAK,IAAI,MAAM,CAAC,OAAO,KAAK,KAAK,QAAQ,KAAK,KAAK,KAAK,IAAI,CAAC,KAAK,CAAC,OAAO,IAAI,KAAK,QAAQ,KAAK,IAAI,KAAK,IAAI,CAAC,KAAK,CAAC,OAAO,IAAI,KAAK,QAAQ,KAAK,IAAI,KAAK,IAAI,CAAC,KAAK,CAAC,OAAO,GAAG,KAAK,SAAS,KAAK,GAAG,KAAK,IAAI,CAAC,EAAE;YACxP,IAAI,MAAM,GAAG,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;YACnD,OAAY,CAAC;gBACT,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC;gBACvC,IAAI,CAAC,GAAS,IAAI,CAAC,EAAE,CAAC,aAAa,CAAC,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,CAAC,CAAC;gBAC5D,IAAI,OAAO,GAAW,CAAC,CAAC,MAAM,CAAC;gBAC/B,IAAI,IAAI,CAAC,YAAY,IAAI,IAAI,EAAE;oBAC3B,IAAI,IAAI,CAAC,OAAO,KAAK,YAAY,CAAC,MAAM,IAAI,IAAI,CAAC,OAAO,KAAK,YAAY,CAAC,eAAe,EAAE;wBACvF,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;wBAChC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;qBAC1D;yBAAM;wBACH,IAAI,OAAO,KAAK,CAAC,EAAE;4BACf,OAAO,GAAG,IAAI,CAAC,0BAA0B,CAAC,IAAI,CAAC,CAAC;4BAChD,CAAC,CAAC,MAAM,GAAG,OAAO,CAAC;yBACtB;wBACD,IAAI,IAAY,CAAC;wBACjB,IAAI,MAAM,KAAK,OAAO,CAAC,YAAY,EAAE;4BACjC,IAAI,GAAG,IAAI,CAAC,SAAS,IAAI,OAAO,IAAI,CAAC,CAAC,IAAI,OAAO,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;yBAC9D;6BAAM;4BACH,IAAI,GAAG,IAAI,CAAC,SAAS,IAAI,OAAO,IAAI,CAAC,CAAC,IAAI,OAAO,GAAG,CAAC,CAAC,CAAC;yBAC1D;wBACD,IAAI,IAAI,GAAG,IAAI,CAAC,YAAY,EAAE;4BAC1B,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;yBAC5B;wBACD,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;qBACzB;iBACJ;gBACD,IAAI,MAAM,KAAK,OAAO,CAAC,eAAe,EAAE;oBACpC,IAAI,OAAO,KAAK,CAAC,EAAE;wBACf,OAAO,GAAG,IAAI,CAAC,0BAA0B,CAAC,IAAI,CAAC,CAAC;wBAChD,CAAC,CAAC,MAAM,GAAG,OAAO,CAAC;qBACtB;oBACD,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,eAAe,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,OAAO,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC;iBAC5E;qBAAM;oBACH,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC;iBACpC;aACJ,GAAG,CAAC;SACR;aAAM,IAAI,CAAC,CAAC,OAAO,MAAM,KAAK,QAAQ,KAAK,MAAM,KAAK,IAAI,MAAM,CAAC,OAAO,KAAK,KAAK,QAAQ,KAAK,KAAK,KAAK,IAAI,CAAC,KAAK,CAAC,OAAO,IAAI,KAAK,QAAQ,KAAK,IAAI,KAAK,IAAI,CAAC,KAAK,CAAC,OAAO,IAAI,KAAK,QAAQ,KAAK,IAAI,KAAK,IAAI,CAAC,IAAI,GAAG,KAAK,SAAS,EAAE;YACpO,OAAY,IAAI,CAAC,sEAAsE,CAAC,MAAM,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;SACtH;aAAM;YAAE,MAAM,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAC;SAAE;KAClD;IAEM,sBAAsB,CAAC,IAAY,EAAE,IAAY,EAAE,GAAW,EAAE,GAAG,OAAc;QACpF,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC;QACvC,IAAI,CAAC,GAAS,IAAI,CAAC,EAAE,CAAC,oBAAoB,CAAC,IAAI,EAAE,IAAI,EAAE,GAAG,EAAE,GAAG,OAAO,CAAC,CAAC;QACxE,IAAI,OAAO,GAAW,CAAC,CAAC,MAAM,CAAC;QAC/B,IAAI,IAAI,CAAC,YAAY,IAAI,IAAI,EAAE;YAC3B,IAAI,IAAI,CAAC,OAAO,KAAK,YAAY,CAAC,MAAM,IAAI,IAAI,CAAC,OAAO,KAAK,YAAY,CAAC,eAAe,EAAE;gBACvF,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;gBAChC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,aAAa,EAAE,CAAC,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;aACzE;iBAAM;gBACH,IAAI,OAAO,KAAK,CAAC,EAAE;oBACf,OAAO,GAAG,IAAI,CAAC,0BAA0B,CAAC,IAAI,CAAC,CAAC;oBAChD,CAAC,CAAC,MAAM,GAAG,OAAO,CAAC;iBACtB;gBACD,IAAI,IAAI,GAAW,IAAI,CAAC,SAAS,IAAI,OAAO,IAAI,CAAC,CAAC,IAAI,OAAO,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;gBACvE,IAAI,IAAI,GAAG,IAAI,CAAC,YAAY,EAAE;oBAC1B,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;iBAC5B;gBACD,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;aACzB;SACJ;QACD,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,aAAa,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC;QAChD,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;KACzB;IAEM,aAAa,CAAC,MAAc,EAAE,KAAY;QAC7C,IAAI,MAAM,GAAY,MAAM,IAAI,GAAG,CAAC;QACpC,MAAM,GAAG,MAAM,GAAG,MAAM,GAAG,EAAE,GAAG,MAAM,CAAC;QACvC,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC;QACvC,IAAI,QAAQ,GAAiB,IAAI,CAAC;QAClC,IAAI,IAAI,CAAC,YAAY,IAAI,IAAI,EAAE;YAC3B,IAAI,IAAI,CAAC,OAAO,KAAK,YAAY,CAAC,MAAM,EAAE;gBACtC,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;gBAChC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;gBACvD,KAAK,CAAC,QAAQ,EAAE,CAAC,MAAM,IAAI,KAAK,CAAC,MAAM,CAAC;gBACxC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;gBACtC,IAAI,MAAM,KAAK,OAAO,CAAC,IAAI,EAAE;oBACzB,QAAQ,GAAG,IAAI,KAAK,EAAE,CAAC;iBAC1B;aACJ;iBAAM,IAAI,IAAI,CAAC,OAAO,KAAK,YAAY,CAAC,eAAe,EAAE;gBACtD,IAAI,CAAC,YAAY,CAAC,KAAM,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;aAC3D;iBAAM;gBACH,IAAI,MAAM,KAAK,OAAO,CAAC,GAAG,EAAE;oBACxB,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,KAAK,CAAC,UAAU,MAAM,CAAC,EAAE;wBACzC,KAAK,CAAC,MAAM,IAAI,KAAK,CAAC,UAAU,CAAC;wBACjC,EAAE,IAAI,CAAC,WAAW,CAAC;qBACtB;oBACD,IAAI,CAAC,YAAY,CAAC,MAAM,IAAI,KAAK,CAAC,GAAG,CAAC;oBACtC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,SAAS,GAAG,CAAC,EAAE,KAAK,CAAC,CAAC;oBAC7C,QAAQ,GAAG,IAAI,KAAK,EAAE,CAAC;iBAC1B;qBAAM;oBACH,IAAI,CAAC,SAAS,IAAI,KAAK,CAAC,SAAS,EAAE,CAAC,MAAM,CAAC,CAAC;oBAC5C,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;iBAC5C;aACJ;SACJ;QACD,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,KAAK,CAAC,QAAQ,MAAM,CAAC,IAAI,KAAK,CAAC,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,GAAGD,SAAc,EAAE;YAC7F,IAAI,MAAM,KAAK,OAAO,CAAC,IAAI,EAAE;gBACzB,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;aAC1B;iBAAM,IAAI,MAAM,KAAK,OAAO,CAAC,GAAG,EAAE;gBAC/B,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;aAC1B;iBAAM;gBACH,IAAI,QAAQ,IAAI,IAAI,EAAE;oBAClB,QAAQ,CAAC,MAAM,IAAI,KAAK,CAAC,MAAM,CAAC;iBACnC;gBACD,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,IAAI,GAAG,GAAG,CAAC,CAAC,MAAM,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,MAAM,GAAG,CAAC,CAAC,CAAC;gBACvE,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;gBACtB,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;aAC1B;YACD,KAAK,CAAC,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE,IAAI,CAAC,CAAC;SAC1D;aAAM,IAAI,MAAM,EAAE;YACf,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,EAAE,CAAC,CAAC;YAC/B,KAAK,CAAC,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE,IAAI,CAAC,CAAC;SAC1D;aAAM;YACH,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;YAC1B,KAAK,CAAC,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE,KAAK,CAAC,CAAC;SAC3D;QACD,IAAI,IAAI,CAAC,YAAY,IAAI,IAAI,EAAE;YAC3B,IAAI,QAAQ,IAAI,IAAI,EAAE;gBAClB,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;aAC7B;YACD,IAAI,MAAM,KAAK,OAAO,CAAC,IAAI,EAAE;gBACzB,IAAI,CAAC,WAAW,EAAE,CAAC;aACtB;SACJ;KACJ;IAEM,UAAU,CAAC,KAAY;QAC1B,IAAI,CAAC,EAAE,CAAC,WAAW,GAAG,IAAI,CAAC,EAAE,CAAC,WAAW,IAAI,KAAK,CAAC,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACnG,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,KAAK,CAAC,KAAK,MAAM,CAAC,EAAE;YACpC,OAAO;SACV;QACD,IAAI,IAAI,CAAC,OAAO,KAAK,YAAY,CAAC,MAAM,EAAE;YACtC,IAAI,IAAI,CAAC,YAAY,IAAI,IAAI,EAAE;gBAC3B,IAAI,KAAK,CAAC,QAAQ,KAAK,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE;oBAC/C,IAAI,CAAC,YAAY,CAAC,MAAM,KAAK,KAAK,CAAC,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC;oBAC1D,KAAK,CAAC,KAAK,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC;oBACtC,OAAO;iBACV;gBACD,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;aACzC;YACD,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;YAC1B,IAAI,KAAK,CAAC,KAAK,IAAI,IAAI,EAAE;gBACrB,KAAK,CAAC,KAAK,GAAG,IAAI,KAAK,CAAC,KAAK,CAAC,CAAC;aAClC;YACD,IAAI,IAAI,CAAC,aAAa,IAAI,IAAI,EAAE;gBAC5B,IAAI,KAAK,CAAC,QAAQ,KAAK,IAAI,CAAC,aAAa,CAAC,QAAQ,EAAE;oBAChD,IAAI,CAAC,aAAa,CAAC,MAAM,KAAK,KAAK,CAAC,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC;oBAC3D,KAAK,CAAC,KAAK,GAAG,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC;oBACvC,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,aAAa,CAAC;oBACvC,OAAO;iBACV;gBACD,IAAI,CAAC,aAAa,CAAC,SAAS,GAAG,KAAK,CAAC;aACxC;YACD,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC;SAC9B;aAAM,IAAI,IAAI,CAAC,OAAO,KAAK,YAAY,CAAC,eAAe,EAAE;YACtD,IAAI,IAAI,CAAC,YAAY,IAAI,IAAI,EAAE;gBAC3B,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;aAC7B;iBAAM;gBACH,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;gBAChC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC;aACzC;SACJ;aAAM,IAAI,IAAI,CAAC,OAAO,KAAK,YAAY,CAAC,IAAI,EAAE;YAC3C,IAAI,IAAI,CAAC,YAAY,IAAI,IAAI,EAAE;gBAC3B,IAAI,CAAC,YAAY,CAAC,cAAc,GAAG,IAAI,CAAC,YAAY,CAAC;gBACrD,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;aAC5C;YACD,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;YAC1B,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC;YACnB,IAAI,CAAC,YAAY,GAAG,CAAC,CAAC;YACtB,IAAI,IAAI,CAAC,aAAa,IAAI,IAAI,EAAE;gBAC5B,IAAI,CAAC,aAAa,CAAC,SAAS,GAAG,KAAK,CAAC;aACxC;YACD,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC;SAC9B;KACJ;IAEM,YAAY,CAAC,GAAQ;QACxB,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC;QACvC,IAAI,CAAC,GAAS,IAAI,CAAC,EAAE,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;QACxC,IAAI,IAAI,CAAC,YAAY,IAAI,IAAI,EAAE;YAC3B,IAAI,IAAI,CAAC,OAAO,KAAK,YAAY,CAAC,MAAM,IAAI,IAAI,CAAC,OAAO,KAAK,YAAY,CAAC,eAAe,EAAE;gBACvF,IAAI,CAAC,YAAY,CAAC,KAAM,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;aAChE;iBAAM;gBACH,IAAI,IAAY,CAAC;gBACjB,IAAI,CAAC,CAAC,IAAI,KAAK,WAAW,CAAC,IAAI,IAAI,CAAC,CAAC,IAAI,KAAK,WAAW,CAAC,MAAM,EAAE;oBAC9D,IAAI,GAAG,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC;iBAC7B;qBAAM;oBACH,IAAI,GAAG,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC;iBAC7B;gBACD,IAAI,IAAI,GAAG,IAAI,CAAC,YAAY,EAAE;oBAC1B,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;iBAC5B;gBACD,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;aACzB;SACJ;QACD,IAAI,KAAK,GAAW,CAAC,CAAC,KAAK,CAAC;QAC5B,IAAI,CAAC,CAAC,IAAI,KAAK,WAAW,CAAC,IAAI,IAAI,CAAC,CAAC,IAAI,KAAK,WAAW,CAAC,MAAM,EAAE;YAC9D,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,EAAE,KAAK,CAAC,CAAC;SAC9B;aAAM,IAAI,KAAK,IAAI,GAAG,EAAE;YACrB,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,EAAE,KAAK,CAAC,CAAC;SAC9B;aAAM;YACH,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;SACvC;KACJ;IAEM,aAAa,CAAC,KAAa,EAAE,SAAiB;QACjD,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC;QACvC,IAAI,IAAI,CAAC,YAAY,IAAI,IAAI,EAAE;YAC3B,IAAI,IAAI,CAAC,OAAO,KAAK,YAAY,CAAC,MAAM,IAAI,IAAI,CAAC,OAAO,KAAK,YAAY,CAAC,eAAe,EAAE;gBACvF,IAAI,CAAC,YAAY,CAAC,KAAM,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;aACrE;SACJ;QACD,IAAI,IAAI,CAAC,OAAO,KAAK,YAAY,CAAC,OAAO,EAAE;YACvC,IAAI,CAAC,GAAW,KAAK,GAAG,CAAC,CAAC;YAC1B,IAAI,CAAC,GAAG,IAAI,CAAC,SAAS,EAAE;gBACpB,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC;aACtB;SACJ;QACD,IAAI,CAAC,KAAK,GAAG,GAAG,MAAM,SAAS,GAAG,GAAG,CAAC,KAAK,SAAS,GAAG,CAAC,GAAG,CAAC,EAAE;YAC1D,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;SACzE;aAAM;YACH,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC;SAC3D;KACJ;IAEM,oBAAoB,CAAC,GAAW,EAAE,GAAW,EAAE,IAAW,EAAE,GAAG,MAAe;QACjF,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC;QACvC,IAAI,MAAM,GAAW,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC;QACtC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;QACvC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;QAChE,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC;QACxC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;QAClC,KAAK,IAAI,CAAC,GAAW,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;YAC5C,MAAM,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC;SAChD;QACD,IAAI,CAAC,eAAe,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;KACtC;IAEM,qBAAqB,CAAC,IAAW,EAAE,IAAc,EAAE,MAAe;QACrE,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC;QACvC,IAAI,MAAM,GAAW,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC;QACtC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;QACxC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;QAChE,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC;QACxC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QAChC,KAAK,IAAI,CAAC,GAAW,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;YAC5C,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;YAC1B,MAAM,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC;SAChD;QACD,IAAI,CAAC,eAAe,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;KACtC;IAEO,eAAe,CAAC,IAAW,EAAE,MAAe;QAChD,IAAI,IAAI,CAAC,YAAY,IAAI,IAAI,EAAE;YAC3B,IAAI,IAAI,CAAC,OAAO,KAAK,YAAY,CAAC,MAAM,EAAE;gBACtC,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;gBAChC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,YAAY,EAAE,CAAC,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;gBACrE,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;gBACrC,IAAI,CAAC,QAAQ,EAAE,CAAC,MAAM,IAAI,KAAK,CAAC,MAAM,CAAC;gBACvC,KAAK,IAAI,CAAC,GAAW,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;oBAC5C,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;oBAC1C,MAAM,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,MAAM,IAAI,KAAK,CAAC,MAAM,CAAC;iBAC/C;aACJ;iBAAM;gBACH,EAAE,IAAI,CAAC,SAAS,CAAC;gBACjB,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;gBACxC,KAAK,IAAI,CAAC,GAAW,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;oBAC5C,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;iBAChD;aACJ;YACD,IAAI,CAAC,WAAW,EAAE,CAAC;SACtB;KACJ;IAEM,uBAAuB,CAAC,IAAY,EAAE,IAAY;QACrD,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC;QACvC,IAAI,CAAC,GAAS,IAAI,CAAC,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;QACzC,IAAI,IAAI,CAAC,YAAY,IAAI,IAAI,EAAE;YAC3B,IAAI,IAAI,CAAC,OAAO,KAAK,YAAY,CAAC,MAAM,IAAI,IAAI,CAAC,OAAO,KAAK,YAAY,CAAC,eAAe,EAAE;gBACvF,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;gBAChC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,cAAc,EAAE,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;aAC7E;iBAAM;gBACH,IAAI,CAAC,SAAS,IAAI,CAAC,GAAG,IAAI,CAAC;aAC9B;SACJ;QACD,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,cAAc,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;KAClE;IAEM,mBAAmB,CAAC,OAAe,EAAE,QAAkB,EAAE,IAAY,EAAE,OAAgB;QAC1F,IAAI,CAAC,WAAW,CAAC,WAAW,EAAE;YAC1B,OAAO,IAAI,CAAC;SACf;QACD,IAAI,EAAE,GAAe,IAAI,UAAU,EAAE,CAAC;QACtC,OAAO,GAAG,CAAC,OAAO,GAAG,CAAC,QAAQ,KAAK,IAAI,CAAC,cAAc,IAAI,CAAC,CAAC,CAAC;QAC7D,gBAAgB,CAAC,SAAS,CAAC,OAAO,EAAE,QAAQ,EAAE,EAAE,CAAC,CAAC;QAClD,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;QAC/C,IAAI,EAAE,GAAqB,IAAI,gBAAgB,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QACtF,IAAI,OAAO,EAAE;YACT,EAAE,CAAC,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC;YACtB,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;SACpB;aAAM;YACH,EAAE,CAAC,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC;YACvB,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC;SACrB;QACD,OAAO,EAAE,CAAC;KACb;IAEM,kBAAkB,CAAC,KAAY,EAAE,GAAU,EAAE,OAAc,EAAE,IAAY;QAC5E,EAAE,IAAI,CAAC,YAAY,CAAC;QACpB,IAAI,CAAC,GAAY,IAAI,OAAO,EAAE,CAAC;QAC/B,CAAC,CAAC,KAAK,GAAG,KAAK,CAAC;QAChB,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC;QACZ,CAAC,CAAC,OAAO,GAAG,OAAO,CAAC;QACpB,CAAC,CAAC,IAAI,GAAG,IAAI,CAAC;QACd,CAAC,CAAC,IAAI,GAAG,IAAI,IAAI,IAAI,GAAG,IAAI,CAAC,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACnD,IAAI,IAAI,CAAC,WAAW,IAAI,IAAI,EAAE;YAC1B,IAAI,CAAC,YAAY,GAAG,CAAC,CAAC;SACzB;aAAM;YACH,IAAI,CAAC,WAAW,CAAC,IAAI,GAAG,CAAC,CAAC;SAC7B;QACD,IAAI,CAAC,WAAW,GAAG,CAAC,CAAC;KACxB;IAEM,uBAAuB,CAAC,OAAe,EAAE,QAAkB,EAAE,IAAY,EAAE,OAAgB;QAC9F,IAAI,CAAC,WAAW,CAAC,WAAW,EAAE;YAC1B,OAAO,IAAI,CAAC;SACf;QACD,IAAI,EAAE,GAAe,IAAI,UAAU,EAAE,CAAC;QACtC,gBAAgB,CAAC,SAAS,CAAC,OAAO,EAAE,QAAQ,EAAE,EAAE,CAAC,CAAC;QAClD,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;QAC/C,IAAI,EAAE,GAAqB,IAAI,gBAAgB,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QACtF,IAAI,OAAO,EAAE;YACT,EAAE,CAAC,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC;YACtB,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;SACpB;aAAM;YACH,EAAE,CAAC,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC;YACvB,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC;SACrB;QACD,OAAO,EAAE,CAAC;KACb;IAEM,kBAAkB,CAAC,IAAY,EAAE,IAAY,EAAE,SAAiB,EAAE,KAAY,EAAE,GAAU,EAAE,KAAa;QAC5G,IAAI,SAAS,IAAI,IAAI,EAAE;YACnB,IAAI,IAAI,CAAC,YAAY,IAAI,IAAI,EAAE;gBAC3B,IAAI,CAAC,YAAY,GAAG,IAAI,UAAU,EAAE,CAAC;aACxC;YACD,EAAE,IAAI,CAAC,iBAAiB,CAAC;YACzB,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,QAAQ,GAAG,KAAK,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;SAC3K;QACD,IAAI,IAAI,CAAC,QAAQ,IAAI,IAAI,EAAE;YACvB,IAAI,CAAC,QAAQ,GAAG,IAAI,UAAU,EAAE,CAAC;SACpC;QACD,EAAE,IAAI,CAAC,aAAa,CAAC;QACrB,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,QAAQ,GAAG,KAAK,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QAC/J,IAAI,IAAI,CAAC,OAAO,KAAK,YAAY,CAAC,OAAO,EAAE;YACvC,IAAI,CAAC,GAAW,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YAC/B,IAAI,CAAC,GAAW,KAAK,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;YACzD,IAAI,CAAC,GAAG,IAAI,CAAC,SAAS,EAAE;gBACpB,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC;aACtB;SACJ;KACJ;IAEM,4BAA4B,CAAC,OAAe,EAAE,QAAkB,EAAE,KAAc,EAAE,GAAY,EAAE,KAAe,EAAE,IAAY,EAAE,OAAgB;QAClJ,IAAI,CAAC,WAAW,CAAC,WAAW,EAAE;YAC1B,OAAO,IAAI,CAAC;SACf;QACD,IAAI,EAAE,GAAe,IAAI,UAAU,EAAE,CAAC;QACtC,EAAE,CAAC,OAAO,CAAC,OAAO,KAAK,EAAE,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;QAClD,KAAK,IAAI,CAAC,GAAW,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;YAC3C,EAAE,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,QAAQ,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;SACnG;QACD,IAAI,QAAQ,IAAI,IAAI,EAAE;YAClB,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;SACjB;aAAM;YACH,IAAI,MAAM,GAAW,QAAQ,CAAC,GAAG,CAAC,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YAC3D,EAAE,CAAC,YAAY,CAAC,QAAQ,CAAC,GAAG,EAAE,QAAQ,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;SAC1D;QACD,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;QAC/C,IAAI,EAAE,GAAqB,IAAI,gBAAgB,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QACtF,IAAI,OAAO,EAAE;YACT,EAAE,CAAC,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC;YACtB,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;SACpB;aAAM;YACH,EAAE,CAAC,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC;YACvB,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC;SACrB;QACD,OAAO,EAAE,CAAC;KACb;IAEM,eAAe,CAAC,IAAY,EAAE,KAAY;QAC7C,IAAI,IAAI,CAAC,UAAU,IAAI,IAAI,EAAE;YACzB,IAAI,CAAC,UAAU,GAAG,IAAI,UAAU,EAAE,CAAC;SACtC;QACD,EAAE,IAAI,CAAC,eAAe,CAAC;QACvB,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;QACzC,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;KAClC;IAEM,SAAS,CAAC,QAAgB,EAAE,SAAiB;QAChD,IAAI,WAAW,CAAC,MAAM,IAAI,IAAI,CAAC,OAAO,KAAK,YAAY,CAAC,MAAM,EAAE;YAC5D,IAAI,OAAO,GAAmB,IAAI,CAAC,YAAY,CAAC;YAChD,QAAQ,OAAO,IAAI,IAAI,GAAG;gBACtB,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAA;gBACrB,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAA;gBACvB,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,CAAA;gBAEnB,IAAI,CAAC,GAAU,OAAO,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC;gBACxC,IAAI,CAAC,GAAU,OAAO,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC;gBAC1C,IAAI,CAAC,GAAU,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC;gBACtC,IAAI,CAAC,GAAW,OAAO,CAAC,IAAI,IAAI,IAAI,GAAG,qBAAqB,GAAG,OAAO,CAAC,IAAI,CAAC;gBAC5E,IAAI,IAAI,GAAW,KAAK,CAAC,WAAW,EAAE,GAAG,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;gBAC5D,CAAC,CAAC,MAAM,IAAI,KAAK,CAAC,MAAM,CAAC;gBACzB,QAAQ,CAAC,KAAK,CAAC,GAAG;oBACd,IAAI,CAAC,GAAS,IAAI,IAAI,EAAE,CAAC;oBACzB,CAAC,CAAC,IAAI,GAAG,IAAI,CAAC;oBACd,CAAC,CAAC,SAAS,GAAG,CAAC,CAAC;oBAChB,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC,UAAU,CAAC;oBACtB,CAAC,CAAC,UAAU,GAAG,CAAC,CAAC;oBACjB,CAAC,GAAG,CAAC,CAAC,SAAS,CAAC;iBACnB;gBACD,OAAO,GAAG,OAAO,CAAC,IAAI,CAAC;aAC1B;YACD,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YACpB,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YAC1B,IAAI,CAAC,GAAiB,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC;YACxC,CAAC,CAAC,cAAc,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;YAC/F,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;YACnB,IAAI,GAAG,GAAW,CAAC,CAAC;YACpB,IAAI,OAAO,GAAiB,IAAI,CAAC,MAAM,CAAC;YACxC,QAAQ,OAAO,IAAI,IAAI,GAAG;gBACtB,IAAI,CAAC,GAAU,OAAO,CAAC;gBACvB,OAAO,GAAG,OAAO,CAAC,IAAI,CAAC;gBACvB,CAAC,CAAC,IAAI,GAAG,IAAI,CAAC;gBACd,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC;gBACZ,IAAI,CAAC,CAAC,CAAC,MAAM,GAAG,KAAK,CAAC,MAAM,MAAM,CAAC,EAAE;oBACjC,CAAC,CAAC,MAAM,IAAI,KAAK,CAAC,KAAK,CAAC;iBAC3B;gBACD,MAAM,CAAC,CAAC,CAAC,CAAC;gBACV,CAAC,CAAC,MAAM,IAAI,KAAK,CAAC,SAAS,CAAC;gBAC5B,IAAI,QAAQ,GAAW,CAAC,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC,cAAc,CAAC;gBAC9D,IAAI,QAAQ,GAAG,GAAG,EAAE;oBAChB,GAAG,GAAG,QAAQ,CAAC;iBAClB;gBACD,IAAI,CAAC,GAAgB,CAAC,CAAC,UAAU,CAAC;gBAClC,QAAQ,CAAC,IAAI,IAAI,GAAG;oBAChB,IAAI,CAAC,GAAU,CAAC,CAAC,SAAU,CAAC,QAAQ,EAAE,CAAC;oBACvC,IAAI,MAAM,GAAY,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,CAAC,KAAM,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC;oBACzD,IAAI,MAAM,IAAI,CAAC,CAAC,IAAI,IAAI,IAAI,EAAE;wBAC1B,CAAC,CAAC,IAAI,GAAG,OAAO,CAAC;wBACjB,OAAO,GAAG,CAAC,CAAC;qBACf;oBACD,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;iBACd;aACJ;YACD,IAAI,CAAC,GAAiB,IAAI,CAAC,MAAM,CAAC;YAClC,QAAQ,CAAC,IAAI,IAAI,GAAG;gBAChB,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC;gBACZ,IAAI,CAAC,CAAC,CAAC,MAAM,GAAG,KAAK,CAAC,KAAK,MAAM,CAAC,EAAE;oBAChC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;iBACtB;gBACD,IAAI,CAAC,CAAC,CAAC,MAAM,GAAG,KAAK,CAAC,SAAS,MAAM,CAAC,EAAE;oBACpC,IAAI,CAAC,GAAiB,CAAC,CAAC,SAAS,CAAC;oBAClC,IAAI,KAAK,GAAW,CAAC,CAAC,QAAQ,CAAC;oBAC/B,IAAI,GAAG,GAAW,CAAC,CAAC,IAAI,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,QAAQ,IAAI,CAAC,CAAC;oBAClE,IAAI,GAAG,IAAI,KAAK,EAAE;wBACd,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;wBACvB,KAAK,IAAI,CAAC,GAAW,KAAK,EAAE,CAAC,GAAG,GAAG,EAAE,EAAE,CAAC,EAAE;4BACtC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,OAAO,CAAC,GAAG,CAAC;yBACnC;wBACD,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;wBAC3C,IAAI,UAAU,GAAW,IAAI,CAAC,UAAU,CAAC,KAAK,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;wBACtD,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;wBACnB,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,GAAG,KAAK,CAAC,WAAW,EAAE,GAAG,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,qBAAqB,CAAC,CAAC;wBACtF,IAAI,CAAC,QAAQ,EAAE,CAAC;wBAChB,IAAI,CAAC,YAAY,GAAG,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;qBAC/D;iBACJ;gBACD,CAAC,GAAG,CAAC,CAAC,SAAS,CAAC;aACnB;YACD,OAAO,GAAG,IAAI,CAAC,YAAY,CAAC;YAC5B,IAAI,CAAC,YAAY,GAAG,CAAC,CAAC;YACtB,QAAQ,OAAO,IAAI,IAAI,GAAG;gBACtB,IAAI,CAAC,YAAY,IAAI,CAAC,CAAC;gBACvB,OAAO,GAAG,OAAO,CAAC,IAAI,CAAC;aAC1B;YACD,IAAI,CAAC,QAAQ,GAAG,GAAG,CAAC;SACvB;aAAM,IAAI,IAAI,CAAC,OAAO,KAAK,YAAY,CAAC,IAAI,EAAE;YAC3C,IAAI,OAAO,GAAmB,IAAI,CAAC,YAAY,CAAC;YAChD,QAAQ,OAAO,IAAI,IAAI,GAAG;gBACtB,IAAI,CAAC,GAAiB,OAAO,CAAC,KAAK,CAAC;gBACpC,IAAI,CAAC,GAAiB,OAAO,CAAC,OAAO,CAAC;gBACtC,IAAI,CAAC,GAAiB,OAAO,CAAC,GAAG,CAAC;gBAClC,QAAQ,CAAC,KAAK,CAAC,GAAG;oBACd,IAAI,CAAC,GAAS,IAAI,IAAI,EAAE,CAAC;oBACzB,CAAC,CAAC,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC;oBACxB,CAAC,CAAC,SAAS,GAAG,CAAC,CAAC;oBAChB,IAAI,CAAC,CAAE,CAAC,MAAM,GAAG,KAAK,CAAC,GAAG,MAAM,CAAC,EAAE;wBAC/B,CAAC,CAAC,IAAI,GAAG,CAAE,CAAC,UAAU,CAAC;wBACvB,CAAE,CAAC,UAAU,GAAG,CAAC,CAAC;qBACrB;yBAAM;wBACH,CAAC,CAAC,IAAI,GAAG,CAAE,CAAC,UAAU,CAAC,IAAK,CAAC,IAAI,CAAC;wBAClC,CAAE,CAAC,UAAU,CAAC,IAAK,CAAC,IAAI,GAAG,CAAC,CAAC;qBAChC;oBACD,CAAC,GAAG,CAAE,CAAC,SAAS,CAAC;iBACpB;gBACD,OAAO,GAAG,OAAO,CAAC,IAAI,CAAC;aAC1B;YACD,IAAI,IAAI,CAAC,WAAW,GAAG,CAAC,EAAE;gBACtB,IAAI,EAAE,GAAW,CAAC,CAAC;gBACnB,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;gBACpB,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,IAAI,EAAE,CAAC,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;gBACvD,IAAI,CAAC,GAAiB,IAAI,CAAC,MAAM,CAAC;gBAClC,QAAQ,CAAC,IAAI,IAAI,GAAG;oBAChB,IAAI,CAAC,CAAC,CAAC,MAAM,GAAG,KAAK,CAAC,GAAG,MAAM,CAAC,EAAE;wBAC9B,IAAI,UAAU,GAAiB,CAAC,CAAC,UAAU,CAAC,IAAK,CAAC,SAAS,CAAC;wBAC5D,MAAM,CAAC,UAAU,CAAC,CAAC;wBACnB,IAAI,CAAC,UAAU,CAAC,MAAM,GAAG,KAAK,CAAC,OAAO,MAAM,CAAC,EAAE;4BAC3C,EAAE,IAAI,CAAC,CAAC;4BACR,UAAU,CAAC,eAAe,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,EAAE,GAAG,EAAE,CAAC,CAAC,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;yBACtG;qBACJ;oBACD,CAAC,GAAG,CAAC,CAAC,SAAS,CAAC;iBACnB;gBACD,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC;gBAChB,QAAQ,CAAC,IAAI,IAAI,GAAG;oBAChB,IAAI,CAAC,CAAC,CAAC,MAAM,GAAG,KAAK,CAAC,GAAG,MAAM,CAAC,EAAE;wBAC9B,IAAI,CAAC,GAAiB,IAAI,CAAC,MAAM,CAAC;wBAClC,QAAQ,CAAC,IAAI,IAAI,GAAG;4BAChB,CAAC,CAAC,MAAM,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC;4BAC5B,CAAC,GAAG,CAAC,CAAC,SAAS,CAAC;yBACnB;wBACD,IAAI,UAAU,GAAG,CAAC,CAAC,UAAU,CAAC,IAAK,CAAC,SAAS,CAAC;wBAC9C,UAAW,CAAC,eAAe,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;qBACvD;oBACD,CAAC,GAAG,CAAC,CAAC,SAAS,CAAC;iBACnB;aACJ;YACD,IAAI,GAAG,GAAW,CAAC,CAAC;YACpB,IAAI,KAAK,GAAiB,IAAI,CAAC,MAAM,CAAC;YACtC,QAAQ,KAAK,IAAI,IAAI,GAAG;gBACpB,IAAI,CAAC,GAAiB,KAAK,CAAC;gBAC5B,KAAK,GAAG,KAAK,CAAC,IAAI,CAAC;gBACnB,IAAI,KAAK,GAAW,CAAC,CAAC,aAAa,CAAC;gBACpC,IAAI,QAAQ,GAAW,KAAK,GAAG,CAAC,CAAC,cAAc,CAAC;gBAChD,IAAI,QAAQ,GAAG,GAAG,EAAE;oBAChB,GAAG,GAAG,QAAQ,CAAC;iBAClB;gBACD,IAAI,CAAC,GAAgB,CAAC,CAAC,UAAU,CAAC;gBAClC,IAAI,CAAC,CAAC,CAAC,MAAM,GAAG,KAAK,CAAC,GAAG,MAAM,CAAC,EAAE;oBAC9B,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;iBACd;gBACD,QAAQ,CAAC,IAAI,IAAI,GAAG;oBAChB,CAAC,GAAG,CAAC,CAAC,SAAS,CAAC;oBAChB,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,GAAG,KAAK,CAAC,MAAM,MAAM,CAAC,EAAE;wBACtC,CAAC,CAAC,aAAa,GAAG,CAAC,CAAC,IAAI,KAAK,IAAI,CAAC,SAAS,GAAG,CAAC,GAAG,KAAK,GAAG,CAAC,CAAC,IAAI,CAAC;wBACjE,CAAC,CAAC,MAAM,IAAI,KAAK,CAAC,MAAM,CAAC;wBACzB,CAAC,CAAC,IAAI,GAAG,KAAK,CAAC;wBACf,KAAK,GAAG,CAAC,CAAC;qBACb;oBACD,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;iBACd;aACJ;YACD,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC;SAC3C;aAAM;YACH,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;YACzB,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;SAC9B;KACJ;IAEM,QAAQ;KACd;;;;;;;;;IAUO,YAAY,CAAC,IAAY,EAAE,SAAgB;QAC/C,IAAI,CAAC,GAAS,IAAI,IAAI,EAAE,CAAC;QACzB,CAAC,CAAC,IAAI,GAAG,IAAI,CAAC;QACd,CAAC,CAAC,SAAS,GAAG,SAAS,CAAC;QACxB,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QAC1B,CAAC,CAAC,IAAI,GAAG,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC;QACtC,IAAI,CAAC,YAAY,CAAC,UAAU,GAAG,CAAC,CAAC;KACpC;;;;;IAMO,WAAW;QACf,IAAI,IAAI,CAAC,OAAO,KAAK,YAAY,CAAC,MAAM,EAAE;YACtC,IAAI,CAAC,GAAU,IAAI,KAAK,EAAE,CAAC;YAC3B,CAAC,CAAC,KAAK,GAAG,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC;YACvB,CAAC,CAAC,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAClD,IAAI,CAAC,aAAc,CAAC,SAAS,GAAG,CAAC,CAAC;YAClC,IAAI,CAAC,aAAa,GAAG,CAAC,CAAC;SAC1B;aAAM;YACH,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;YAC1B,IAAI,CAAC,YAAY,CAAC,cAAc,GAAG,IAAI,CAAC,YAAY,CAAC;SACxD;QACD,IAAI,IAAI,CAAC,OAAO,KAAK,YAAY,CAAC,eAAe,EAAE;YAC/C,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;SAC5B;KACJ;;;;;;;IAQO,gBAAgB,CAAC,CAAQ;QAC7B,IAAI,CAAS,CAAC;QACd,IAAI,CAAS,CAAC;QACd,IAAI,IAAI,GAAW,CAAC,CAAC;QACrB,IAAI,MAAM,GAAW,CAAC,CAAC;QACvB,IAAI,MAAM,GAAW,CAAC,CAAC;QACvB,IAAI,MAAM,GAAa,CAAC,CAAC,WAAW,CAAC;QACrC,IAAI,MAAM,GAAa,CAAC,CAAC,UAAU,CAAC;QACpC,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;YAChC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;YACd,IAAI,CAAC,KAAK,KAAK,CAAC,QAAQ,EAAE,EAAE;gBACxB,EAAE,IAAI,CAAC;aACV;iBAAM;gBACH,MAAM,IAAI,IAAI,GAAG,CAAC,CAAC;gBACnB,IAAI,GAAG,CAAC,CAAC;aACZ;YACD,IAAI,CAAC,KAAK,KAAK,CAAC,SAAS,EAAE,IAAI,CAAC,KAAK,KAAK,CAAC,WAAW,EAAE,EAAE;gBACtD,EAAE,CAAC,CAAC;aACP;SACJ;QACD,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;YAChC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;YACd,EAAE,MAAM,CAAC;YACT,IAAI,CAAC,KAAK,KAAK,CAAC,SAAS,EAAE,IAAI,CAAC,KAAK,KAAK,CAAC,WAAW,EAAE,EAAE;gBACtD,EAAE,CAAC,CAAC;aACP;SACJ;QACD,IAAI,UAAU,GAAW,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,KAAK,CAAC,QAAQ,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;QAC3E,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;QAClB,KAAK,CAAC,GAAG,CAAC,EAAE,MAAM,GAAG,CAAC,EAAE,EAAE,CAAC,EAAE,EAAE,MAAM,EAAE;YACnC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;YACd,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,CAAC,GAAG,CAAC,CAAC;YAC7B,IAAI,CAAC,KAAK,KAAK,CAAC,SAAS,EAAE,IAAI,CAAC,KAAK,KAAK,CAAC,WAAW,EAAE,EAAE;gBACtD,EAAE,CAAC,CAAC;aACP;SACJ;QACD,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;YAChC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;YACd,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,CAAC,GAAG,CAAC,CAAC;YAC7B,IAAI,CAAC,KAAK,KAAK,CAAC,SAAS,EAAE,IAAI,CAAC,KAAK,KAAK,CAAC,WAAW,EAAE,EAAE;gBACtD,EAAE,CAAC,CAAC;aACP;SACJ;QACD,IAAI,CAAC,QAAQ,EAAE,CAAC;KACnB;;;;IAKO,uBAAuB;QAC3B,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;QAClB,IAAI,UAAU,GAAW,IAAI,CAAC,UAAU,CAAC,CAAC,EAAE,IAAI,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;QAC3E,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,UAAU,MAAM,CAAC,EAAE;YAC1C,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,YAAY,CAAC,eAAe,MAAM,CAAC,EAAE;gBACpD,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,CAAC,GAAG,KAAK,CAAC,WAAW,EAAE,GAAG,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC;aACtF;iBAAM;gBACH,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,CAAC,GAAG,CAAC,CAAC;aAChC;SACJ;QACD,IAAI,CAAC,GAAW,CAAC,CAAC;QAClB,IAAI,EAAE,QAAQ,IAAI,GAAG;YACjB,IAAI,CAAC,GAAW,CAAC,CAAC;YAClB,SAAS,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC;gBAChC,KAAK,GAAG,CAAC;gBACT,KAAK,GAAG,CAAC;gBACT,KAAK,GAAG,CAAC;gBACT,KAAK,GAAG,CAAC;gBACT,KAAK,GAAG;oBACJ,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,CAAC,GAAG,CAAC,CAAC;oBAC7B,MAAM;gBACV,KAAK,GAAG;oBACJ,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,CAAC,GAAG,CAAC,CAAC;oBAC7B,MAAM;gBACV,KAAK,GAAG;oBACJ,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,CAAC,GAAG,CAAC,CAAC;oBAC7B,MAAM;gBACV,KAAK,GAAG;oBACJ,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,CAAC,GAAG,CAAC,CAAC;oBAC7B,MAAM;gBACV,KAAK,GAAG;oBACJ,QAAQ,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,GAAG;wBACxC,EAAE,CAAC,CAAC;qBACP;oBACD,IAAI,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;wBACnC,EAAE,CAAC,CAAC;wBACJ,QAAQ,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,GAAG;4BACxC,EAAE,CAAC,CAAC;yBACP;qBACJ;oBACD,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,CAAC,GAAG,KAAK,CAAC,WAAW,EAAE,GAAG,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;oBACpG,MAAM;gBACV,KAAK,GAAG;oBACJ,QAAQ,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,GAAG;wBACxC,EAAE,CAAC,CAAC;qBACP;oBACD,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,CAAC,GAAG,KAAK,CAAC,WAAW,EAAE,GAAG,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;oBACxG,MAAM;gBACV;oBACI,MAAM,IAAI,CAAC;aAClB;SACJ;QACD,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,UAAU,GAAG,CAAC,CAAC;QAC/B,IAAI,CAAC,QAAQ,EAAE,CAAC;KACnB;;;;;;;;;;;;IAaO,UAAU,CAAC,MAAc,EAAE,MAAc,EAAE,MAAc;QAC7D,IAAI,CAAC,GAAW,CAAC,GAAG,MAAM,GAAG,MAAM,CAAC;QACpC,IAAI,IAAI,CAAC,KAAK,IAAI,IAAI,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE;YAC7C,IAAI,CAAC,KAAK,GAAG,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC;SAC7B;QACD,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC;QACvB,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC;QACvB,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC;QACvB,OAAO,CAAC,CAAC;KACZ;;;;;IAMO,QAAQ;QACZ,IAAI,IAAI,CAAC,aAAa,IAAI,IAAI,EAAE;YAC5B,IAAI,IAAI,CAAC,QAAQ,IAAI,IAAI,EAAE;gBACvB,IAAI,CAAC,QAAQ,GAAG,IAAI,UAAU,EAAE,CAAC;aACpC;YACD,IAAI,CAAC,UAAU,EAAE,CAAC;YAClB,EAAE,IAAI,CAAC,UAAU,CAAC;SACrB;QACD,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,KAAK,CAAC;QAChC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;KACrB;;;;;IAMO,UAAU;QACd,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACnB,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QAC3B,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAEtB,IAAI,WAAW,GAAW,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QACxC,IAAI,UAAU,GAAW,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QACvC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,OAAO,GAAG,KAAK,IAAI,OAAO,CAAC,IAAI,EAAE;YAC1C,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;YAC5D,IAAI,CAAC,eAAe,CAAC,CAAC,EAAE,CAAC,GAAG,WAAW,CAAC,CAAC;YACzC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;YACnC,IAAI,CAAC,eAAe,CAAC,CAAC,GAAG,WAAW,EAAE,CAAC,GAAG,WAAW,GAAG,UAAU,CAAC,CAAC;YACpE,OAAO;SACV;QACD,IAAI,UAAU,GAAW,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;QAC/C,IAAI,IAAI,GAAW,YAAY,CAAC,UAAU,CAAC;QAC3C,IAAI,CAAC,GAAW,CAAC,CAAC;QAClB,IAAI,KAAa,CAAC;QAClB,IAAI,IAAI,CAAC,UAAU,KAAK,CAAC,EAAE;YACvB,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;SACzB;aAAM;YACH,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;SACrD;QACD,IAAI,UAAU,KAAK,CAAC,EAAE;YAClB,CAAC,GAAG,WAAW,GAAG,UAAU,CAAC;YAC7B,SAAS,CAAC;gBACN,KAAK,CAAC,CAAC,CAAC;gBACR,KAAK,CAAC,CAAC,CAAC;gBACR,KAAK,CAAC,CAAC;oBACH,IAAI,GAAG,YAAY,CAAC,UAAU,CAAC;oBAC/B,UAAU,GAAG,WAAW,CAAC;oBACzB,MAAM;gBACV,KAAK,CAAC;oBACF,IAAI,GAAG,KAAK,GAAG,EAAE,GAAG,YAAY,CAAC,UAAU,GAAG,YAAY,CAAC,mBAAmB,CAAC;oBAC/E,MAAM;gBACV,KAAK,CAAC,CAAC;gBACP,KAAK,CAAC,CAAC;gBACP,KAAK,CAAC;oBACF,IAAI,GAAG,YAAY,CAAC,YAAY,CAAC;oBACjC,MAAM;aACb;SACJ;aAAM,IAAI,WAAW,KAAK,UAAU,IAAI,UAAU,KAAK,CAAC,EAAE;YACvD,IAAI,GAAG,KAAK,GAAG,EAAE,GAAG,YAAY,CAAC,8BAA8B,GAAG,YAAY,CAAC,uCAAuC,CAAC;SAC1H;QACD,IAAI,IAAI,KAAK,YAAY,CAAC,UAAU,EAAE;YAClC,IAAI,CAAC,GAAW,CAAC,CAAC;YAClB,KAAK,IAAI,CAAC,GAAW,CAAC,EAAE,CAAC,GAAG,UAAU,EAAE,CAAC,EAAE,EAAE;gBACzC,IAAI,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,EAAE;oBACzC,IAAI,GAAG,YAAY,CAAC,UAAU,CAAC;oBAC/B,MAAM;iBACT;gBACD,CAAC,EAAE,CAAC;aACP;SACJ;QACD,SAAS,IAAI;YACT,KAAK,YAAY,CAAC,UAAU;gBACxB,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;gBAC7B,MAAM;YACV,KAAK,YAAY,CAAC,8BAA8B;gBAC5C,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,YAAY,CAAC,8BAA8B,GAAG,KAAK,CAAC,CAAC;gBAC3E,IAAI,CAAC,eAAe,CAAC,CAAC,GAAG,WAAW,EAAE,CAAC,GAAG,WAAW,CAAC,CAAC;gBACvD,MAAM;YACV,KAAK,YAAY,CAAC,uCAAuC;gBACrD,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,YAAY,CAAC,uCAAuC,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;gBAC5F,IAAI,CAAC,eAAe,CAAC,CAAC,GAAG,WAAW,EAAE,CAAC,GAAG,WAAW,CAAC,CAAC;gBACvD,MAAM;YACV,KAAK,YAAY,CAAC,mBAAmB;gBACjC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,YAAY,CAAC,mBAAmB,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;gBACxE,MAAM;YACV,KAAK,YAAY,CAAC,UAAU;gBACxB,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,YAAY,CAAC,mBAAmB,GAAG,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;gBAC5E,MAAM;YACV,KAAK,YAAY,CAAC,YAAY;gBAC1B,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,YAAY,CAAC,mBAAmB,GAAG,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;gBAC5E,IAAI,CAAC,eAAe,CAAC,CAAC,GAAG,UAAU,EAAE,CAAC,GAAG,WAAW,CAAC,CAAC;gBACtD,MAAM;YACV;gBACI,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;gBACrF,IAAI,CAAC,eAAe,CAAC,CAAC,EAAE,CAAC,GAAG,WAAW,CAAC,CAAC;gBACzC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;gBACnC,IAAI,CAAC,eAAe,CAAC,CAAC,GAAG,WAAW,EAAE,CAAC,GAAG,WAAW,GAAG,UAAU,CAAC,CAAC;SAC3E;KACJ;;;;;;;;;;;;IAaO,eAAe,CAAC,KAAa,EAAE,GAAW;QAC9C,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACnB,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAEtB,KAAK,IAAI,CAAC,GAAW,KAAK,EAAE,CAAC,GAAG,GAAG,EAAE,EAAE,CAAC,EAAE;YACtC,IAAI,CAAC,GAAW,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YAC9B,IAAI,CAAC,GAAW,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC;YAC9B,IAAI,CAAC,KAAK,CAAC,EAAE;gBACT,IAAI,CAAC,GAAW,CAAC,GAAG,KAAK,CAAC,UAAU,CAAC;gBACrC,SAAS,CAAC,GAAG,KAAK,CAAC,SAAS;oBACxB,KAAK,KAAK,CAAC,WAAW,EAAE;wBACpB,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;wBAClF,MAAM;oBACV,KAAK,KAAK,CAAC,kBAAkB,EAAE;wBAC3B,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;wBAC/D,MAAM;oBACV;wBACI,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;iBAChC;aACJ;iBAAM;gBACH,IAAI,EAAE,GAAW,EAAE,CAAC;gBACpB,CAAC,KAAK,EAAE,CAAC;gBACT,QAAQ,CAAC,EAAE,GAAG,CAAC,GAAG;oBACd,EAAE,IAAI,GAAG,CAAC;iBACb;gBACD,IAAI,CAAC,CAAC,GAAG,KAAK,CAAC,SAAS,MAAM,KAAK,CAAC,WAAW,EAAE,EAAE;oBAC/C,EAAE,IAAI,GAAG,CAAC;oBACV,EAAE,IAAI,IAAI,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC,GAAG,KAAK,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC;oBACtD,EAAE,IAAI,GAAG,CAAC;iBACb;qBAAM;oBACH,SAAS,CAAC,GAAG,EAAE;wBACX,KAAK,CAAC;4BACF,EAAE,IAAI,GAAG,CAAC;4BACV,MAAM;wBACV,KAAK,CAAC;4BACF,EAAE,IAAI,GAAG,CAAC;4BACV,MAAM;wBACV,KAAK,CAAC;4BACF,EAAE,IAAI,GAAG,CAAC;4BACV,MAAM;wBACV,KAAK,CAAC;4BACF,EAAE,IAAI,GAAG,CAAC;4BACV,MAAM;wBACV,KAAK,EAAE;4BACH,EAAE,IAAI,GAAG,CAAC;4BACV,MAAM;wBACV,KAAK,EAAE;4BACH,EAAE,IAAI,GAAG,CAAC;4BACV,MAAM;wBACV,KAAK,EAAE;4BACH,EAAE,IAAI,GAAG,CAAC;4BACV,MAAM;wBACV;4BACI,EAAE,IAAI,GAAG,CAAC;qBACjB;iBACJ;gBACD,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;aACtE;SACJ;KACJ;IAEO,cAAc,CAAC,IAAS;QAC5B,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QACtB,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE;YAC1B,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;SAC7D;aAAM,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE;YACjC,IAAI,CAAC,QAAQ,CAAC,OAAO,iBAAgB,CAAC,IAAI,IAAI,CAAC,EAAE,CAAC;SACrD;aAAM;YACH,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAS,IAAK,CAAC,QAAQ,CAAC,CAAC;SAC7D;KACJ;;;;;;IAOD,OAAO;QACH,IAAI,IAAI,CAAC,iBAAiB,KAAK,CAAC,EAAE;YAC9B,OAAO,CAAC,GAAG,IAAI,CAAC,iBAAiB,CAAC;SACrC;QACD,IAAI,IAAI,GAAW,CAAC,CAAC;QACrB,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE;YACtB,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,KAAK,EAAE;gBAC1B,MAAM,IAAI,KAAK,CAAC,wBAAwB,CAAC,CAAC;aAC7C;YACD,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;YACxB,IAAI,IAAI,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,GAAG,IAAI,CAAC,YAAY,CAAC;YACtD,IAAI,IAAI,CAAC,QAAQ,IAAI,IAAI,EAAE;gBACvB,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC;gBACtC,IAAI,IAAI,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC;aACpC;YACD,IAAI,IAAI,CAAC,YAAY,IAAI,IAAI,EAAE;gBAC3B,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,wBAAwB,CAAC,CAAC;gBAC1C,IAAI,IAAI,CAAC,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC;aACxC;YACD,IAAI,IAAI,CAAC,UAAU,IAAI,IAAI,EAAE;gBACzB,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,iBAAiB,CAAC,CAAC;gBACnC,IAAI,IAAI,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC;aACtC;YACD,IAAI,IAAI,CAAC,QAAQ,IAAI,IAAI,EAAE;gBACvB,IAAI,GAAG,GAAY,CAAC,IAAI,CAAC,EAAE,CAAC,OAAO,GAAG,KAAK,KAAK,OAAO,CAAC,IAAI,CAAC;gBAC7D,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,GAAG,GAAG,eAAe,GAAG,UAAU,CAAC,CAAC;gBACpD,IAAI,IAAI,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC;aACpC;YACD,IAAI,WAAW,CAAC,WAAW,IAAI,IAAI,CAAC,MAAM,IAAI,IAAI,EAAE;gBAChD,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,+BAA+B,CAAC,CAAC;gBACjD,IAAI,IAAI,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC;aACrC;YACD,IAAI,WAAW,CAAC,WAAW,IAAI,IAAI,CAAC,OAAO,IAAI,IAAI,EAAE;gBACjD,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,iCAAiC,CAAC,CAAC;gBACnD,IAAI,IAAI,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;aACtC;YACD,IAAI,IAAI,CAAC,MAAM,IAAI,IAAI,EAAE;gBACrB,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;aACzG;SACJ;QACD,IAAI,IAAI,CAAC,cAAc,GAAG,CAAC,EAAE;YACzB,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;YAC9B,IAAI,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,cAAc,CAAC;SACvC;QACD,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,aAAa,MAAM,CAAC,EAAE;YAC7C,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,OAAO,GAAG,KAAK,IAAI,OAAO,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,WAAW,CAAC,uBAAuB,MAAM,CAAC,EAAE;gBACvG,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;gBAC7B,IAAI,IAAI,CAAC,CAAC;aACb;SACJ;QACD,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,cAAc,MAAM,CAAC,EAAE;YAC9C,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;YAC9B,IAAI,IAAI,CAAC,CAAC;SACb;QACD,IAAI,WAAW,CAAC,UAAU,IAAI,IAAI,CAAC,SAAS,IAAI,IAAI,EAAE;YAClD,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;YAC7B,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;YAChC,IAAI,IAAI,CAAC,CAAC;SACb;QACD,IAAI,IAAI,CAAC,gBAAgB,IAAI,IAAI,EAAE;YAC/B,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,kBAAkB,CAAC,CAAC;YACpC,IAAI,IAAI,CAAC,GAAG,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC;SAC5C;QACD,IAAI,WAAW,CAAC,WAAW,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,EAAE;YAC9C,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,mBAAmB,CAAC,CAAC;YACrC,IAAI,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC;SAChC;QACD,IAAI,WAAW,CAAC,WAAW,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,EAAE;YAC9C,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,2BAA2B,CAAC,CAAC;YAC7C,IAAI,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC;SACnC;QACD,IAAI,WAAW,CAAC,WAAW,IAAI,IAAI,CAAC,KAAK,IAAI,IAAI,EAAE;YAC/C,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,6BAA6B,CAAC,CAAC;YAC/C,IAAI,IAAI,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC;SACpC;QACD,IAAI,WAAW,CAAC,WAAW,IAAI,IAAI,CAAC,KAAK,IAAI,IAAI,EAAE;YAC/C,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,+BAA+B,CAAC,CAAC;YACjD,IAAI,IAAI,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC;SACpC;QACD,IAAI,WAAW,CAAC,WAAW,IAAI,IAAI,CAAC,MAAM,IAAI,IAAI,EAAE;YAChD,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,iCAAiC,CAAC,CAAC;YACnD,IAAI,IAAI,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC;SACrC;QACD,IAAI,WAAW,CAAC,WAAW,IAAI,IAAI,CAAC,KAAK,IAAI,IAAI,EAAE;YAC/C,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,oCAAoC,CAAC,CAAC;YACtD,IAAI,IAAI,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC;YACtD,KAAK,IAAI,CAAC,GAAW,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,IAAI,IAAI,CAAC,UAAU,EAAE,EAAE,CAAC,EAAE;gBACnE,IAAI,IAAI,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,IAAI,GAAG,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC;aAC/D;SACJ;QACD,IAAI,WAAW,CAAC,WAAW,IAAI,IAAI,CAAC,MAAM,IAAI,IAAI,EAAE;YAChD,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,sCAAsC,CAAC,CAAC;YACxD,IAAI,IAAI,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC;YACvD,KAAK,IAAI,CAAC,GAAW,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,IAAI,IAAI,CAAC,UAAU,EAAE,EAAE,CAAC,EAAE;gBACpE,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,IAAI,GAAG,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC;aACjE;SACJ;QACD,IAAI,IAAI,CAAC,KAAK,IAAI,IAAI,EAAE;YACpB,IAAI,IAAI,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;SACxD;QACD,OAAO,IAAI,CAAC;KACf;;;;;;;;IASD,GAAG,CAAC,GAAe;QACf,IAAI,MAAM,GAAW,WAAW,CAAC,qBAAqB,EAAE,CAAC;QACzD,IAAI,IAAI,GAAW,YAAY,CAAC,eAAe,GAAG,OAAO,CAAC,cAAc,GAAG,WAAW,CAAC,uBAAuB,KAAK,CAAC,IAAI,CAAC,MAAM,GAAG,WAAW,CAAC,uBAAuB,IAAI,MAAM,GAAG,CAAC,EAAE,CAAC;QACtL,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC1E,IAAI,IAAI,CAAC,iBAAiB,KAAK,CAAC,EAAE;YAC9B,GAAG,CAAC,YAAY,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,EAAE,IAAI,CAAC,iBAAiB,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC;YACjF,OAAO;SACV;QACD,IAAI,cAAc,GAAW,CAAC,CAAC;QAC/B,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE;YACtB,EAAE,cAAc,CAAC;SACpB;QACD,IAAI,IAAI,CAAC,cAAc,GAAG,CAAC,EAAE;YACzB,EAAE,cAAc,CAAC;SACpB;QACD,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,aAAa,MAAM,CAAC,EAAE;YAC7C,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,OAAO,GAAG,KAAK,IAAI,OAAO,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,WAAW,CAAC,uBAAuB,MAAM,CAAC,EAAE;gBACvG,EAAE,cAAc,CAAC;aACpB;SACJ;QACD,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,cAAc,MAAM,CAAC,EAAE;YAC9C,EAAE,cAAc,CAAC;SACpB;QACD,IAAI,WAAW,CAAC,UAAU,IAAI,IAAI,CAAC,SAAS,IAAI,IAAI,EAAE;YAClD,EAAE,cAAc,CAAC;SACpB;QACD,IAAI,IAAI,CAAC,gBAAgB,IAAI,IAAI,EAAE;YAC/B,EAAE,cAAc,CAAC;SACpB;QACD,IAAI,WAAW,CAAC,WAAW,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,EAAE;YAC9C,EAAE,cAAc,CAAC;SACpB;QACD,IAAI,WAAW,CAAC,WAAW,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,EAAE;YAC9C,EAAE,cAAc,CAAC;SACpB;QACD,IAAI,WAAW,CAAC,WAAW,IAAI,IAAI,CAAC,KAAK,IAAI,IAAI,EAAE;YAC/C,EAAE,cAAc,CAAC;SACpB;QACD,IAAI,WAAW,CAAC,WAAW,IAAI,IAAI,CAAC,KAAK,IAAI,IAAI,EAAE;YAC/C,EAAE,cAAc,CAAC;SACpB;QACD,IAAI,WAAW,CAAC,WAAW,IAAI,IAAI,CAAC,MAAM,IAAI,IAAI,EAAE;YAChD,EAAE,cAAc,CAAC;SACpB;QACD,IAAI,WAAW,CAAC,WAAW,IAAI,IAAI,CAAC,KAAK,IAAI,IAAI,EAAE;YAC/C,EAAE,cAAc,CAAC;SACpB;QACD,IAAI,WAAW,CAAC,WAAW,IAAI,IAAI,CAAC,MAAM,IAAI,IAAI,EAAE;YAChD,EAAE,cAAc,CAAC;SACpB;QACD,IAAI,IAAI,CAAC,KAAK,IAAI,IAAI,EAAE;YACpB,cAAc,IAAI,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC;SAC3C;QACD,GAAG,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAC;QAC7B,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE;YACtB,IAAI,IAAI,GAAW,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,GAAG,IAAI,CAAC,YAAY,CAAC;YACjE,IAAI,IAAI,CAAC,QAAQ,IAAI,IAAI,EAAE;gBACvB,IAAI,IAAI,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC;aACpC;YACD,IAAI,IAAI,CAAC,YAAY,IAAI,IAAI,EAAE;gBAC3B,IAAI,IAAI,CAAC,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC;aACxC;YACD,IAAI,IAAI,CAAC,UAAU,IAAI,IAAI,EAAE;gBACzB,IAAI,IAAI,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC;aACtC;YACD,IAAI,IAAI,CAAC,QAAQ,IAAI,IAAI,EAAE;gBACvB,IAAI,IAAI,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC;aACpC;YACD,IAAI,WAAW,CAAC,WAAW,IAAI,IAAI,CAAC,MAAM,IAAI,IAAI,EAAE;gBAChD,IAAI,IAAI,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC;aACrC;YACD,IAAI,WAAW,CAAC,WAAW,IAAI,IAAI,CAAC,OAAO,IAAI,IAAI,EAAE;gBACjD,IAAI,IAAI,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;aACtC;YACD,IAAI,IAAI,CAAC,MAAM,IAAI,IAAI,EAAE;gBACrB,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;aACzG;YACD,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;YACnD,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;YACrD,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YAC/E,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;YAChC,IAAI,IAAI,CAAC,YAAY,GAAG,CAAC,EAAE;gBACvB,IAAI,CAAC,GAAmB,IAAI,CAAC,YAAY,CAAC;gBAC1C,QAAQ,CAAC,IAAI,IAAI,GAAG;oBAChB,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC,KAAM,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,GAAI,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,OAAQ,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;oBACzG,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;iBACd;aACJ;YACD,cAAc,GAAG,CAAC,CAAC;YACnB,IAAI,IAAI,CAAC,QAAQ,IAAI,IAAI,EAAE;gBACvB,EAAE,cAAc,CAAC;aACpB;YACD,IAAI,IAAI,CAAC,YAAY,IAAI,IAAI,EAAE;gBAC3B,EAAE,cAAc,CAAC;aACpB;YACD,IAAI,IAAI,CAAC,UAAU,IAAI,IAAI,EAAE;gBACzB,EAAE,cAAc,CAAC;aACpB;YACD,IAAI,IAAI,CAAC,QAAQ,IAAI,IAAI,EAAE;gBACvB,EAAE,cAAc,CAAC;aACpB;YACD,IAAI,WAAW,CAAC,WAAW,IAAI,IAAI,CAAC,MAAM,IAAI,IAAI,EAAE;gBAChD,EAAE,cAAc,CAAC;aACpB;YACD,IAAI,WAAW,CAAC,WAAW,IAAI,IAAI,CAAC,OAAO,IAAI,IAAI,EAAE;gBACjD,EAAE,cAAc,CAAC;aACpB;YACD,IAAI,IAAI,CAAC,MAAM,IAAI,IAAI,EAAE;gBACrB,cAAc,IAAI,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC;aAC5C;YACD,GAAG,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAC;YAC7B,IAAI,IAAI,CAAC,QAAQ,IAAI,IAAI,EAAE;gBACvB,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC,CAAC;gBACpD,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;gBAClE,GAAG,CAAC,YAAY,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;aACjE;YACD,IAAI,IAAI,CAAC,YAAY,IAAI,IAAI,EAAE;gBAC3B,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,wBAAwB,CAAC,CAAC,CAAC;gBACxD,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;gBAC1E,GAAG,CAAC,YAAY,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC,EAAE,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;aACzE;YACD,IAAI,IAAI,CAAC,UAAU,IAAI,IAAI,EAAE;gBACzB,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,iBAAiB,CAAC,CAAC,CAAC;gBACjD,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;gBACtE,GAAG,CAAC,YAAY,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC,EAAE,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;aACrE;YACD,IAAI,IAAI,CAAC,QAAQ,IAAI,IAAI,EAAE;gBACvB,IAAI,GAAG,GAAY,CAAC,IAAI,CAAC,EAAE,CAAC,OAAO,GAAG,KAAK,KAAK,OAAO,CAAC,IAAI,CAAC;gBAC7D,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,GAAG,GAAG,eAAe,GAAG,UAAU,CAAC,CAAC,CAAC;gBAClE,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;gBAC/D,GAAG,CAAC,YAAY,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;aACjE;YACD,IAAI,WAAW,CAAC,WAAW,IAAI,IAAI,CAAC,MAAM,IAAI,IAAI,EAAE;gBAChD,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,+BAA+B,CAAC,CAAC,CAAC;gBAC/D,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;aACxB;YACD,IAAI,WAAW,CAAC,WAAW,IAAI,IAAI,CAAC,OAAO,IAAI,IAAI,EAAE;gBACjD,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,iCAAiC,CAAC,CAAC,CAAC;gBACjE,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;aACzB;YACD,IAAI,IAAI,CAAC,MAAM,IAAI,IAAI,EAAE;gBACrB,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC;aAClG;SACJ;QACD,IAAI,IAAI,CAAC,cAAc,GAAG,CAAC,EAAE;YACzB,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;YACxB,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC,cAAc,GAAG,CAAC,CAAC,CAAC;YAChF,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;YAClC,KAAK,IAAI,CAAC,GAAW,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,cAAc,EAAE,EAAE,CAAC,EAAE;gBAClD,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;aACpC;SACJ;QACD,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,aAAa,MAAM,CAAC,EAAE;YAC7C,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,OAAO,GAAG,KAAK,IAAI,OAAO,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,WAAW,CAAC,uBAAuB,MAAM,CAAC,EAAE;gBACvG,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;aACxD;SACJ;QACD,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,cAAc,MAAM,CAAC,EAAE;YAC9C,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;SACzD;QACD,IAAI,WAAW,CAAC,UAAU,IAAI,IAAI,CAAC,SAAS,IAAI,IAAI,EAAE;YAClD,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;SAClG;QACD,IAAI,IAAI,CAAC,gBAAgB,IAAI,IAAI,EAAE;YAC/B,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,kBAAkB,CAAC,CAAC,CAAC;YAClD,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC;YACjF,GAAG,CAAC,YAAY,CAAC,IAAI,CAAC,gBAAgB,CAAC,IAAI,EAAE,CAAC,EAAE,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC;SACjF;QACD,IAAI,WAAW,CAAC,WAAW,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,EAAE;YAC9C,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,mBAAmB,CAAC,CAAC,CAAC;YACnD,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YAC7B,GAAG,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;SACzD;QACD,IAAI,WAAW,CAAC,WAAW,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,EAAE;YAC9C,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,2BAA2B,CAAC,CAAC,CAAC;YAC3D,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;SACtB;QACD,IAAI,WAAW,CAAC,WAAW,IAAI,IAAI,CAAC,KAAK,IAAI,IAAI,EAAE;YAC/C,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,6BAA6B,CAAC,CAAC,CAAC;YAC7D,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;SACvB;QACD,IAAI,WAAW,CAAC,WAAW,IAAI,IAAI,CAAC,KAAK,IAAI,IAAI,EAAE;YAC/C,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,+BAA+B,CAAC,CAAC,CAAC;YAC/D,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;SACvB;QACD,IAAI,WAAW,CAAC,WAAW,IAAI,IAAI,CAAC,MAAM,IAAI,IAAI,EAAE;YAChD,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,iCAAiC,CAAC,CAAC,CAAC;YACjE,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;SACxB;QACD,IAAI,WAAW,CAAC,WAAW,IAAI,IAAI,CAAC,KAAK,IAAI,IAAI,EAAE;YAC/C,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,oCAAoC,CAAC,CAAC,CAAC;YACpE,gBAAgB,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,UAAU,EAAE,GAAG,CAAC,CAAC;SAC1D;QACD,IAAI,WAAW,CAAC,WAAW,IAAI,IAAI,CAAC,MAAM,IAAI,IAAI,EAAE;YAChD,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,sCAAsC,CAAC,CAAC,CAAC;YACtE,gBAAgB,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,UAAU,EAAE,GAAG,CAAC,CAAC;SAC3D;QACD,IAAI,IAAI,CAAC,KAAK,IAAI,IAAI,EAAE;YACpB,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;SACjD;KACJ;;AApgED;;;AAGO,4BAAe,GAAW,MAAM,CAAC;AAExC;;;;AAIO,uBAAU,GAAW,CAAC,CAAC;AAE9B;;;;AAIO,2CAA8B,GAAW,EAAE,CAAC;AAEnD;;;AAGO,qBAAQ,GAAW,GAAG,CAAC;AAE9B;;;;AAIO,oDAAuC,GAAW,GAAG,CAAC;AAE7D;;;;;AAKO,uBAAU,GAAW,GAAG,CAAC;AAEhC;;;;AAIO,gCAAmB,GAAW,GAAG,CAAC;AAEzC;;;;;AAKO,yBAAY,GAAW,GAAG,CAAC;AAElC;;;AAGO,uBAAU,GAAW,GAAG,CAAC;AAEhC;;;;;;;AAOO,mBAAM,GAAW,CAAC,CAAC;AAE1B;;;;;;;;;;AAUO,4BAAe,GAAW,CAAC,CAAC;AAEnC;;;;;;AAMO,iBAAI,GAAW,CAAC,CAAC;AAExB;;;;;AAKO,oBAAO,GAAW,CAAC,CAAC;AAg7D/B,MAAM,OAAO;IAkFT;;;;QA9EA,UAAK,GAAiB,IAAI,CAAC;;;;QAK3B,QAAG,GAAiB,IAAI,CAAC;;;;QAKzB,YAAO,GAAiB,IAAI,CAAC;;;;;QAM7B,SAAI,GAAW,EAAE,CAAC;;;;QAWlB,SAAI,GAAmB,IAAI,CAAC;QAoDxB,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC;KACjB;;;;;;;;;;;;;IAvCD,OAAO,MAAM,CAAC,CAAiB,EAAE,KAAY,EAAE,GAAU;QACrD,IAAI,CAAC,IAAI,IAAI,EAAE;YACX,OAAO,IAAI,CAAC;SACf;aAAM;YACH,CAAC,CAAC,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,EAAE,KAAK,EAAE,GAAG,CAAC,CAAC;SAC/C;QACD,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,CAAA;QACf,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,CAAA;QACb,IAAI,MAAM,GAAW,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC;QACtC,IAAI,IAAI,GAAW,CAAC,CAAC,GAAG,CAAC,QAAQ,CAAC;QAClC,IAAI,CAAC,GAAW,KAAK,CAAC,QAAQ,CAAC;;QAE/B,IAAI,CAAC,GAAW,GAAG,IAAI,IAAI,GAAG,MAAM,CAAC,SAAS,GAAG,GAAG,CAAC,QAAQ,CAAC;QAC9D,IAAI,CAAC,GAAG,IAAI,IAAI,CAAC,GAAG,MAAM,EAAE;YACxB,IAAI,CAAC,IAAI,MAAM,EAAE;gBACb,IAAI,CAAC,IAAI,IAAI,EAAE;oBACX,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;iBACd;qBAAM;oBACH,CAAC,CAAC,KAAK,GAAG,GAAG,CAAC;iBACjB;aACJ;iBAAM,IAAI,CAAC,IAAI,IAAI,EAAE;gBAClB,CAAC,CAAC,GAAG,GAAG,KAAK,CAAC;aACjB;iBAAM;gBACH,IAAI,CAAC,GAAY,IAAI,OAAO,EAAE,CAAC;gBAC/B,CAAC,CAAC,KAAK,GAAG,GAAG,CAAC;gBACd,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,CAAC;gBACd,CAAC,CAAC,OAAO,GAAG,CAAC,CAAC,OAAO,CAAC;gBACtB,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC,IAAI,CAAC;gBAChB,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC,IAAI,CAAC;gBAChB,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC,IAAI,CAAC;gBAChB,CAAC,CAAC,GAAG,GAAG,KAAK,CAAC;gBACd,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC;aACd;SACJ;QACD,OAAO,CAAC,CAAC;KACZ;;;AChpEL;MAuDa,WAAY,SAAQ,YAAY;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAugBzC,YAAmB,WAAiB,EAAE,KAAW;QAC7C,IAAI,CAAC,CAAC,WAAW,IAAI,IAAI,IAAI,WAAW,YAAY,WAAW,KAAK,WAAW,KAAK,IAAI,MAAM,CAAC,OAAO,KAAK,KAAK,QAAQ,KAAK,KAAK,KAAK,IAAI,CAAC,EAAE;YAC1I,IAAI,MAAM,GAAG,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;YACnD;gBACI,MAAM,IAAI,KAAK,CAAC,eAAe,CAAC,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;aA+BnC;;;;;SAKJ;aAAM,IAAI,CAAC,CAAC,OAAO,WAAW,KAAK,QAAQ,KAAK,WAAW,KAAK,IAAI,KAAK,KAAK,KAAK,SAAS,EAAE;YAC3F,IAAI,MAAM,GAAG,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;YACnD,IAAI,KAAK,GAAQ,MAAM,CAAC,CAAC,CAAC,CAAC;YAC3B,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YACpB,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC;YACjB,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC;YACf,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC;YACnB,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC;YACnB,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;YAChB,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC;YACd,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC;YACnB,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC;YACnB,IAAI,CAAC,cAAc,GAAG,CAAC,CAAC;YACxB,IAAI,CAAC,UAAU,GAAG,CAAC,CAAC;YACpB,IAAI,CAAC,oBAAoB,GAAG,CAAC,CAAC;YAC9B,IAAI,CAAC,eAAe,GAAG,CAAC,CAAC;YACzB,IAAI,CAAC,iBAAiB,GAAG,CAAC,CAAC;YAC3B,IAAI,CAAC,qBAAqB,GAAG,CAAC,CAAC;YAC/B,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC;YACjB,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;YACzB,CAAC;gBACG,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC;gBACf,IAAI,CAAC,IAAI,GAAG,IAAI,UAAU,EAAE,CAAC;gBAC7B,IAAI,CAAC,KAAK,GAAG,IAAI,KAAK,CAAC,GAAG,CAAC,CAAC;gBAC5B,IAAI,CAAC,SAAS,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,IAAI,CAAC,CAAC,CAAC;;;;;gBAKlD,IAAI,CAAC,OAAO,GAAG,CAAC,KAAK,GAAG,WAAW,CAAC,cAAc,MAAM,CAAC,GAAG,YAAY,CAAC,MAAM,IAAI,CAAC,KAAK,GAAG,WAAW,CAAC,YAAY,MAAM,CAAC,GAAG,YAAY,CAAC,IAAI,GAAG,YAAY,CAAC,OAAO,CAAC,CAAC;aAC3K,GAAG,CAAC;SACR;aAAM;YAAE,MAAM,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAC;SAAE;KAClD;IA7kBD,OAAO,mBAAmB,KAAK,IAAI,CAAC,WAAW,CAAC,oBAAoB,EAAE;QAAE,WAAW,CAAC,oBAAoB,GAAG,IAAI,CAAC;QAAC,WAAW,CAAC,sBAAsB,EAAE,CAAC;KAAE,EAAE;IAoClH,OAAO,qBAAqB,KAAa,WAAW,CAAC,mBAAmB,EAAE,CAAC,CAAC,IAAI,WAAW,CAAC,gBAAgB,IAAI,IAAI,EAAE;QAAE,WAAW,CAAC,gBAAgB,IAAI,WAAW,CAAC,uBAAuB,GAAG,OAAO,CAAC,aAAa,GAAG,CAAC,CAAC,CAAC;KAAE,CAAC,OAAO,WAAW,CAAC,gBAAgB,CAAC,EAAE;;IA+G5Q,OAAO,SAAS,KAAe,WAAW,CAAC,mBAAmB,EAAE,CAAC,CAAC,OAAO,WAAW,CAAC,IAAI,CAAC,EAAE;;IAwU1H,OAAO,sBAAsB;QACzB,IAAI,CAAS,CAAC;QACd,IAAI,CAAC,GAAa,IAAI,KAAK,CAAC,GAAG,CAAC,CAAC;QACjC,IAAI,CAAC,GAAW,8NAA8N,CAAC;QAC/O,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;YAC3B,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;SACpE;QACD,WAAW,CAAC,IAAI,GAAG,CAAC,CAAC;KACxB;IA4GM,KAAK,CAAC,OAAe,EAAE,MAAc,EAAE,IAAY,EAAE,SAAiB,EAAE,SAAiB,EAAE,UAAoB;QAClH,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;QAChC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;QACrB,IAAI,WAAW,CAAC,UAAU,IAAI,SAAS,IAAI,IAAI,EAAE;YAC7C,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;SAC5C;QACD,IAAI,CAAC,SAAS,GAAG,SAAS,IAAI,IAAI,GAAG,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;QAClE,IAAI,UAAU,IAAI,IAAI,IAAI,UAAU,CAAC,MAAM,GAAG,CAAC,EAAE;YAC7C,IAAI,CAAC,cAAc,GAAG,UAAU,CAAC,MAAM,CAAC;YACxC,IAAI,CAAC,UAAU,GAAG,IAAI,KAAK,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;YACjD,KAAK,IAAI,CAAC,GAAW,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,cAAc,EAAE,EAAE,CAAC,EAAE;gBAClD,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;aACrD;SACJ;KACJ;IAEM,WAAW,CAAC,IAAY,EAAE,KAAa;QAC1C,MAAM,IAAI,KAAK,CAAC,eAAe,CAAC,CAAA;;;;;;;KAOnC;IAEM,eAAe,CAAC,KAAa,EAAE,IAAY,EAAE,IAAY;QAC5D,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QACjD,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;YAC9B,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;SACvD;KACJ;IAEM,eAAe,CAAC,IAAY,EAAE,OAAgB;QACjD,IAAI,CAAC,WAAW,CAAC,WAAW,EAAE;YAC1B,OAAO,IAAI,CAAC;SACf;QACD,IAAI,EAAE,GAAe,IAAI,UAAU,EAAE,CAAC;QACtC,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;QAC5C,IAAI,EAAE,GAAqB,IAAI,gBAAgB,CAAC,IAAI,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC;QACvE,IAAI,OAAO,EAAE;YACT,EAAE,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;YACpB,IAAI,CAAC,IAAI,GAAG,EAAE,CAAC;SAClB;aAAM;YACH,EAAE,CAAC,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC;YACrB,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC;SACnB;QACD,OAAO,EAAE,CAAC;KACb;IAEM,mBAAmB,CAAC,OAAe,EAAE,QAAkB,EAAE,IAAY,EAAE,OAAgB;QAC1F,IAAI,CAAC,WAAW,CAAC,WAAW,EAAE;YAC1B,OAAO,IAAI,CAAC;SACf;QACD,IAAI,EAAE,GAAe,IAAI,UAAU,EAAE,CAAC;QACtC,gBAAgB,CAAC,SAAS,CAAC,OAAO,EAAE,QAAQ,EAAE,EAAE,CAAC,CAAC;QAClD,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;QAC5C,IAAI,EAAE,GAAqB,IAAI,gBAAgB,CAAC,IAAI,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QACnF,IAAI,OAAO,EAAE;YACT,EAAE,CAAC,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC;YACrB,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC;SACnB;aAAM;YACH,EAAE,CAAC,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC;YACtB,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;SACpB;QACD,OAAO,EAAE,CAAC;KACb;IAEM,cAAc,CAAC,IAAe;QACjC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC;QACvB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;KACrB;IAEM,eAAe,CAAC,IAAY,EAAE,SAAiB,EAAE,SAAiB,EAAE,MAAc;QACrF,IAAI,IAAI,CAAC,YAAY,IAAI,IAAI,EAAE;YAC3B,IAAI,CAAC,YAAY,GAAG,IAAI,UAAU,EAAE,CAAC;SACxC;QACD,IAAI,QAAQ,GAAS,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;QAC7C,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC,EAAE;YACvB,EAAE,IAAI,CAAC,iBAAiB,CAAC;YACzB,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;YAC3C,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,SAAS,IAAI,IAAI,GAAG,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC;YAC7E,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,SAAS,IAAI,IAAI,GAAG,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC;YAC5E,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;YACnC,QAAQ,CAAC,MAAM,GAAG,IAAI,CAAC,iBAAiB,CAAC;SAE5C;KACJ;IAEM,UAAU,CAAC,MAAc,EAAE,IAAY,EAAE,IAAY,EAAE,SAAiB,EAAE,KAAU;QACvF,OAAO,IAAI,WAAW,CAAC,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,SAAS,EAAE,KAAK,CAAC,CAAC;KACtE;IAEM,WAAW,CAAC,MAAc,EAAE,IAAY,EAAE,IAAY,EAAE,SAAiB,EAAE,UAAoB;QAClG,OAAO,IAAI,YAAY,CAAC,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,SAAS,EAAE,UAAU,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;KAC1F;IAEM,QAAQ;KACd;;;;;;IAOM,WAAW;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;QAiLd,MAAM,IAAI,KAAK,CAAC,eAAe,CAAC,CAAA;KACnC;;;;;;;;;;;;IAaD,YAAY,CAAC,GAAQ;QACjB,MAAM,IAAI,KAAK,CAAC,aAAa,CAAC,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KA2ClC;;;;;;;;;;;;;;IAeM,QAAQ,CAAC,GAAQ;QACpB,OAAO,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC;KACvC;;;;;;;;;;;IAYM,OAAO,CAAC,KAAa;QACxB,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,WAAW,CAAC,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;QAClD,IAAI,MAAM,GAAS,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACtC,IAAI,MAAM,IAAI,IAAI,EAAE;YAChB,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;YACnD,MAAM,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;YAC1C,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;SACpB;QACD,OAAO,MAAM,CAAC,KAAK,CAAC;KACvB;;;;;;;;;;;IAYD,YAAY,CAAC,KAAa;QACtB,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC,KAAK,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;QACpD,IAAI,MAAM,GAAS,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACvC,IAAI,MAAM,IAAI,IAAI,EAAE;YAChB,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC;YACxD,MAAM,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;YAC3C,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;SACpB;QACD,OAAO,MAAM,CAAC;KACjB;;;;;;;;;;;IAYM,QAAQ,CAAC,KAAa;QACzB,OAAO,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC;KACzC;;;;;;;;;;;IAYD,iBAAiB,CAAC,UAAkB;QAChC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC,KAAK,EAAE,UAAU,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;QACzD,IAAI,MAAM,GAAS,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACvC,IAAI,MAAM,IAAI,IAAI,EAAE;YAChB,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC;YAC7D,MAAM,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;YAC3C,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;SACpB;QACD,OAAO,MAAM,CAAC;KACjB;;;;;;;;;;;;IAaM,aAAa,CAAC,UAAkB;QACnC,OAAO,IAAI,CAAC,iBAAiB,CAAC,UAAU,CAAC,CAAC,KAAK,CAAC;KACnD;;;;;;;;;;;;;;;;;;;;;;;;;IA0BD,aAAa,CAAC,GAAW,EAAE,KAAa,EAAE,IAAY,EAAE,IAAY,EAAE,GAAY;QAC9E,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC,WAAW,GAAG,GAAG,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;QAChE,IAAI,MAAM,GAAS,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACvC,IAAI,MAAM,IAAI,IAAI,EAAE;YAChB,IAAI,GAAG,IAAI,OAAO,CAAC,WAAW,EAAE;gBAC5B,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,MAAM,EAAE,GAAG,EAAE,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;aAC1E;iBAAM;gBACH,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,MAAM,EAAE,GAAG,EAAE,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,CAAC,CAAC,CAAC;aAChF;YACD,MAAM,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;YAC3C,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;SACpB;QACD,OAAO,MAAM,CAAC;KACjB;;;;;;;;;;;;;;;;;;;;;;;;;;;IA4BM,gEAAgE,CAAC,GAAW,EAAE,KAAa,EAAE,IAAY,EAAE,IAAY;QAC1H,OAAO,IAAI,CAAC,SAAS,CAAC,GAAG,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,KAAK,OAAO,CAAC,iBAAiB,CAAC,CAAC;KACpF;;;;;;;;;;;;;;;;;;;;;;;;;;IA2BM,SAAS,CAAC,GAAS,EAAE,KAAW,EAAE,IAAU,EAAE,IAAU,EAAE,GAAS;QACtE,IAAI,CAAC,CAAC,OAAO,GAAG,KAAK,QAAQ,KAAK,GAAG,KAAK,IAAI,MAAM,CAAC,OAAO,KAAK,KAAK,QAAQ,KAAK,KAAK,KAAK,IAAI,CAAC,KAAK,CAAC,OAAO,IAAI,KAAK,QAAQ,KAAK,IAAI,KAAK,IAAI,CAAC,KAAK,CAAC,OAAO,IAAI,KAAK,QAAQ,KAAK,IAAI,KAAK,IAAI,CAAC,KAAK,CAAC,OAAO,GAAG,KAAK,SAAS,KAAK,GAAG,KAAK,IAAI,CAAC,EAAE;YAClP,IAAI,MAAM,GAAG,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;YACnD,OAAY,CAAC;gBACT,OAAO,IAAI,CAAC,aAAa,CAAC,GAAG,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,CAAC,CAAC,KAAK,CAAC;aAChE,GAAG,CAAC;SACR;aAAM,IAAI,CAAC,CAAC,OAAO,GAAG,KAAK,QAAQ,KAAK,GAAG,KAAK,IAAI,MAAM,CAAC,OAAO,KAAK,KAAK,QAAQ,KAAK,KAAK,KAAK,IAAI,CAAC,KAAK,CAAC,OAAO,IAAI,KAAK,QAAQ,KAAK,IAAI,KAAK,IAAI,CAAC,KAAK,CAAC,OAAO,IAAI,KAAK,QAAQ,KAAK,IAAI,KAAK,IAAI,CAAC,IAAI,GAAG,KAAK,SAAS,EAAE;YAC9N,OAAY,IAAI,CAAC,gEAAgE,CAAC,GAAG,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;SAC7G;aAAM;YAAE,MAAM,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAC;SAAE;KAClD;;;;;;;;;;;;;;;;;;IAmBD,oBAAoB,CAAC,IAAY,EAAE,IAAY,EAAE,GAAW,EAAE,GAAG,OAAc;QAC3E,IAAI,gBAAgB,GAAe,IAAI,CAAC,gBAAgB,CAAC;QACzD,IAAI,gBAAgB,IAAI,IAAI,EAAE;YAC1B,gBAAgB,GAAG,IAAI,CAAC,gBAAgB,GAAG,IAAI,UAAU,EAAE,CAAC;SAC/D;QACD,IAAI,QAAQ,GAAW,gBAAgB,CAAC,MAAM,CAAC;QAC/C,IAAI,QAAQ,GAAW,GAAG,CAAC,QAAQ,EAAE,CAAC;QACtC,gBAAgB,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,KAAK,EAAE,GAAG,CAAC,IAAI,EAAE,GAAG,CAAC,UAAU,EAAE,GAAG,CAAC,WAAW,CAAC,CAAC,CAAC;QACzG,IAAI,UAAU,GAAW,OAAO,CAAC,MAAM,CAAC;QACxC,gBAAgB,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;QACtC,KAAK,IAAI,CAAC,GAAW,CAAC,EAAE,CAAC,GAAG,UAAU,EAAE,CAAC,EAAE,EAAE;YACzC,IAAI,MAAM,GAAQ,OAAO,CAAC,CAAC,CAAC,CAAC;YAC7B,QAAQ,KAAK,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC;YAChC,gBAAgB,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC;SACpD;QACD,IAAI,IAAI,GAAe,gBAAgB,CAAC,IAAI,CAAC;QAC7C,IAAI,MAAM,GAAW,CAAC,CAAC,GAAG,CAAC,GAAG,UAAU,KAAK,CAAC,CAAC;QAC/C,QAAQ,IAAI,UAAU,CAAC;QACvB,IAAI,MAAM,GAAS,IAAI,CAAC,KAAK,CAAC,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;QAC5D,IAAI,EAAE,QAAQ,MAAM,IAAI,IAAI,GAAG;YAC3B,IAAI,MAAM,CAAC,IAAI,KAAK,WAAW,CAAC,GAAG,IAAI,MAAM,CAAC,UAAU,KAAK,QAAQ,EAAE;gBACnE,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC;gBACrB,SAAS;aACZ;YACD,IAAI,cAAc,GAAW,MAAM,CAAC,MAAM,CAAC;YAC3C,KAAK,IAAI,CAAC,GAAW,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,EAAE,EAAE;gBACrC,IAAI,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC,KAAK,IAAI,CAAC,cAAc,GAAG,CAAC,CAAC,EAAE;oBACjD,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC;oBACrB,SAAS,IAAI,CAAC;iBACjB;aACJ;YACD,MAAM;SACT;QACD,IAAI,oBAA4B,CAAC;QACjC,IAAI,MAAM,IAAI,IAAI,EAAE;YAChB,oBAAoB,GAAG,MAAM,CAAC,KAAK,CAAC;YACpC,gBAAgB,CAAC,MAAM,GAAG,QAAQ,CAAC;SACtC;aAAM;YACH,oBAAoB,GAAG,IAAI,CAAC,qBAAqB,EAAE,CAAC;YACpD,MAAM,GAAG,IAAI,IAAI,CAAC,oBAAoB,CAAC,CAAC;YACxC,MAAM,CAAC,UAAU,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;YACtC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;SACpB;QACD,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,IAAI,EAAE,oBAAoB,CAAC,CAAC;QAC3D,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC7B,IAAI,MAAM,IAAI,IAAI,EAAE;YAChB,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,IAAI,EAAE,oBAAoB,EAAE,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;YAClF,MAAM,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;YAC3C,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;SACpB;QACD,OAAO,MAAM,CAAC;KACjB;;;;;;;;;;;;;;;;;;;IAoBM,gBAAgB,CAAC,IAAY,EAAE,IAAY,EAAE,GAAW,EAAE,GAAG,OAAc;QAC9E,OAAO,IAAI,CAAC,oBAAoB,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,IAAI,EAAE,GAAG,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC;KACzF;;;;;;;;;;;;;IAcD,YAAY,CAAC,KAAa,EAAE,IAAY,EAAE,IAAY;QAClD,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC,KAAK,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;QACpD,IAAI,MAAM,GAAS,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACvC,IAAI,MAAM,IAAI,IAAI,EAAE;YAChB,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,KAAK,EAAE,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;YACnF,MAAM,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;YAC3C,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;SACpB;QACD,OAAO,MAAM,CAAC;KACjB;;;;;;;;;;;;;;;IAgBM,QAAQ,CAAC,KAAa,EAAE,IAAY,EAAE,IAAY;QACrD,OAAO,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC,KAAK,CAAC;KACrD;;;;;;;;;;;;;;;IAgBD,aAAa,CAAC,KAAa,EAAE,IAAY,EAAE,IAAY,EAAE,GAAY;QACjE,IAAI,IAAI,GAAW,GAAG,GAAG,WAAW,CAAC,KAAK,GAAG,WAAW,CAAC,IAAI,CAAC;QAC9D,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;QACvC,IAAI,MAAM,GAAS,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACvC,IAAI,MAAM,IAAI,IAAI,EAAE;YAChB,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;YACtE,MAAM,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;YAC3C,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;SACpB;QACD,OAAO,MAAM,CAAC;KACjB;;;;;;;;;;;;;;;;;IAkBM,SAAS,CAAC,KAAa,EAAE,IAAY,EAAE,IAAY,EAAE,GAAY;QACpE,OAAO,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,CAAC,CAAC,KAAK,CAAC;KAC3D;;;;;;;;;IAUD,UAAU,CAAC,KAAa;QACpB,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QACxB,IAAI,MAAM,GAAS,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACtC,IAAI,MAAM,IAAI,IAAI,EAAE;YAChB,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YACjD,MAAM,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;YAC1C,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;SACpB;QACD,OAAO,MAAM,CAAC;KACjB;;;;;;;;;IAUD,QAAQ,CAAC,KAAa;QAClB,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;QAC1B,IAAI,MAAM,GAAS,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACtC,IAAI,MAAM,IAAI,IAAI,EAAE;YAChB,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;YAC7D,MAAM,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;YAC1C,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;SACpB;QACD,OAAO,MAAM,CAAC;KACjB;;;;;;;;;IAUD,OAAO,CAAC,KAAW;QACf,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QACzB,IAAI,MAAM,GAAS,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACtC,IAAI,MAAM,IAAI,IAAI,EAAE;YAChB,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;YACnD,MAAM,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;YACxC,IAAI,CAAC,KAAK,IAAI,CAAC,CAAC;YAChB,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;SACpB;QACD,OAAO,MAAM,CAAC;KACjB;;;;;;;;;IAUD,SAAS,CAAC,KAAa;QACnB,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;QAC3B,IAAI,MAAM,GAAS,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACtC,IAAI,MAAM,IAAI,IAAI,EAAE;YAChB,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;YAChE,MAAM,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;YACxC,IAAI,CAAC,KAAK,IAAI,CAAC,CAAC;YAChB,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;SACpB;QACD,OAAO,MAAM,CAAC;KACjB;;;;;;;;;IAUO,SAAS,CAAC,KAAa;QAC3B,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC,GAAG,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;QAClD,IAAI,MAAM,GAAS,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACvC,IAAI,MAAM,IAAI,IAAI,EAAE;YAChB,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,GAAG,EAAE,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC;YACtD,MAAM,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;YAC3C,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;SACpB;QACD,OAAO,MAAM,CAAC;KACjB;;;;;;;;;;;;;IAcM,WAAW,CAAC,IAAY,EAAE,IAAY;QACzC,OAAO,IAAI,CAAC,eAAe,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,KAAK,CAAC;KACjD;;;;;;;;;;;IAYD,eAAe,CAAC,IAAY,EAAE,IAAY;QACtC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC,SAAS,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;QACvD,IAAI,MAAM,GAAS,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACvC,IAAI,MAAM,IAAI,IAAI,EAAE;YAChB,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,SAAS,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;YAC3E,MAAM,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;YAC3C,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;SACpB;QACD,OAAO,MAAM,CAAC;KACjB;;;;;;;;;IAUM,OAAO,CAAC,IAAU;QACrB,KAAK,CAAC,OAAO,IAAI,KAAK,QAAQ,KAAK,IAAI,KAAK,IAAI,GAAG;YAC/C,IAAI,MAAM,GAAG,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;YACnD,OAAY,CAAC;gBACT,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,WAAW,CAAC,WAAW,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;gBACxD,IAAI,MAAM,GAAS,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;gBACtC,IAAI,MAAM,IAAI,IAAI,EAAE;oBAChB,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;iBACnC;gBACD,OAAO,MAAM,CAAC,KAAK,CAAC;aACvB,GAAG,CAAC;SACR;aAAM,KAAK,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,YAAY,IAAI,KAAK,IAAI,KAAK,IAAI,GAAG;YAClE,OAAY,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;SACvC;aAAM;YAAE,MAAM,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAC;SAAE;KAClD;;;;;;;;;;;;;IAcD,oBAAoB,CAAC,IAAY,EAAE,MAAc;QAC7C,IAAI,CAAC,GAAG,CAAC,IAAI,GAAG,WAAW,CAAC,WAAW,CAAC;QACxC,IAAI,CAAC,GAAG,CAAC,MAAM,GAAG,MAAM,CAAC;QACzB,IAAI,CAAC,GAAG,CAAC,OAAO,GAAG,IAAI,CAAC;QACxB,IAAI,CAAC,GAAG,CAAC,UAAU,GAAG,UAAU,IAAI,WAAW,CAAC,WAAW,GAAS,IAAI,CAAC,QAAQ,EAAG,GAAG,MAAM,CAAC,CAAC;QAC/F,IAAI,MAAM,GAAS,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACtC,IAAI,MAAM,IAAI,IAAI,EAAE;YAChB,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;SACnC;QACD,OAAO,MAAM,CAAC,KAAK,CAAC;KACvB;;;;;;;;;IAUO,YAAY,CAAC,IAAU;QAC3B,MAAM,IAAI,KAAK,CAAC,eAAe,CAAC,CAAA;;;;;;;;;;;;;;KAcnC;;;;;;;;;;;;;IAcD,aAAa,CAAC,KAAa,EAAE,KAAa;QACtC,MAAM,IAAI,KAAK,CAAC,eAAe,CAAC,CAAA;;;;;;;;;;;;;KAanC;;;;;;;;;;;;;;;;;IAkBD,mBAAmB,CAAC,KAAa,EAAE,KAAa;QAC5C,OAAO,kBAAkB,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;KAyB7B;;;;;;;;;;IAWO,GAAG,CAAC,GAAS;QACjB,IAAI,CAAC,GAAS,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;QAC7D,QAAQ,CAAC,IAAI,IAAI,KAAK,CAAC,CAAC,IAAI,KAAK,GAAG,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,GAAG;YAC9D,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;SACd;QACD,OAAO,CAAC,CAAC;KACZ;;;;;;;;IASO,GAAG,CAAC,CAAO;QACf,IAAI,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,EAAE;YAC9C,IAAI,EAAE,GAAW,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC;YACnC,IAAI,EAAE,GAAW,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC;YAC5B,IAAI,QAAQ,GAAW,IAAI,KAAK,CAAC,EAAE,CAAC,CAAC;YACrC,KAAK,IAAI,CAAC,GAAW,EAAE,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,EAAE;gBACtC,IAAI,CAAC,GAAS,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gBAC5B,QAAQ,CAAC,IAAI,IAAI,GAAG;oBAChB,IAAI,KAAK,GAAW,CAAC,CAAC,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC;oBACnD,IAAI,CAAC,GAAS,CAAC,CAAC,IAAI,CAAC;oBACrB,CAAC,CAAC,IAAI,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC;oBACzB,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;oBACpB,CAAC,GAAG,CAAC,CAAC;iBACT;aACJ;YACD,IAAI,CAAC,KAAK,GAAG,QAAQ,CAAC;YACtB,IAAI,CAAC,SAAS,IAAI,CAAC,EAAE,GAAG,IAAI,IAAI,CAAC,CAAC,CAAC;SACtC;QACD,IAAI,KAAK,GAAW,CAAC,CAAC,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC;QACrD,CAAC,CAAC,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QAC3B,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;KACzB;;;;;;;;;;;IAYO,MAAM,CAAC,CAAS,EAAE,EAAU,EAAE,EAAU;QAC5C,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;KACvC;;;;;;;;;;;IAYO,MAAM,CAAC,EAAU,EAAE,EAAU,EAAE,CAAS;QAC5C,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;KACvC;;AAjpDM,gCAAoB,GAAY,KAAK,CAAC;AAG7C;;;;;;;;;;AAUc,wBAAY,GAAW,CAAC,CAAC;AAEvC;;;;;;;;;;;AAWc,0BAAc,GAAW,CAAC,CAAC;AAEzC;;;;AAIO,mCAAuB,GAAW,MAAM,CAAC;AAOhD;;;AAGO,sBAAU,GAAW,CAAC,CAAC;AAE9B;;;AAGO,sBAAU,GAAW,CAAC,CAAC;AAE9B;;;AAGO,sBAAU,GAAW,CAAC,CAAC;AAE9B;;;AAGO,oBAAQ,GAAW,CAAC,CAAC;AAE5B;;;AAGO,wBAAY,GAAW,CAAC,CAAC;AAEhC;;;AAGO,qBAAS,GAAW,CAAC,CAAC;AAE7B;;;AAGO,4BAAgB,GAAW,CAAC,CAAC;AAEpC;;;AAGO,wBAAY,GAAW,CAAC,CAAC;AAEhC;;;AAGO,yBAAa,GAAW,CAAC,CAAC;AAEjC;;;AAGO,sBAAU,GAAW,CAAC,CAAC;AAE9B;;;AAGO,uBAAW,GAAW,EAAE,CAAC;AAEhC;;;AAGO,oBAAQ,GAAW,EAAE,CAAC;AAE7B;;;AAGO,qBAAS,GAAW,EAAE,CAAC;AAE9B;;;AAGO,qBAAS,GAAW,EAAE,CAAC;AAE9B;;;AAGO,qBAAS,GAAW,EAAE,CAAC;AAE9B;;;AAGO,qBAAS,GAAW,EAAE,CAAC;AAE9B;;;AAGO,qBAAS,GAAW,EAAE,CAAC;AAE9B;;;AAGO,qBAAS,GAAW,EAAE,CAAC;AAE9B;;;;AAIO,0BAAc,GAAW,EAAE,CAAC;AAEnC;;;;;;;;AAQO,oBAAQ,GAAW,GAAG,CAAC;AAO9B;;;AAGO,iBAAK,GAAW,CAAC,CAAC;AAEzB;;;AAGO,iBAAK,GAAW,CAAC,CAAC;AAEzB;;;AAGO,gBAAI,GAAW,EAAE,CAAC;AAEzB;;;AAGO,iBAAK,GAAW,EAAE,CAAC;AAE1B;;;AAGO,eAAG,GAAW,CAAC,CAAC;AAEvB;;;AAGO,eAAG,GAAW,CAAC,CAAC;AAEvB;;;AAGO,iBAAK,GAAW,CAAC,CAAC;AAEzB;;;AAGO,gBAAI,GAAW,CAAC,CAAC;AAExB;;;AAGO,kBAAM,GAAW,CAAC,CAAC;AAE1B;;;AAGO,qBAAS,GAAW,EAAE,CAAC;AAE9B;;;AAGO,gBAAI,GAAW,CAAC,CAAC;AAExB;;;AAGO,iBAAK,GAAW,EAAE,CAAC;AAE1B;;;AAGO,kBAAM,GAAW,EAAE,CAAC;AAE3B;;;AAGO,gBAAI,GAAW,EAAE,CAAC;AAEzB;;;;;AAKO,uBAAW,GAAW,EAAE,CAAC;AAEhC;;;;;AAKO,uBAAW,GAAW,EAAE,CAAC;AAEhC;;;;;;AAMO,uBAAW,GAAW,EAAE,CAAC;AAEhC;;;;;AAKO,uBAAW,GAAW,EAAE,CAAC;AAEhC;;;;AAIO,eAAG,GAAW,EAAE,CAAC;AAu5C5B,WAAW,CAAC,SAAS,EAAE,CAAC;AAExB,WAAW,CAAC,qBAAqB,EAAE,CAAC;AAEpC,WAAW,CAAC,mBAAmB,EAAE;;MCzqDpB,OAAO;IA2GhB,YAAY,KAAkB,EAAE,KAAa,EAAE,MAAgB;;;;QAxF/D,qBAAgB,GAAc,EAAE,CAAC;;;;QAUjC,SAAI,GAAY,EAAE,CAAC;;;;QAKnB,SAAI,GAAY,EAAE,CAAC;;;;;;QAOnB,WAAM,GAAa,EAAE,CAAC;;;;QAUtB,aAAQ,GAAqB,IAAI,CAAC;;;;;QAWlC,UAAK,GAAa,EAAE,CAAC;;;;;QAMrB,QAAG,GAAa,EAAE,CAAC;;;;;QAMnB,UAAK,GAAc,EAAE,CAAC;;;;QAqBtB,UAAK,GAAW,EAAE,CAAC;;;;QAUnB,UAAK,GAAW,EAAE,CAAC;QAGf,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;QAChB,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC;QACjB,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;QAChB,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC;QACd,IAAI,CAAC,UAAU,GAAG,CAAC,CAAC;QACpB,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC;QACnB,IAAI,CAAC,UAAU,GAAG,CAAC,CAAC;QACpB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;KACxB;;;AC7JL;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAqCa,MAAM;;;;;;;;;;;;;;;;;;;;;;;;IAuDf,YAAmB,GAAW,EAAE,KAAa,EAAE,IAAY,EAAE,IAAY,EAAE,MAAe,GAAG,IAAI,OAAO,CAAC,iBAAiB;QACtH,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;QACf,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;QACvB,IAAI,CAAC,WAAW,GAAG,GAAG,CAAC;KAC1B;IAEM,MAAM,CAAC,GAAQ;QAClB,IAAI,GAAG,KAAK,IAAI,EAAE;YACd,OAAO,IAAI,CAAC;SACf;QACD,IAAI,EAAE,GAAG,IAAI,IAAI,IAAI,GAAG,YAAY,MAAM,CAAC,EAAE;YACzC,OAAO,KAAK,CAAC;SAChB;QACD,IAAI,CAAC,GAAW,GAAG,CAAC;QACpB,OAAO,IAAI,CAAC,GAAG,KAAK,CAAC,CAAC,GAAG,IAAI,IAAI,CAAC,WAAW,KAAK,CAAC,CAAC,WAAW,KAAK,IAAI,CAAC,KAAK,KAAK,CAAC,CAAC,KAAK,CAAC,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,CAAC,IAAI,CAAC,KAAK,IAAI,CAAC,UAAU,KAAK,CAAC,CAAC,UAAU,CAAC,CAAC;KAC/J;IAEM,QAAQ;QACX,OAAO,IAAI,CAAC,GAAG,IAAI,IAAI,CAAC,WAAW,GAAG,EAAE,GAAG,CAAC,CAAC,GAAS,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAG,GAAS,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAG,GAAS,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAG,CAAC;KAClJ;;;;;;;;;;;;;;IAeM,QAAQ;QACX,OAAO,IAAI,CAAC,KAAK,GAAG,GAAG,GAAG,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,UAAU,GAAG,IAAI,GAAG,IAAI,CAAC,GAAG,IAAI,IAAI,CAAC,WAAW,GAAG,MAAM,GAAG,EAAE,CAAC,GAAG,GAAG,CAAC;KACpH;;;AClIL;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAsCa,QAAQ;;;;;;;;;;IA4CjB,YAAY,CAAa,EAAE,MAAc;QACrC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;QAChB,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC;QACb,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;KACxB;;;;;;IAOD,IAAI,MAAM;QACN,OAAO,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;KAChC;;;;;;;;;;IAYM,OAAO,CAAC,KAAa;QACxB,OAAO,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,GAAG,KAAK,GAAG,CAAC,CAAC,CAAC;KAChD;;;;;;;;;;;IAYM,eAAe,CAAC,KAAa;QAChC,OAAO,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,GAAG,KAAK,GAAG,CAAC,CAAC,CAAC;KAChD;;;;;;;;;;IAWM,OAAO,UAAU,CAAC,QAAgB;QACrC,IAAI,QAAQ,IAAI,IAAI,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC,EAAE;YAC3C,OAAO,IAAI,CAAC;SACf;QACD,IAAI,CAAC,GAAW,QAAQ,CAAC,MAAM,CAAC;QAChC,IAAI,GAAG,GAAe,IAAI,UAAU,CAAC,CAAC,CAAC,CAAC;QACxC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QACf,KAAK,IAAI,CAAC,GAAW,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG;YAC5B,IAAI,CAAC,GAAW,QAAQ,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC;YACrC,IAAI,CAAC,KAAK,GAAG,EAAE;gBACX,GAAG,CAAC,KAAK,CAAC,QAAQ,CAAC,aAAa,EAAE,CAAC,CAAC,CAAC;aACxC;iBAAM,IAAI,CAAC,KAAK,GAAG,EAAE;gBAClB,GAAG,CAAC,KAAK,CAAC,QAAQ,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC;aACrC;iBAAM,IAAI,CAAC,KAAK,GAAG,EAAE;gBAClB,GAAG,CAAC,KAAK,CAAC,QAAQ,CAAC,cAAc,EAAE,CAAC,CAAC,CAAC;aACzC;iBAAM,IAAI,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC,EAAE;gBAC7F,IAAI,OAAO,GAAW,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC,CAAC;gBAC9D,QAAQ,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC,GAAG;oBAC3H,OAAO,GAAG,OAAO,GAAG,EAAE,GAAG,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC,CAAC;oBACjE,CAAC,IAAI,CAAC,CAAC;iBACV;gBACD,IAAI,CAAC,GAAG,CAAC,IAAI,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;oBACrC,CAAC,IAAI,CAAC,CAAC;iBACV;gBACD,GAAG,CAAC,KAAK,CAAC,QAAQ,CAAC,aAAa,EAAE,OAAO,CAAC,CAAC;aAC9C;SACJ;QACD,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,EAAE,GAAG,CAAC,MAAM,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC;QAC3C,OAAO,IAAI,QAAQ,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;KACpC;;;;;;;;IASM,QAAQ;QACX,IAAI,MAAM,GAAW,IAAI,CAAC,MAAM,CAAC;QACjC,IAAI,MAAM,GAAW,EAAE,CAAC;QACxB,KAAK,IAAI,CAAC,GAAW,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,EAAE,CAAC,EAAE;YACrC,SAAS,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;gBACpB,KAAK,QAAQ,CAAC,aAAa;oBACvB,MAAM,IAAI,GAAG,CAAC;oBACd,MAAM;gBACV,KAAK,QAAQ,CAAC,UAAU;oBACpB,MAAM,IAAI,GAAG,CAAC;oBACd,MAAM;gBACV,KAAK,QAAQ,CAAC,cAAc;oBACxB,MAAM,IAAI,GAAG,CAAC;oBACd,MAAM;gBACV,KAAK,QAAQ,CAAC,aAAa;oBACvB,MAAM,IAAI,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC;oBAC1C,MAAM;gBACV;oBACI,MAAM,KAAK,GAAG,CAAC,CAAC;aACvB;SACJ;QACD,OAAO,MAAM,CAAC,QAAQ,EAAE,CAAC;KAC5B;;AA3JD;;;;AAIc,sBAAa,GAAW,CAAC,CAAC;AAExC;;;;AAIc,mBAAU,GAAW,CAAC,CAAC;AAErC;;;;AAIc,uBAAc,GAAW,CAAC,CAAC;AAEzC;;;;AAIc,sBAAa,GAAW,CAAC;;AC7D3C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MA0Da,WAAW;;;;;;;;IAuHpB,YAAmB,MAAkB,EAAE,MAAc,CAAC,EAAE,MAAc,MAAM,CAAC,MAAM;QAC/E,IAAI,CAAC,eAAe,GAAG,CAAC,CAAC;QACzB,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;QAChB,IAAI,CAAC,GAAG,GAAG,MAAM,CAAC;QAClB,IAAI,IAAI,CAAC,SAAS,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,OAAO,CAAC,IAAI,EAAE;YAAE,MAAM,IAAI,KAAK,EAAE,CAAC;SAAE;QAClE,IAAI,CAAC,KAAK,GAAG,IAAI,KAAK,CAAC,IAAI,CAAC,iBAAiB,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;QACxD,IAAI,CAAC,GAAW,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC;QAClC,IAAI,CAAC,OAAO,GAAG,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC;QAC5B,IAAI,GAAG,GAAW,CAAC,CAAC;QACpB,IAAI,KAAK,GAAW,GAAG,GAAG,EAAE,CAAC;QAC7B,KAAK,IAAI,CAAC,GAAW,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,EAAE;YAChC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,KAAK,GAAG,CAAC,CAAC;YAC1B,IAAI,IAAY,CAAC;YACjB,SAAS,MAAM,CAAC,KAAK,CAAC;gBAClB,KAAK,WAAW,CAAC,KAAK,CAAC;gBACvB,KAAK,WAAW,CAAC,IAAI,CAAC;gBACtB,KAAK,WAAW,CAAC,KAAK,CAAC;gBACvB,KAAK,WAAW,CAAC,GAAG,CAAC;gBACrB,KAAK,WAAW,CAAC,KAAK,CAAC;gBACvB,KAAK,WAAW,CAAC,SAAS,CAAC;gBAC3B,KAAK,WAAW,CAAC,IAAI;oBACjB,IAAI,GAAG,CAAC,CAAC;oBACT,MAAM;gBACV,KAAK,WAAW,CAAC,IAAI,CAAC;gBACtB,KAAK,WAAW,CAAC,MAAM;oBACnB,IAAI,GAAG,CAAC,CAAC;oBACT,EAAE,CAAC,CAAC;oBACJ,MAAM;gBACV,KAAK,WAAW,CAAC,IAAI;oBACjB,IAAI,GAAG,CAAC,GAAG,IAAI,CAAC,iBAAiB,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;oBAC7C,IAAI,IAAI,GAAG,GAAG,EAAE;wBACZ,GAAG,GAAG,IAAI,CAAC;qBACd;oBACD,MAAM;gBACV,KAAK,WAAW,CAAC,MAAM;oBACnB,IAAI,GAAG,CAAC,CAAC;oBACT,MAAM;gBACV;oBACI,IAAI,GAAG,CAAC,CAAC;oBACT,MAAM;aACb;YACD,KAAK,IAAI,IAAI,CAAC;SACjB;QACD,IAAI,CAAC,eAAe,GAAG,GAAG,CAAC;QAC3B,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;KACvB;;;;;;;;;IAUM,SAAS;QACZ,OAAO,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;KAC9C;;;;;;;;IASM,YAAY;QACf,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE,IAAI,KAAK,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC;KAC3E;;;;;;;;;;IAWM,YAAY;QACf,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE,IAAI,KAAK,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC;KAC3E;;;;;;;;;IAUM,aAAa;QAChB,IAAI,KAAK,GAAW,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;QACpC,IAAI,CAAC,GAAW,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC;QAC9C,IAAI,UAAU,GAAa,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC;QACxC,IAAI,CAAC,GAAG,CAAC,EAAE;YACP,IAAI,GAAG,GAAa,IAAI,KAAK,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;YACpD,KAAK,IAAI,CAAC,GAAW,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,EAAE;gBAChC,KAAK,IAAI,CAAC,CAAC;gBACX,UAAU,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;aAC9C;SACJ;QACD,OAAO,UAAU,CAAC;KACrB;;;;;;;;;;;;;;;;;;;IAoBM,MAAM,CAAC,YAA0B,EAAE,QAAqB,EAAE,EAAE,QAAgB,CAAC;QAChF,IAAI,CAAC,GAAW,IAAI,CAAC,MAAM,CAAC;QAC5B,IAAI,CAAC,GAAa,IAAI,KAAK,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;QAClD,IAAI,OAAO,GAAY,IAAI,OAAO,CAAC,KAAK,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC;QACpD,IAAI,MAAM,GAAW,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC;QAC/C,IAAI,IAAI,GAAW,IAAI,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;QAC5C,IAAI,UAAU,GAAW,IAAI,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;QAClD,IAAI,UAAU,GAAa,IAAI,KAAK,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACpE,CAAC,IAAI,CAAC,CAAC;QACP,KAAK,IAAI,CAAC,GAAW,CAAC,EAAE,CAAC,GAAG,UAAU,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;YAChD,UAAU,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YACrC,CAAC,IAAI,CAAC,CAAC;SACV;QACD,IAAI,SAAS,GAAkB,IAAI,CAAC;QACpC,IAAI,UAAU,GAAkB,IAAI,CAAC;QACrC,IAAI,WAAW,GAAkB,IAAI,CAAC;QACtC,IAAI,cAAc,GAAkB,IAAI,CAAC;QACzC,IAAI,aAAa,GAAkB,IAAI,CAAC;QACxC,IAAI,aAAa,GAAkB,IAAI,CAAC;QACxC,IAAI,IAAI,GAAW,CAAC,CAAC;QACrB,IAAI,KAAK,GAAW,CAAC,CAAC;QACtB,IAAI,KAAK,GAAW,CAAC,CAAC;QACtB,IAAI,MAAM,GAAW,CAAC,CAAC;QACvB,IAAI,YAAY,GAAW,CAAC,CAAC;QAC7B,IAAI,UAAU,GAAqB,IAAI,CAAC;QACxC,CAAC,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;QACzB,KAAK,IAAI,CAAC,GAAW,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,EAAE;YACxD,IAAI,QAAQ,GAAkB,IAAI,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;YACtD,KAAK,YAAY,KAAK,QAAQ,GAAG;gBAC7B,UAAU,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;aACxC;iBAAM,KAAK,cAAc,KAAK,QAAQ,GAAG;gBACtC,YAAY,GAAG,CAAC,GAAG,CAAC,CAAC;aACxB;iBAAM,KAAK,iBAAiB,KAAK,QAAQ,GAAG;gBACzC,cAAc,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;gBAC1C,IAAI,IAAI,GAAW,IAAI,CAAC,iBAAiB,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC;gBAClD,IAAI,IAAI,KAAK,CAAC,EAAE;oBACZ,aAAa,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC;oBACnD,aAAa,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;iBAC1D;aACJ;iBAAM,IAAI,WAAW,CAAC,UAAU,KAAK,WAAW,KAAK,QAAQ,CAAC,EAAE;gBAC7D,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;aACvC;iBAAM,IAAI,WAAW,CAAC,WAAW,KAAK,2BAA2B,KAAK,QAAQ,CAAC,EAAE;gBAC9E,IAAI,GAAG,CAAC,GAAG,CAAC,CAAC;aAChB;iBAAM,IAAI,WAAW,CAAC,WAAW,KAAK,+BAA+B,KAAK,QAAQ,CAAC,EAAE;gBAClF,KAAK,GAAG,CAAC,GAAG,CAAC,CAAC;aACjB;iBAAM,KAAK,YAAY,KAAK,QAAQ,GAAG;gBACpC,MAAM,IAAI,OAAO,CAAC,cAAc,CAAC;aACpC;iBAAM,KAAK,WAAW,KAAK,QAAQ,GAAG;gBACnC,MAAM,IAAI,OAAO,CAAC,aAAa,GAAG,WAAW,CAAC,uBAAuB,CAAC;aACzE;iBAAM,KAAK,sBAAsB,KAAK,QAAQ,GAAG;gBAC9C,IAAI,GAAG,GAAW,IAAI,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;gBACtC,WAAW,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,IAAI,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;aAC1D;iBAAM,IAAI,WAAW,CAAC,WAAW,KAAK,6BAA6B,KAAK,QAAQ,CAAC,EAAE;gBAChF,KAAK,GAAG,CAAC,GAAG,CAAC,CAAC;aACjB;iBAAM,IAAI,WAAW,CAAC,WAAW,KAAK,iCAAiC,KAAK,QAAQ,CAAC,EAAE;gBACpF,MAAM,GAAG,CAAC,GAAG,CAAC,CAAC;aAClB;iBAAM,KAAK,kBAAkB,KAAK,QAAQ,GAAG;gBAC1C,IAAI,gBAAgB,GAAa,IAAI,KAAK,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;gBAC1E,KAAK,IAAI,CAAC,GAAW,CAAC,EAAE,CAAC,GAAW,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,gBAAgB,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;oBAC1E,gBAAgB,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;oBACxB,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,iBAAiB,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC;iBAC/C;gBACD,OAAO,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;aAC/C;iBAAM;gBACH,IAAI,IAAI,GAAc,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,QAAQ,EAAE,CAAC,GAAG,CAAC,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;gBACnG,IAAI,IAAI,IAAI,IAAI,EAAE;oBACd,IAAI,CAAC,IAAI,GAAG,UAAU,CAAC;oBACvB,UAAU,GAAG,IAAI,CAAC;iBACrB;aACJ;YACD,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;SAChC;QACD,YAAY,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,MAAM,EAAE,IAAI,EAAE,SAAS,EAAE,UAAU,EAAE,UAAU,CAAC,CAAC;QACrG,IAAI,CAAC,KAAK,GAAG,WAAW,CAAC,UAAU,MAAM,CAAC,KAAK,UAAU,IAAI,IAAI,IAAI,WAAW,IAAI,IAAI,CAAC,EAAE;YACvF,YAAY,CAAC,WAAW,CAAC,UAAU,EAAE,WAAW,CAAC,CAAC;SACrD;QACD,IAAI,cAAc,IAAI,IAAI,EAAE;YACxB,YAAY,CAAC,eAAe,CAAC,cAAc,EAAE,aAAa,EAAE,aAAa,CAAC,CAAC;SAC9E;QACD,IAAI,WAAW,CAAC,WAAW,IAAI,IAAI,KAAK,CAAC,EAAE;YACvC,KAAK,IAAI,CAAC,GAAW,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,EAAE,CAAC,GAAW,IAAI,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,EAAE;gBACjF,CAAC,GAAG,IAAI,CAAC,oBAAoB,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,IAAI,EAAE,YAAY,CAAC,eAAe,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;aAC1G;SACJ;QACD,IAAI,WAAW,CAAC,WAAW,IAAI,KAAK,KAAK,CAAC,EAAE;YACxC,KAAK,IAAI,CAAC,GAAW,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,EAAE,CAAC,GAAW,KAAK,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,EAAE;gBACnF,CAAC,GAAG,IAAI,CAAC,oBAAoB,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,IAAI,EAAE,YAAY,CAAC,eAAe,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC;aAC3G;SACJ;QACD,IAAI,WAAW,CAAC,WAAW,IAAI,KAAK,KAAK,CAAC,EAAE;YACxC,KAAK,IAAI,CAAC,GAAW,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,EAAE,CAAC,GAAW,KAAK,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,EAAE;gBACnF,CAAC,GAAG,IAAI,CAAC,oBAAoB,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;gBAC1C,CAAC,GAAG,IAAI,CAAC,oBAAoB,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,IAAI,EAAE,YAAY,CAAC,mBAAmB,CAAC,OAAO,CAAC,OAAO,EAAE,OAAO,CAAC,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;aACjJ;SACJ;QACD,IAAI,WAAW,CAAC,WAAW,IAAI,MAAM,KAAK,CAAC,EAAE;YACzC,KAAK,IAAI,CAAC,GAAW,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,EAAE,CAAC,GAAW,MAAM,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,EAAE;gBACrF,CAAC,GAAG,IAAI,CAAC,oBAAoB,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;gBAC1C,CAAC,GAAG,IAAI,CAAC,oBAAoB,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,IAAI,EAAE,YAAY,CAAC,mBAAmB,CAAC,OAAO,CAAC,OAAO,EAAE,OAAO,CAAC,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC;aAClJ;SACJ;QACD,QAAQ,UAAU,IAAI,IAAI,GAAG;YACzB,IAAI,IAAI,GAAqB,UAAU,CAAC,IAAI,CAAC;YAC7C,UAAU,CAAC,IAAI,GAAG,IAAI,CAAC;YACvB,YAAY,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC;YACxC,UAAU,GAAG,IAAI,CAAC;SACrB;QACD,IAAI,YAAY,KAAK,CAAC,EAAE;YACpB,IAAI,CAAC,GAAW,YAAY,GAAG,CAAC,CAAC;YACjC,KAAK,IAAI,CAAC,GAAW,IAAI,CAAC,iBAAiB,CAAC,YAAY,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,EAAE;gBACnE,YAAY,CAAC,eAAe,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;gBACrI,CAAC,IAAI,CAAC,CAAC;aACV;SACJ;QACD,CAAC,GAAG,IAAI,CAAC,MAAM,GAAG,EAAE,GAAG,CAAC,GAAG,UAAU,CAAC,MAAM,CAAC;QAC7C,KAAK,IAAI,CAAC,GAAW,IAAI,CAAC,iBAAiB,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,EAAE;YAC5D,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,YAAY,EAAE,OAAO,EAAE,CAAC,CAAC,CAAC;SAChD;QACD,CAAC,IAAI,CAAC,CAAC;QACP,KAAK,IAAI,CAAC,GAAW,IAAI,CAAC,iBAAiB,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,EAAE;YAC5D,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,YAAY,EAAE,OAAO,EAAE,CAAC,CAAC,CAAC;SACjD;QACD,YAAY,CAAC,QAAQ,EAAE,CAAC;KAC3B;;;;;;;;;IAUO,SAAS,CAAC,YAA0B,EAAE,OAAgB,EAAE,CAAS;QACrE,IAAI,CAAC,GAAa,OAAO,CAAC,MAAM,CAAC;QACjC,IAAI,MAAM,GAAW,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC;QAC/C,IAAI,IAAI,GAAkB,IAAI,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;QAClD,IAAI,IAAI,GAAkB,IAAI,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;QAClD,CAAC,IAAI,CAAC,CAAC;QACP,IAAI,SAAS,GAAkB,IAAI,CAAC;QACpC,IAAI,IAAI,GAAW,CAAC,CAAC;QACrB,IAAI,KAAK,GAAW,CAAC,CAAC;QACtB,IAAI,KAAK,GAAW,CAAC,CAAC;QACtB,IAAI,MAAM,GAAW,CAAC,CAAC;QACvB,IAAI,KAAK,GAAQ,IAAI,CAAC;QACtB,IAAI,UAAU,GAAqB,IAAI,CAAC;QACxC,KAAK,IAAI,CAAC,GAAW,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,EAAE;YACxD,IAAI,QAAQ,GAAkB,IAAI,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;YACtD,KAAK,eAAe,KAAK,QAAQ,GAAG;gBAChC,IAAI,IAAI,GAAW,IAAI,CAAC,iBAAiB,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;gBACjD,KAAK,GAAG,IAAI,KAAK,CAAC,GAAG,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;aACvD;iBAAM,IAAI,WAAW,CAAC,UAAU,KAAK,WAAW,KAAK,QAAQ,CAAC,EAAE;gBAC7D,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;aACvC;iBAAM,KAAK,YAAY,KAAK,QAAQ,GAAG;gBACpC,MAAM,IAAI,OAAO,CAAC,cAAc,CAAC;aACpC;iBAAM,KAAK,WAAW,KAAK,QAAQ,GAAG;gBACnC,MAAM,IAAI,OAAO,CAAC,aAAa,GAAG,WAAW,CAAC,uBAAuB,CAAC;aACzE;iBAAM,IAAI,WAAW,CAAC,WAAW,KAAK,2BAA2B,KAAK,QAAQ,CAAC,EAAE;gBAC9E,IAAI,GAAG,CAAC,GAAG,CAAC,CAAC;aAChB;iBAAM,IAAI,WAAW,CAAC,WAAW,KAAK,+BAA+B,KAAK,QAAQ,CAAC,EAAE;gBAClF,KAAK,GAAG,CAAC,GAAG,CAAC,CAAC;aACjB;iBAAM,IAAI,WAAW,CAAC,WAAW,KAAK,6BAA6B,KAAK,QAAQ,CAAC,EAAE;gBAChF,KAAK,GAAG,CAAC,GAAG,CAAC,CAAC;aACjB;iBAAM,IAAI,WAAW,CAAC,WAAW,KAAK,iCAAiC,KAAK,QAAQ,CAAC,EAAE;gBACpF,MAAM,GAAG,CAAC,GAAG,CAAC,CAAC;aAClB;iBAAM;gBACH,IAAI,IAAI,GAAc,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,KAAK,EAAE,QAAQ,EAAE,CAAC,GAAG,CAAC,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;gBAC3G,IAAI,IAAI,IAAI,IAAI,EAAE;oBACd,IAAI,CAAC,IAAI,GAAG,UAAU,CAAC;oBACvB,UAAU,GAAG,IAAI,CAAC;iBACrB;aACJ;YACD,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;SAChC;QACD,CAAC,IAAI,CAAC,CAAC;QACP,MAAM,CAAC,IAAI,CAAC,CAAC;QACb,IAAI,EAAE,GAAwB,YAAY,CAAC,UAAU,CAAC,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,SAAS,EAAE,KAAK,CAAC,CAAC;QAC5F,IAAI,EAAE,IAAI,IAAI,EAAE;YACZ,OAAO,CAAC,CAAC;SACZ;QACD,IAAI,WAAW,CAAC,WAAW,IAAI,IAAI,KAAK,CAAC,EAAE;YACvC,KAAK,IAAI,CAAC,GAAW,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,EAAE,CAAC,GAAW,IAAI,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,EAAE;gBACjF,CAAC,GAAG,IAAI,CAAC,oBAAoB,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,IAAI,EAAE,EAAE,CAAC,eAAe,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;aAChG;SACJ;QACD,IAAI,WAAW,CAAC,WAAW,IAAI,KAAK,KAAK,CAAC,EAAE;YACxC,KAAK,IAAI,CAAC,GAAW,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,EAAE,CAAC,GAAW,KAAK,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,EAAE;gBACnF,CAAC,GAAG,IAAI,CAAC,oBAAoB,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,IAAI,EAAE,EAAE,CAAC,eAAe,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC;aACjG;SACJ;QACD,IAAI,WAAW,CAAC,WAAW,IAAI,KAAK,KAAK,CAAC,EAAE;YACxC,KAAK,IAAI,CAAC,GAAW,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,EAAE,CAAC,GAAW,KAAK,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,EAAE;gBACnF,CAAC,GAAG,IAAI,CAAC,oBAAoB,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;gBAC1C,CAAC,GAAG,IAAI,CAAC,oBAAoB,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,IAAI,EAAE,EAAE,CAAC,mBAAmB,CAAC,OAAO,CAAC,OAAO,EAAE,OAAO,CAAC,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;aACvI;SACJ;QACD,IAAI,WAAW,CAAC,WAAW,IAAI,MAAM,KAAK,CAAC,EAAE;YACzC,KAAK,IAAI,CAAC,GAAW,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,EAAE,CAAC,GAAW,MAAM,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,EAAE;gBACrF,CAAC,GAAG,IAAI,CAAC,oBAAoB,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;gBAC1C,CAAC,GAAG,IAAI,CAAC,oBAAoB,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,IAAI,EAAE,EAAE,CAAC,mBAAmB,CAAC,OAAO,CAAC,OAAO,EAAE,OAAO,CAAC,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC;aACxI;SACJ;QACD,QAAQ,UAAU,IAAI,IAAI,GAAG;YACzB,IAAI,IAAI,GAAqB,UAAU,CAAC,IAAI,CAAC;YAC7C,UAAU,CAAC,IAAI,GAAG,IAAI,CAAC;YACvB,EAAE,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC;YAC9B,UAAU,GAAG,IAAI,CAAC;SACrB;QACD,EAAE,CAAC,QAAQ,EAAE,CAAC;QACd,OAAO,CAAC,CAAC;KACZ;;;;;;;;;IAUO,UAAU,CAAC,YAA0B,EAAE,OAAgB,EAAE,CAAS;;QACtE,IAAI,CAAC,GAAa,OAAO,CAAC,MAAM,CAAC;QACjC,OAAO,CAAC,MAAM,GAAG,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC;QAC3C,OAAO,CAAC,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;QACvC,OAAO,CAAC,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;QACvC,CAAC,IAAI,CAAC,CAAC;QACP,IAAI,IAAI,GAAW,CAAC,CAAC;QACrB,IAAI,SAAS,GAAW,CAAC,CAAC;QAC1B,IAAI,UAAU,GAAoB,IAAI,CAAC;QACvC,IAAI,SAAS,GAAkB,IAAI,CAAC;QACpC,IAAI,gBAAgB,GAAW,CAAC,CAAC;QACjC,IAAI,IAAI,GAAW,CAAC,CAAC;QACrB,IAAI,KAAK,GAAW,CAAC,CAAC;QACtB,IAAI,KAAK,GAAW,CAAC,CAAC;QACtB,IAAI,MAAM,GAAW,CAAC,CAAC;QACvB,IAAI,IAAI,GAAW,CAAC,CAAC;QACrB,IAAI,MAAM,GAAW,CAAC,CAAC;QACvB,IAAI,OAAO,GAAW,CAAC,CAAC;QACxB,IAAI,cAAc,GAAW,CAAC,CAAC;QAC/B,IAAI,UAAU,GAAqB,IAAI,CAAC;QACxC,KAAK,IAAI,CAAC,GAAW,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,EAAE;YACxD,IAAI,QAAQ,GAAkB,IAAI,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;YACtD,KAAK,MAAM,KAAK,QAAQ,GAAG;gBACvB,IAAI,CAAC,OAAO,CAAC,KAAK,GAAG,WAAW,CAAC,SAAS,MAAM,CAAC,EAAE;oBAC/C,IAAI,GAAG,CAAC,GAAG,CAAC,CAAC;iBAChB;aACJ;iBAAM,KAAK,YAAY,KAAK,QAAQ,GAAG;gBACpC,UAAU,GAAG,IAAI,KAAK,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;gBACtD,SAAS,GAAG,CAAC,GAAG,EAAE,CAAC;gBACnB,KAAK,IAAI,CAAC,GAAW,CAAC,EAAE,CAAC,GAAG,UAAU,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;oBAChD,UAAU,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC;oBAC7C,SAAS,IAAI,CAAC,CAAC;iBAClB;aACJ;iBAAM,IAAI,WAAW,CAAC,UAAU,KAAK,WAAW,KAAK,QAAQ,CAAC,EAAE;gBAC7D,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;aACvC;iBAAM,KAAK,YAAY,KAAK,QAAQ,GAAG;gBACpC,OAAO,CAAC,MAAM,IAAI,OAAO,CAAC,cAAc,CAAC;aAC5C;iBAAM,IAAI,WAAW,CAAC,WAAW,KAAK,2BAA2B,KAAK,QAAQ,CAAC,EAAE;gBAC9E,IAAI,GAAG,CAAC,GAAG,CAAC,CAAC;aAChB;iBAAM,IAAI,WAAW,CAAC,WAAW,KAAK,+BAA+B,KAAK,QAAQ,CAAC,EAAE;gBAClF,KAAK,GAAG,CAAC,GAAG,CAAC,CAAC;aACjB;iBAAM,IAAI,WAAW,CAAC,WAAW,KAAK,mBAAmB,KAAK,QAAQ,CAAC,EAAE;gBACtE,IAAI,GAAG,CAAC,GAAG,CAAC,CAAC;aAChB;iBAAM,KAAK,WAAW,KAAK,QAAQ,GAAG;gBACnC,OAAO,CAAC,MAAM,IAAI,OAAO,CAAC,aAAa,GAAG,WAAW,CAAC,uBAAuB,CAAC;aACjF;iBAAM,IAAI,WAAW,CAAC,WAAW,KAAK,6BAA6B,KAAK,QAAQ,CAAC,EAAE;gBAChF,KAAK,GAAG,CAAC,GAAG,CAAC,CAAC;aACjB;iBAAM,IAAI,WAAW,CAAC,WAAW,KAAK,iCAAiC,KAAK,QAAQ,CAAC,EAAE;gBACpF,MAAM,GAAG,CAAC,GAAG,CAAC,CAAC;aAClB;iBAAM,IAAI,WAAW,CAAC,WAAW,KAAK,oCAAoC,KAAK,QAAQ,CAAC,EAAE;gBACvF,MAAM,GAAG,CAAC,GAAG,CAAC,CAAC;aAClB;iBAAM,IAAI,WAAW,CAAC,WAAW,KAAK,sCAAsC,KAAK,QAAQ,CAAC,EAAE;gBACzF,OAAO,GAAG,CAAC,GAAG,CAAC,CAAC;aACnB;iBAAM,KAAK,kBAAkB,KAAK,QAAQ,GAAG;gBAC1C,gBAAgB,GAAG,CAAC,GAAG,CAAC,CAAC;aAC5B;iBAAM;gBACH,IAAI,IAAI,GAAc,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,KAAK,EAAE,QAAQ,EAAE,CAAC,GAAG,CAAC,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;gBAC3G,IAAI,IAAI,IAAI,IAAI,EAAE;oBACd,IAAI,CAAC,IAAI,GAAG,UAAU,CAAC;oBACvB,UAAU,GAAG,IAAI,CAAC;iBACrB;aACJ;YACD,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;SAChC;QACD,CAAC,IAAI,CAAC,CAAC;QACP,IAAI,EAAE,GAAyB,YAAY,CAAC,WAAW,CAAC,OAAO,CAAC,MAAM,EAAE,OAAO,CAAC,IAAI,EAAE,OAAO,CAAC,IAAI,EAAE,SAAS,EAAE,UAAU,CAAC,CAAC;QAC3H,IAAI,EAAE,IAAI,IAAI,EAAE;YACZ,OAAO,CAAC,CAAC;SACZ;QACD,IAAI,WAAW,CAAC,MAAM,KAAK,EAAE,IAAI,IAAI,IAAI,EAAE,YAAY,YAAY,CAAC,EAAE;YAClE,IAAI,EAAE,GAAiB,EAAE,CAAC;YAC1B,IAAI,EAAE,CAAC,EAAE,CAAC,EAAE,KAAK,IAAI,IAAI,SAAS,KAAK,EAAE,CAAC,SAAS,EAAE;gBACjD,IAAI,cAAc,GAAY,KAAK,CAAC;gBACpC,IAAI,UAAU,IAAI,IAAI,EAAE;oBACpB,cAAc,GAAG,EAAE,CAAC,cAAc,KAAK,CAAC,CAAC;iBAC5C;qBAAM,IAAI,UAAU,CAAC,MAAM,KAAK,EAAE,CAAC,cAAc,EAAE;oBAChD,cAAc,GAAG,IAAI,CAAC;oBACtB,KAAK,IAAI,CAAC,GAAW,UAAU,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,EAAE;wBACrD,SAAS,IAAI,CAAC,CAAC;wBACf,IAAI,OAAA,EAAE,CAAC,UAAU,0CAAG,CAAC,OAAM,IAAI,CAAC,iBAAiB,CAAC,SAAS,CAAC,EAAE;4BAC1D,cAAc,GAAG,KAAK,CAAC;4BACvB,MAAM;yBACT;qBACJ;iBACJ;gBACD,IAAI,cAAc,EAAE;oBAChB,EAAE,CAAC,iBAAiB,GAAG,cAAc,CAAC;oBACtC,EAAE,CAAC,iBAAiB,GAAG,CAAC,GAAG,cAAc,CAAC;oBAC1C,OAAO,CAAC,CAAC;iBACZ;aACJ;SACJ;QACD,IAAI,gBAAgB,KAAK,CAAC,EAAE;YACxB,KAAK,IAAI,CAAC,GAAW,IAAI,CAAC,GAAG,CAAC,gBAAgB,CAAC,GAAG,GAAG,EAAE,CAAC,GAAW,gBAAgB,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;gBAC5G,EAAE,CAAC,cAAc,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aACzE;SACJ;QACD,IAAI,WAAW,CAAC,WAAW,IAAI,IAAI,KAAK,CAAC,EAAE;YACvC,IAAI,EAAE,GAA6B,EAAE,CAAC,sBAAsB,EAAE,CAAC;YAC/D,IAAI,CAAC,mBAAmB,CAAC,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC;YAC5C,IAAI,EAAE,IAAI,IAAI,EAAE;gBACZ,EAAE,CAAC,QAAQ,EAAE,CAAC;aACjB;SACJ;QACD,IAAI,WAAW,CAAC,WAAW,IAAI,IAAI,KAAK,CAAC,EAAE;YACvC,KAAK,IAAI,CAAC,GAAW,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,EAAE,CAAC,GAAW,IAAI,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,EAAE;gBACjF,CAAC,GAAG,IAAI,CAAC,oBAAoB,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,IAAI,EAAE,EAAE,CAAC,eAAe,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;aAChG;SACJ;QACD,IAAI,WAAW,CAAC,WAAW,IAAI,KAAK,KAAK,CAAC,EAAE;YACxC,KAAK,IAAI,CAAC,GAAW,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,EAAE,CAAC,GAAW,KAAK,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,EAAE;gBACnF,CAAC,GAAG,IAAI,CAAC,oBAAoB,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,IAAI,EAAE,EAAE,CAAC,eAAe,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC;aACjG;SACJ;QACD,IAAI,WAAW,CAAC,WAAW,IAAI,KAAK,KAAK,CAAC,EAAE;YACxC,KAAK,IAAI,CAAC,GAAW,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,EAAE,CAAC,GAAW,KAAK,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,EAAE;gBACnF,CAAC,GAAG,IAAI,CAAC,oBAAoB,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;gBAC1C,CAAC,GAAG,IAAI,CAAC,oBAAoB,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,IAAI,EAAE,EAAE,CAAC,mBAAmB,CAAC,OAAO,CAAC,OAAO,EAAE,OAAO,CAAC,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;aACvI;SACJ;QACD,IAAI,WAAW,CAAC,WAAW,IAAI,MAAM,KAAK,CAAC,EAAE;YACzC,KAAK,IAAI,CAAC,GAAW,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,EAAE,CAAC,GAAW,MAAM,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,EAAE;gBACrF,CAAC,GAAG,IAAI,CAAC,oBAAoB,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;gBAC1C,CAAC,GAAG,IAAI,CAAC,oBAAoB,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,IAAI,EAAE,EAAE,CAAC,mBAAmB,CAAC,OAAO,CAAC,OAAO,EAAE,OAAO,CAAC,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC;aACxI;SACJ;QACD,IAAI,WAAW,CAAC,WAAW,IAAI,MAAM,KAAK,CAAC,EAAE;YACzC,IAAI,CAAC,wBAAwB,CAAC,EAAE,EAAE,OAAO,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC;SAC5D;QACD,IAAI,WAAW,CAAC,WAAW,IAAI,OAAO,KAAK,CAAC,EAAE;YAC1C,IAAI,CAAC,wBAAwB,CAAC,EAAE,EAAE,OAAO,EAAE,OAAO,EAAE,KAAK,CAAC,CAAC;SAC9D;QACD,QAAQ,UAAU,IAAI,IAAI,GAAG;YACzB,IAAI,IAAI,GAAqB,UAAU,CAAC,IAAI,CAAC;YAC7C,UAAU,CAAC,IAAI,GAAG,IAAI,CAAC;YACvB,EAAE,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC;YAC9B,UAAU,GAAG,IAAI,CAAC;SACrB;QACD,IAAI,IAAI,KAAK,CAAC,EAAE;YACZ,EAAE,CAAC,SAAS,EAAE,CAAC;YACf,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;SACpC;QACD,EAAE,CAAC,QAAQ,EAAE,CAAC;QACd,OAAO,CAAC,CAAC;KACZ;;;;;;;;IASO,QAAQ,CAAC,EAAiB,EAAE,OAAgB,EAAE,CAAS;QAC3D,IAAI,CAAC,GAAe,IAAI,CAAC,GAAG,CAAC;QAC7B,IAAI,CAAC,GAAa,OAAO,CAAC,MAAM,CAAC;QACjC,IAAI,QAAQ,GAAW,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC;QACjD,IAAI,SAAS,GAAW,IAAI,CAAC,iBAAiB,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QACtD,IAAI,UAAU,GAAW,IAAI,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QAC7C,CAAC,IAAI,CAAC,CAAC;QACP,IAAI,SAAS,GAAW,CAAC,CAAC;QAC1B,IAAI,OAAO,GAAW,CAAC,GAAG,UAAU,CAAC;QACrC,IAAI,MAAM,GAAY,OAAO,CAAC,MAAM,GAAG,IAAI,KAAK,CAAC,UAAU,GAAG,CAAC,CAAC,CAAC;QACjE,IAAI,CAAC,SAAS,CAAC,UAAU,GAAG,CAAC,EAAE,MAAM,CAAC,CAAC;QACvC,QAAQ,CAAC,GAAG,OAAO,GAAG;YAClB,IAAI,MAAM,GAAW,CAAC,GAAG,SAAS,CAAC;YACnC,IAAI,MAAM,GAAW,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;YAChC,SAAS,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC;gBAC7B,KAAK,WAAW,CAAC,UAAU,CAAC;gBAC5B,KAAK,WAAW,CAAC,YAAY;oBACzB,CAAC,IAAI,CAAC,CAAC;oBACP,MAAM;gBACV,KAAK,WAAW,CAAC,UAAU;oBACvB,IAAI,CAAC,SAAS,CAAC,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC;oBACvD,CAAC,IAAI,CAAC,CAAC;oBACP,MAAM;gBACV,KAAK,WAAW,CAAC,cAAc;oBAC3B,IAAI,CAAC,SAAS,CAAC,MAAM,GAAG,IAAI,CAAC,iBAAiB,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC;oBAC/D,CAAC,IAAI,CAAC,CAAC;oBACP,MAAM;gBACV,KAAK,WAAW,CAAC,WAAW;oBACxB,IAAI,CAAC,SAAS,CAAC,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC;oBACrD,CAAC,IAAI,CAAC,CAAC;oBACP,MAAM;gBACV,KAAK,WAAW,CAAC,SAAS;oBACtB,MAAM,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC;oBACxB,IAAI,MAAM,KAAK,OAAO,CAAC,IAAI,EAAE;wBACzB,CAAC,IAAI,CAAC,CAAC;qBACV;yBAAM;wBACH,CAAC,IAAI,CAAC,CAAC;qBACV;oBACD,MAAM;gBACV,KAAK,WAAW,CAAC,SAAS;oBACtB,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,MAAM,GAAG,CAAC,CAAC,CAAC;oBACzB,IAAI,CAAC,SAAS,CAAC,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC;oBACjD,KAAK,IAAI,CAAC,GAAW,IAAI,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,EAAE;wBAC5E,IAAI,CAAC,SAAS,CAAC,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,MAAM,CAAC,CAAC;wBACtD,CAAC,IAAI,CAAC,CAAC;qBACV;oBACD,CAAC,IAAI,EAAE,CAAC;oBACR,MAAM;gBACV,KAAK,WAAW,CAAC,SAAS;oBACtB,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,MAAM,GAAG,CAAC,CAAC,CAAC;oBACzB,IAAI,CAAC,SAAS,CAAC,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC;oBACjD,KAAK,IAAI,CAAC,GAAW,IAAI,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,EAAE;wBAClD,IAAI,CAAC,SAAS,CAAC,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,MAAM,CAAC,CAAC;wBACtD,CAAC,IAAI,CAAC,CAAC;qBACV;oBACD,CAAC,IAAI,CAAC,CAAC;oBACP,MAAM;gBACV,KAAK,WAAW,CAAC,QAAQ,CAAC;gBAC1B,KAAK,WAAW,CAAC,UAAU,CAAC;gBAC5B,KAAK,WAAW,CAAC,QAAQ;oBACrB,CAAC,IAAI,CAAC,CAAC;oBACP,MAAM;gBACV,KAAK,WAAW,CAAC,UAAU,CAAC;gBAC5B,KAAK,WAAW,CAAC,SAAS,CAAC;gBAC3B,KAAK,WAAW,CAAC,gBAAgB,CAAC;gBAClC,KAAK,WAAW,CAAC,SAAS,CAAC;gBAC3B,KAAK,WAAW,CAAC,SAAS;oBACtB,CAAC,IAAI,CAAC,CAAC;oBACP,MAAM;gBACV,KAAK,WAAW,CAAC,YAAY,CAAC;gBAC9B,KAAK,WAAW,CAAC,aAAa;oBAC1B,CAAC,IAAI,CAAC,CAAC;oBACP,MAAM;gBACV;oBACI,CAAC,IAAI,CAAC,CAAC;oBACP,MAAM;aACb;SACJ;QACD,KAAK,IAAI,CAAC,GAAW,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,EAAE;YACxD,IAAI,KAAK,GAAU,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC;YACzE,IAAI,GAAG,GAAU,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC;YACvE,IAAI,OAAO,GAAU,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC;YAC3E,IAAI,IAAI,GAAkB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YACtF,EAAE,CAAC,kBAAkB,CAAC,KAAK,EAAE,GAAG,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;YACjD,CAAC,IAAI,CAAC,CAAC;SACV;QACD,CAAC,IAAI,CAAC,CAAC;QACP,IAAI,KAAK,GAAoB,IAAI,CAAC;QAClC,IAAI,MAAM,GAAoB,IAAI,CAAC;QACnC,IAAI,IAAI,GAAW,CAAC,CAAC;QACrB,IAAI,KAAK,GAAW,CAAC,CAAC;QACtB,IAAI,KAAK,GAAW,CAAC,CAAC,CAAC;QACvB,IAAI,MAAM,GAAW,CAAC,CAAC,CAAC;QACxB,IAAI,QAAQ,GAAW,CAAC,CAAC;QACzB,IAAI,YAAY,GAAW,CAAC,CAAC;QAC7B,IAAI,GAAG,GAAY,IAAI,CAAC;QACxB,IAAI,KAAK,GAAY,CAAC,OAAO,CAAC,KAAK,GAAG,WAAW,CAAC,aAAa,MAAM,CAAC,CAAC;QACvE,IAAI,QAAQ,GAAW,CAAC,CAAC;QACzB,IAAI,YAAY,GAAW,CAAC,CAAC;QAC7B,IAAI,UAAU,GAAW,CAAC,CAAC;QAC3B,IAAI,KAAK,GAAmB,IAAI,CAAC;QACjC,IAAI,UAAU,GAAqB,IAAI,CAAC;QACxC,KAAK,IAAI,CAAC,GAAW,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,EAAE;YACxD,IAAI,QAAQ,GAAkB,IAAI,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;YACtD,KAAK,oBAAoB,KAAK,QAAQ,GAAG;gBACrC,IAAI,CAAC,OAAO,CAAC,KAAK,GAAG,WAAW,CAAC,UAAU,MAAM,CAAC,EAAE;oBAChD,QAAQ,GAAG,CAAC,GAAG,CAAC,CAAC;oBACjB,KAAK,IAAI,CAAC,GAAW,IAAI,CAAC,iBAAiB,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAW,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,EAAE;wBAC3E,IAAI,KAAK,GAAW,IAAI,CAAC,iBAAiB,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC;wBACnD,IAAI,MAAM,CAAC,KAAK,CAAC,IAAI,IAAI,EAAE;4BACvB,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC,MAAM,IAAI,KAAK,CAAC,KAAK,CAAC;yBACvD;wBACD,KAAK,IAAI,IAAI,CAAC,iBAAiB,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC;wBACxC,IAAI,MAAM,CAAC,KAAK,CAAC,IAAI,IAAI,EAAE;4BACvB,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC,MAAM,IAAI,KAAK,CAAC,KAAK,CAAC;yBACvD;wBACD,CAAC,IAAI,EAAE,CAAC;qBACX;iBACJ;aACJ;iBAAM,KAAK,wBAAwB,KAAK,QAAQ,GAAG;gBAChD,YAAY,GAAG,CAAC,GAAG,CAAC,CAAC;aACxB;iBAAM,KAAK,iBAAiB,KAAK,QAAQ,GAAG;gBACzC,IAAI,CAAC,OAAO,CAAC,KAAK,GAAG,WAAW,CAAC,UAAU,MAAM,CAAC,EAAE;oBAChD,KAAK,IAAI,CAAC,GAAW,IAAI,CAAC,iBAAiB,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAW,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,EAAE;wBAC3E,IAAI,KAAK,GAAW,IAAI,CAAC,iBAAiB,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC;wBACnD,IAAI,MAAM,CAAC,KAAK,CAAC,IAAI,IAAI,EAAE;4BACvB,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC,MAAM,IAAI,KAAK,CAAC,KAAK,CAAC;yBACvD;wBACD,IAAI,CAAC,GAAU,MAAM,CAAC,KAAK,CAAC,CAAC;wBAC7B,QAAQ,CAAC,CAAC,IAAI,GAAG,CAAC,GAAG;4BACjB,IAAI,CAAC,CAAC,IAAI,IAAI,IAAI,EAAE;gCAChB,CAAC,CAAC,IAAI,GAAG,IAAI,KAAK,EAAE,CAAC;6BACxB;4BACD,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;yBACd;wBACD,CAAC,CAAC,IAAI,GAAG,IAAI,CAAC,iBAAiB,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC;wBACxC,CAAC,IAAI,CAAC,CAAC;qBACV;iBACJ;aACJ;iBAAM,IAAI,WAAW,CAAC,WAAW,KAAK,+BAA+B,KAAK,QAAQ,CAAC,EAAE;gBAClF,KAAK,GAAG,IAAI,CAAC,mBAAmB,CAAC,EAAE,EAAE,OAAO,EAAE,CAAC,GAAG,CAAC,EAAE,IAAI,CAAC,CAAC;gBAC3D,KAAK,GAAG,KAAK,CAAC,MAAM,KAAK,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;aAC1G;iBAAM,IAAI,WAAW,CAAC,WAAW,KAAK,iCAAiC,KAAK,QAAQ,CAAC,EAAE;gBACpF,MAAM,GAAG,IAAI,CAAC,mBAAmB,CAAC,EAAE,EAAE,OAAO,EAAE,CAAC,GAAG,CAAC,EAAE,KAAK,CAAC,CAAC;gBAC7D,MAAM,GAAG,MAAM,CAAC,MAAM,KAAK,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;aAC9G;iBAAM,IAAI,WAAW,CAAC,MAAM,KAAK,eAAe,KAAK,QAAQ,CAAC,EAAE;gBAC7D,IAAI,CAAC,OAAO,CAAC,KAAK,GAAG,WAAW,CAAC,WAAW,MAAM,CAAC,EAAE;oBACjD,QAAQ,GAAG,CAAC,GAAG,EAAE,CAAC;oBAClB,YAAY,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBACnC,UAAU,GAAG,IAAI,CAAC,iBAAiB,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;iBAC9C;aACJ;iBAAM,IAAI,WAAW,CAAC,MAAM,KAAK,UAAU,KAAK,QAAQ,CAAC,EAAE;gBACxD,IAAI,CAAC,OAAO,CAAC,KAAK,GAAG,WAAW,CAAC,WAAW,MAAM,CAAC,EAAE;oBACjD,GAAG,GAAG,KAAK,CAAC;oBACZ,QAAQ,GAAG,CAAC,GAAG,EAAE,CAAC;oBAClB,YAAY,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBACnC,UAAU,GAAG,IAAI,CAAC,iBAAiB,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;iBAC9C;aACJ;iBAAM;gBACH,KAAK,IAAI,CAAC,GAAW,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,KAAK,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;oBACnD,KAAK,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,KAAK,QAAQ,GAAG;wBACtC,IAAI,IAAI,GAAc,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,GAAG,CAAC,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,SAAS,GAAG,CAAC,EAAE,MAAM,CAAC,CAAC;wBACxG,IAAI,IAAI,IAAI,IAAI,EAAE;4BACd,IAAI,CAAC,IAAI,GAAG,UAAU,CAAC;4BACvB,UAAU,GAAG,IAAI,CAAC;yBACrB;qBACJ;iBACJ;aACJ;YACD,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;SAChC;QACD,CAAC,IAAI,CAAC,CAAC;QACP,IAAI,WAAW,CAAC,MAAM,IAAI,QAAQ,KAAK,CAAC,EAAE;YACtC,KAAK,GAAG,OAAO,CAAC;YAChB,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;YAClB,KAAK,CAAC,IAAI,GAAG,CAAC,CAAC;YACf,KAAK,CAAC,UAAU,GAAG,CAAC,CAAC;YACrB,KAAK,CAAC,SAAS,GAAG,CAAC,CAAC;YACpB,KAAK,CAAC,UAAU,GAAG,CAAC,CAAC;YACrB,KAAK,CAAC,KAAK,GAAG,IAAI,KAAK,CAAC,SAAS,CAAC,CAAC;YACnC,KAAK,CAAC,KAAK,GAAG,IAAI,KAAK,CAAC,QAAQ,CAAC,CAAC;YAClC,IAAI,KAAK,EAAE;gBACP,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC;aAClC;YACD,KAAK,IAAI,CAAC,GAAW,QAAQ,EAAE,CAAC,GAAG,QAAQ,GAAG,YAAY,GAAG,CAAC,EAAE,EAAE,CAAC,EAAE;gBACjE,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE;oBACZ,IAAI,CAAC,GAAW,IAAI,CAAC,iBAAiB,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBAC9C,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,UAAU,EAAE;wBAC1B,IAAI,CAAC,CAAC,CAAC,SAAS,GAAG,CAAC,CAAC,GAAG,GAAG,MAAM,OAAO,CAAC,GAAG,EAAE;4BAC1C,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC;yBAC7B;qBACJ;iBACJ;aACJ;SACJ;QACD,IAAI,CAAC,OAAO,CAAC,KAAK,GAAG,WAAW,CAAC,gBAAgB,MAAM,CAAC,EAAE;YACtD,EAAE,CAAC,UAAU,CAAC,OAAO,CAAC,KAAK,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC;SAC1D;QACD,IAAI,WAAW,GAAW,CAAC,OAAO,CAAC,KAAK,GAAG,WAAW,CAAC,gBAAgB,MAAM,CAAC,GAAG,CAAC,EAAE,GAAG,CAAC,CAAC;QACzF,CAAC,GAAG,SAAS,CAAC;QACd,QAAQ,CAAC,GAAG,OAAO,GAAG;YAClB,IAAI,MAAM,GAAW,CAAC,GAAG,SAAS,CAAC;YACnC,IAAI,CAAC,GAAU,MAAM,CAAC,MAAM,CAAC,CAAC;YAC9B,IAAI,CAAC,IAAI,IAAI,EAAE;gBACX,IAAI,IAAI,GAAiB,CAAC,CAAC,IAAI,CAAC;gBAChC,CAAC,CAAC,IAAI,GAAG,IAAI,CAAC;gBACd,EAAE,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;gBACjB,IAAI,CAAC,OAAO,CAAC,KAAK,GAAG,WAAW,CAAC,UAAU,MAAM,CAAC,IAAI,CAAC,CAAC,IAAI,GAAG,CAAC,EAAE;oBAC9D,EAAE,CAAC,eAAe,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;oBAC9B,QAAQ,IAAI,IAAI,IAAI,GAAG;wBACnB,EAAE,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;wBACjC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;qBACpB;iBACJ;aACJ;YACD,QAAQ,WAAW,CAAC,MAAM,IAAI,KAAK,IAAI,IAAI,KAAK,KAAK,CAAC,MAAM,KAAK,MAAM,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,GAAG;gBAC9F,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,CAAC,EAAE;oBACrB,IAAI,CAAC,GAAG,IAAI,KAAK,EAAE;wBACf,EAAE,CAAC,UAAU,CAAC,OAAO,CAAC,KAAK,EAAE,KAAK,CAAC,UAAU,EAAE,KAAK,CAAC,KAAK,EAAE,KAAK,CAAC,UAAU,EAAE,KAAK,CAAC,KAAK,CAAC,CAAC;qBAC9F;yBAAM;wBACH,EAAE,CAAC,UAAU,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,SAAS,EAAE,KAAK,CAAC,KAAK,EAAE,KAAK,CAAC,UAAU,EAAE,KAAK,CAAC,KAAK,CAAC,CAAC;qBAC1F;iBACJ;gBACD,IAAI,UAAU,GAAG,CAAC,EAAE;oBAChB,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,GAAG,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;oBACvD,EAAE,UAAU,CAAC;iBAChB;qBAAM;oBACH,KAAK,GAAG,IAAI,CAAC;iBAChB;aACJ;YACD,IAAI,MAAM,GAAW,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;YAChC,SAAS,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC;gBAC7B,KAAK,WAAW,CAAC,UAAU;oBACvB,EAAE,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;oBACrB,CAAC,IAAI,CAAC,CAAC;oBACP,MAAM;gBACV,KAAK,WAAW,CAAC,YAAY;oBACzB,IAAI,MAAM,GAAG,OAAO,CAAC,MAAM,EAAE;wBACzB,MAAM,IAAI,EAAE,CAAC;wBACb,EAAE,CAAC,YAAY,CAAC,OAAO,CAAC,MAAM,IAAI,MAAM,IAAI,CAAC,CAAC,EAAE,MAAM,GAAG,CAAC,CAAC,CAAC;qBAC/D;yBAAM;wBACH,MAAM,IAAI,EAAE,CAAC;wBACb,EAAE,CAAC,YAAY,CAAC,OAAO,CAAC,KAAK,IAAI,MAAM,IAAI,CAAC,CAAC,EAAE,MAAM,GAAG,CAAC,CAAC,CAAC;qBAC9D;oBACD,CAAC,IAAI,CAAC,CAAC;oBACP,MAAM;gBACV,KAAK,WAAW,CAAC,UAAU;oBACvB,EAAE,CAAC,aAAa,CAAC,MAAM,EAAE,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;oBACjE,CAAC,IAAI,CAAC,CAAC;oBACP,MAAM;gBACV,KAAK,WAAW,CAAC,WAAW;oBACxB,EAAE,CAAC,aAAa,CAAC,MAAM,GAAG,WAAW,EAAE,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;oBAC7E,CAAC,IAAI,CAAC,CAAC;oBACP,MAAM;gBACV,KAAK,WAAW,CAAC,cAAc;oBAC3B;wBACI,MAAM,GAAG,MAAM,GAAG,GAAG,GAAG,MAAM,GAAG,EAAE,GAAG,MAAM,GAAG,EAAE,CAAC;wBAClD,IAAI,MAAM,GAAU,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC,iBAAiB,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;wBACnE,IAAI,MAAM,KAAK,OAAO,CAAC,IAAI,IAAI,MAAM,KAAK,OAAO,CAAC,GAAG,EAAE;4BACnD,EAAE,CAAC,aAAa,CAAC,MAAM,GAAG,EAAE,EAAE,MAAM,CAAC,CAAC;yBACzC;6BAAM;4BACH,MAAM,GAAG,MAAM,IAAI,GAAG,GAAG,CAAC,CAAC,MAAM,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,MAAM,GAAG,CAAC,CAAC;4BAC7D,IAAI,KAAK,GAAU,IAAI,KAAK,EAAE,CAAC;4BAC/B,EAAE,CAAC,aAAa,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;4BAChC,EAAE,CAAC,aAAa,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;4BAC9B,EAAE,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;4BACrB,IAAI,WAAW,CAAC,MAAM,IAAI,QAAQ,KAAK,CAAC,KAAK,KAAK,IAAI,IAAI,IAAI,KAAK,CAAC,MAAM,KAAK,MAAM,GAAG,CAAC,CAAC,EAAE;gCACxF,EAAE,CAAC,UAAU,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC;6BACzD;yBACJ;wBACD,CAAC,IAAI,CAAC,CAAC;wBACP,MAAM;qBACT;gBACL,KAAK,WAAW,CAAC,SAAS;oBACtB,MAAM,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC;oBACxB,IAAI,MAAM,KAAK,OAAO,CAAC,IAAI,EAAE;wBACzB,EAAE,CAAC,aAAa,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;wBACvE,CAAC,IAAI,CAAC,CAAC;qBACV;yBAAM;wBACH,EAAE,CAAC,YAAY,CAAC,MAAM,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;wBACvD,CAAC,IAAI,CAAC,CAAC;qBACV;oBACD,MAAM;gBACV,KAAK,WAAW,CAAC,SAAS;oBACtB;wBACI,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,MAAM,GAAG,CAAC,CAAC,CAAC;wBACzB,IAAI,KAAK,GAAW,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;wBAC7C,IAAI,GAAG,GAAW,IAAI,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;wBACtC,IAAI,GAAG,GAAW,IAAI,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;wBACtC,IAAI,KAAK,GAAY,IAAI,KAAK,CAAC,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC;wBAC9C,CAAC,IAAI,EAAE,CAAC;wBACR,KAAK,IAAI,CAAC,GAAW,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;4BAC3C,KAAK,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;4BAC5C,CAAC,IAAI,CAAC,CAAC;yBACV;wBACD,EAAE,CAAC,oBAAoB,CAAC,GAAG,EAAE,GAAG,EAAE,MAAM,CAAC,KAAK,CAAC,EAAE,GAAG,KAAK,CAAC,CAAC;wBAC3D,MAAM;qBACT;gBACL,KAAK,WAAW,CAAC,SAAS;oBACtB;wBACI,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,MAAM,GAAG,CAAC,CAAC,CAAC;wBACzB,IAAI,KAAK,GAAW,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;wBAC7C,IAAI,GAAG,GAAW,IAAI,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;wBACtC,IAAI,IAAI,GAAa,IAAI,KAAK,CAAC,GAAG,CAAC,CAAC;wBACpC,IAAI,MAAM,GAAY,IAAI,KAAK,CAAC,GAAG,CAAC,CAAC;wBACrC,CAAC,IAAI,CAAC,CAAC;wBACP,KAAK,IAAI,CAAC,GAAW,CAAC,EAAE,CAAC,GAAG,GAAG,EAAE,EAAE,CAAC,EAAE;4BAClC,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;4BAC1B,MAAM,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;4BACjD,CAAC,IAAI,CAAC,CAAC;yBACV;wBACD,EAAE,CAAC,qBAAqB,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC;wBACtD,MAAM;qBACT;gBACL,KAAK,WAAW,CAAC,QAAQ;oBACrB,EAAE,CAAC,YAAY,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC;oBACxC,CAAC,IAAI,CAAC,CAAC;oBACP,MAAM;gBACV,KAAK,WAAW,CAAC,UAAU;oBACvB,EAAE,CAAC,YAAY,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;oBAClC,CAAC,IAAI,CAAC,CAAC;oBACP,MAAM;gBACV,KAAK,WAAW,CAAC,UAAU;oBACvB,EAAE,CAAC,YAAY,CAAC,MAAM,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;oBAC/C,CAAC,IAAI,CAAC,CAAC;oBACP,MAAM;gBACV,KAAK,WAAW,CAAC,QAAQ;oBACrB,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC;oBACnD,CAAC,IAAI,CAAC,CAAC;oBACP,MAAM;gBACV,KAAK,WAAW,CAAC,SAAS;oBACtB,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;oBAClE,CAAC,IAAI,CAAC,CAAC;oBACP,MAAM;gBACV,KAAK,WAAW,CAAC,gBAAgB,CAAC;gBAClC,KAAK,WAAW,CAAC,YAAY;oBACzB;wBACI,IAAI,OAAO,GAAW,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;wBAChE,IAAI,GAAG,GAAY,CAAC,CAAC,OAAO,GAAG,CAAC,CAAC,KAAK,WAAW,CAAC,KAAK,CAAC;wBACxD,IAAI,MAAM,GAAW,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;wBAChD,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,iBAAiB,CAAC,OAAO,GAAG,CAAC,CAAC,CAAC,CAAC;wBAC1D,IAAI,KAAK,GAAkB,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;wBACrD,IAAI,KAAK,GAAkB,IAAI,CAAC,QAAQ,CAAC,OAAO,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;wBACzD,IAAI,MAAM,GAAG,OAAO,CAAC,aAAa,EAAE;4BAChC,EAAE,CAAC,cAAc,CAAC,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;yBACnD;6BAAM;4BACH,EAAE,CAAC,eAAe,CAAC,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,GAAG,CAAC,CAAC;yBACzD;wBACD,IAAI,MAAM,KAAK,OAAO,CAAC,eAAe,EAAE;4BACpC,CAAC,IAAI,CAAC,CAAC;yBACV;6BAAM;4BACH,CAAC,IAAI,CAAC,CAAC;yBACV;wBACD,MAAM;qBACT;gBACL,KAAK,WAAW,CAAC,aAAa;oBAC1B;wBACI,IAAI,OAAO,GAAW,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;wBAChE,IAAI,QAAQ,GAAW,OAAO,CAAC,gBAAgB,CAAC,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC,CAAC;wBACjF,IAAI,GAAG,GAAmB,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;wBAC9E,IAAI,WAAW,GAAW,IAAI,CAAC,iBAAiB,CAAC,QAAQ,GAAG,CAAC,CAAC,CAAC;wBAC/D,IAAI,OAAO,GAAU,IAAI,KAAK,CAAC,WAAW,CAAC,CAAC;wBAC5C,QAAQ,IAAI,CAAC,CAAC;wBACd,KAAK,IAAI,CAAC,GAAW,CAAC,EAAE,CAAC,GAAG,WAAW,EAAE,CAAC,EAAE,EAAE;4BAC1C,OAAO,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;4BACjE,QAAQ,IAAI,CAAC,CAAC;yBACjB;wBACD,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,iBAAiB,CAAC,OAAO,GAAG,CAAC,CAAC,CAAC,CAAC;wBAC1D,IAAI,KAAK,GAAkB,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;wBACrD,IAAI,KAAK,GAAkB,IAAI,CAAC,QAAQ,CAAC,OAAO,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;wBACzD,EAAE,CAAC,sBAAsB,CAAC,KAAK,EAAE,KAAK,EAAE,GAAG,EAAE,GAAG,OAAO,CAAC,CAAC;wBACzD,CAAC,IAAI,CAAC,CAAC;wBACP,MAAM;qBACT;gBACL,KAAK,WAAW,CAAC,SAAS;oBACtB,EAAE,CAAC,aAAa,CAAC,MAAM,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;oBACnD,CAAC,IAAI,CAAC,CAAC;oBACP,MAAM;gBACV,KAAK,WAAW,CAAC,SAAS;oBACtB,EAAE,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;oBAC3C,CAAC,IAAI,CAAC,CAAC;oBACP,MAAM;gBACV;oBACI,EAAE,CAAC,uBAAuB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC;oBACrE,CAAC,IAAI,CAAC,CAAC;oBACP,MAAM;aACb;YACD,QAAQ,KAAK,IAAI,IAAI,IAAI,IAAI,GAAG,KAAK,CAAC,MAAM,IAAI,KAAK,IAAI,MAAM,GAAG;gBAC9D,IAAI,KAAK,KAAK,MAAM,EAAE;oBAClB,IAAI,CAAC,GAAW,IAAI,CAAC,oBAAoB,CAAC,OAAO,EAAE,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;oBAChE,IAAI,CAAC,oBAAoB,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,IAAI,EAAE,EAAE,CAAC,mBAAmB,CAAC,OAAO,CAAC,OAAO,EAAE,OAAO,CAAC,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;iBACnI;gBACD,KAAK,GAAG,EAAE,IAAI,IAAI,KAAK,CAAC,MAAM,IAAI,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;aACpH;YACD,QAAQ,MAAM,IAAI,IAAI,IAAI,KAAK,GAAG,MAAM,CAAC,MAAM,IAAI,MAAM,IAAI,MAAM,GAAG;gBAClE,IAAI,MAAM,KAAK,MAAM,EAAE;oBACnB,IAAI,CAAC,GAAW,IAAI,CAAC,oBAAoB,CAAC,OAAO,EAAE,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;oBAClE,IAAI,CAAC,oBAAoB,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,IAAI,EAAE,EAAE,CAAC,mBAAmB,CAAC,OAAO,CAAC,OAAO,EAAE,OAAO,CAAC,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC;iBACpI;gBACD,MAAM,GAAG,EAAE,KAAK,IAAI,MAAM,CAAC,MAAM,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;aAC3H;SACJ;QACD,IAAI,MAAM,CAAC,UAAU,CAAC,IAAI,IAAI,EAAE;YAC5B,EAAE,CAAC,UAAU,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC;SACrC;QACD,IAAI,CAAC,OAAO,CAAC,KAAK,GAAG,WAAW,CAAC,UAAU,MAAM,CAAC,IAAI,QAAQ,KAAK,CAAC,EAAE;YAClE,IAAI,SAAS,GAAoB,IAAI,CAAC;YACtC,IAAI,YAAY,KAAK,CAAC,EAAE;gBACpB,CAAC,GAAG,YAAY,GAAG,CAAC,CAAC;gBACrB,SAAS,GAAG,IAAI,KAAK,CAAC,IAAI,CAAC,iBAAiB,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,CAAC;gBAChE,KAAK,IAAI,CAAC,GAAW,SAAS,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,GAAG;oBAC3C,SAAS,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;oBACvB,SAAS,CAAC,EAAE,CAAC,CAAC,GAAG,IAAI,CAAC,iBAAiB,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBAC/C,SAAS,CAAC,EAAE,CAAC,CAAC,GAAG,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC;oBAC3C,CAAC,IAAI,EAAE,CAAC;iBACX;aACJ;YACD,CAAC,GAAG,QAAQ,GAAG,CAAC,CAAC;YACjB,KAAK,IAAI,CAAC,GAAW,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,EAAE;gBAC/D,IAAI,KAAK,GAAW,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC;gBAC9C,IAAI,MAAM,GAAW,IAAI,CAAC,iBAAiB,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;gBACnD,IAAI,KAAK,GAAW,IAAI,CAAC,iBAAiB,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;gBAClD,IAAI,UAAU,GAAkB,IAAI,CAAC;gBACrC,IAAI,SAAS,IAAI,IAAI,EAAE;oBACnB,KAAK,IAAI,CAAC,GAAW,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE;wBAClD,IAAI,SAAS,CAAC,CAAC,CAAC,KAAK,KAAK,IAAI,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,KAAK,KAAK,EAAE;4BACtD,UAAU,GAAG,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;4BAChD,MAAM;yBACT;qBACJ;iBACJ;gBACD,EAAE,CAAC,kBAAkB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,EAAE,UAAU,EAAE,MAAM,CAAC,KAAK,CAAC,EAAE,MAAM,CAAC,KAAK,GAAG,MAAM,CAAC,EAAE,KAAK,CAAC,CAAC;gBAClI,CAAC,IAAI,EAAE,CAAC;aACX;SACJ;QACD,IAAI,KAAK,IAAI,IAAI,EAAE;YACf,KAAK,IAAI,CAAC,GAAW,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;gBAC3C,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC,EAAE;oBAC9C,IAAI,CAAC,GAAW,IAAI,CAAC,oBAAoB,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;oBAC7D,CAAC,GAAG,IAAI,CAAC,oBAAoB,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,IAAI,EAAE,EAAE,CAAC,4BAA4B,CAAC,OAAO,CAAC,OAAO,EAAE,OAAO,CAAC,QAAQ,EAAE,OAAO,CAAC,KAAK,EAAE,OAAO,CAAC,GAAG,EAAE,OAAO,CAAC,KAAK,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;iBAC3L;aACJ;SACJ;QACD,IAAI,MAAM,IAAI,IAAI,EAAE;YAChB,KAAK,IAAI,CAAC,GAAW,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;gBAC5C,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC,EAAE;oBAC/C,IAAI,CAAC,GAAW,IAAI,CAAC,oBAAoB,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;oBAC9D,CAAC,GAAG,IAAI,CAAC,oBAAoB,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,IAAI,EAAE,EAAE,CAAC,4BAA4B,CAAC,OAAO,CAAC,OAAO,EAAE,OAAO,CAAC,QAAQ,EAAE,OAAO,CAAC,KAAK,EAAE,OAAO,CAAC,GAAG,EAAE,OAAO,CAAC,KAAK,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC;iBAC5L;aACJ;SACJ;QACD,QAAQ,UAAU,IAAI,IAAI,GAAG;YACzB,IAAI,IAAI,GAAqB,UAAU,CAAC,IAAI,CAAC;YAC7C,UAAU,CAAC,IAAI,GAAG,IAAI,CAAC;YACvB,EAAE,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC;YAC9B,UAAU,GAAG,IAAI,CAAC;SACrB;QACD,EAAE,CAAC,SAAS,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC;KACrC;;;;;;;;;;;;;IAcO,mBAAmB,CAAC,EAAiB,EAAE,OAAgB,EAAE,CAAS,EAAE,OAAgB;QACxF,IAAI,CAAC,GAAa,OAAO,CAAC,MAAM,CAAC;QACjC,IAAI,OAAO,GAAa,IAAI,KAAK,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,CAAC;QAC7D,CAAC,IAAI,CAAC,CAAC;QACP,KAAK,IAAI,CAAC,GAAW,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;YAC7C,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;YACf,IAAI,MAAM,GAAW,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;YACrC,SAAS,MAAM,KAAK,EAAE;gBAClB,KAAK,CAAC,CAAC;gBACP,KAAK,CAAC,CAAC;gBACP,KAAK,EAAE;oBACH,CAAC,IAAI,CAAC,CAAC;oBACP,MAAM;gBACV,KAAK,EAAE,CAAC;gBACR,KAAK,EAAE,CAAC;gBACR,KAAK,EAAE;oBACH,CAAC,IAAI,CAAC,CAAC;oBACP,MAAM;gBACV,KAAK,EAAE,CAAC;gBACR,KAAK,EAAE;oBACH,KAAK,IAAI,CAAC,GAAW,IAAI,CAAC,iBAAiB,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,EAAE;wBAC5D,IAAI,KAAK,GAAW,IAAI,CAAC,iBAAiB,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;wBAClD,IAAI,MAAM,GAAW,IAAI,CAAC,iBAAiB,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;wBACnD,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,OAAO,CAAC,MAAM,CAAC,CAAC;wBACtC,IAAI,CAAC,SAAS,CAAC,KAAK,GAAG,MAAM,EAAE,OAAO,CAAC,MAAM,CAAC,CAAC;wBAC/C,CAAC,IAAI,CAAC,CAAC;qBACV;oBACD,CAAC,IAAI,CAAC,CAAC;oBACP,MAAM;gBACV,KAAK,EAAE,CAAC;gBACR,KAAK,EAAE,CAAC;gBACR,KAAK,EAAE,CAAC;gBACR,KAAK,EAAE,CAAC;gBACR,KAAK,EAAE;oBACH,CAAC,IAAI,CAAC,CAAC;oBACP,MAAM;gBACV;oBACI,CAAC,IAAI,CAAC,CAAC;oBACP,MAAM;aACb;YACD,IAAI,UAAU,GAAW,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;YAC1C,IAAI,CAAC,MAAM,KAAK,EAAE,MAAM,EAAE,EAAE;gBACxB,IAAI,IAAI,GAAoB,UAAU,KAAK,CAAC,GAAG,IAAI,GAAG,IAAI,QAAQ,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;gBAChF,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,UAAU,CAAC;gBACxB,CAAC,GAAG,IAAI,CAAC,oBAAoB,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,IAAI,EAAE,EAAE,CAAC,uBAAuB,CAAC,MAAM,EAAE,IAAI,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC;aACzH;iBAAM;gBACH,CAAC,GAAG,IAAI,CAAC,oBAAoB,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;aACxE;SACJ;QACD,OAAO,OAAO,CAAC;KAClB;;;;;;;;;;;;;IAcO,oBAAoB,CAAC,OAAgB,EAAE,CAAS;QACpD,IAAI,MAAM,GAAW,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QACrC,SAAS,MAAM,KAAK,EAAE;YAClB,KAAK,CAAC,CAAC;YACP,KAAK,CAAC,CAAC;YACP,KAAK,EAAE;gBACH,MAAM,IAAI,CAAC,KAAK,CAAC;gBACjB,CAAC,IAAI,CAAC,CAAC;gBACP,MAAM;YACV,KAAK,EAAE,CAAC;YACR,KAAK,EAAE,CAAC;YACR,KAAK,EAAE;gBACH,MAAM,IAAI,CAAC,QAAQ,CAAC;gBACpB,CAAC,IAAI,CAAC,CAAC;gBACP,MAAM;YACV,KAAK,EAAE,CAAC;YACR,KAAK,EAAE;gBACH;oBACI,MAAM,IAAI,CAAC,QAAQ,CAAC;oBACpB,IAAI,CAAC,GAAW,IAAI,CAAC,iBAAiB,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBAC9C,OAAO,CAAC,KAAK,GAAG,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC;oBAC7B,OAAO,CAAC,GAAG,GAAG,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC;oBAC3B,OAAO,CAAC,KAAK,GAAG,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC;oBAC7B,CAAC,IAAI,CAAC,CAAC;oBACP,KAAK,IAAI,CAAC,GAAW,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,EAAE;wBAChC,IAAI,KAAK,GAAW,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC;wBAC9C,IAAI,MAAM,GAAW,IAAI,CAAC,iBAAiB,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;wBACnD,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,OAAO,CAAC,MAAM,CAAC,CAAC;wBACzD,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,GAAG,MAAM,EAAE,OAAO,CAAC,MAAM,CAAC,CAAC;wBAChE,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,iBAAiB,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;wBACjD,CAAC,IAAI,CAAC,CAAC;qBACV;oBACD,MAAM;iBACT;YACL,KAAK,EAAE,CAAC;YACR,KAAK,EAAE,CAAC;YACR,KAAK,EAAE,CAAC;YACR,KAAK,EAAE,CAAC;YACR,KAAK,EAAE;gBACH,MAAM,IAAI,CAAC,QAAQ,CAAC;gBACpB,CAAC,IAAI,CAAC,CAAC;gBACP,MAAM;YACV;gBACI,MAAM,IAAI,CAAC,MAAM,KAAK,EAAE,IAAI,EAAE,GAAG,CAAC,GAAG,GAAG,CAAC,QAAQ,CAAC;gBAClD,CAAC,IAAI,CAAC,CAAC;gBACP,MAAM;SACb;QACD,IAAI,UAAU,GAAW,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;QAC1C,OAAO,CAAC,OAAO,GAAG,MAAM,CAAC;QACzB,OAAO,CAAC,QAAQ,GAAG,UAAU,KAAK,CAAC,GAAG,IAAI,GAAG,IAAI,QAAQ,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;QACvE,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,UAAU,CAAC;KACjC;;;;;;;;;;IAWO,wBAAwB,CAAC,EAAiB,EAAE,OAAgB,EAAE,CAAS,EAAE,OAAgB;QAC7F,IAAI,CAAS,CAAC;QACd,IAAI,CAAC,GAAW,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC;QACpC,IAAI,UAAU,GAAW,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC;QACxE,IAAI,EAAE,GAA6B,IAAI,CAAC;QACxC,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,EAAE,EAAE,CAAC,EAAE;YAC7B,EAAE,GAAG,EAAE,CAAC,wBAAwB,CAAC,CAAC,EAAE,uBAAuB,EAAE,KAAK,CAAC,CAAC;YACpE,IAAI,EAAE,IAAI,IAAI,EAAE;gBACZ,EAAE,CAAC,QAAQ,EAAE,CAAC;aACjB;SACJ;QACD,IAAI,CAAC,GAAa,OAAO,CAAC,MAAM,CAAC;QACjC,OAAO,CAAC,GAAG,CAAC,GAAG,UAAU,EAAE,EAAE,CAAC,EAAE;YAC5B,IAAI,CAAC,GAAW,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC;YAC1C,CAAC,IAAI,CAAC,CAAC;YACP,OAAO,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,EAAE;gBACf,EAAE,GAAG,EAAE,CAAC,wBAAwB,CAAC,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC;gBAClE,CAAC,GAAG,IAAI,CAAC,oBAAoB,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC;aACrD;SACJ;KACJ;;;;;;;;;;;;;;IAeO,oBAAoB,CAAC,CAAS,EAAE,GAAa,EAAE,KAAc,EAAE,EAA4B;QAC/F,IAAI,CAAC,GAAW,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC;QAC1C,CAAC,IAAI,CAAC,CAAC;QACP,IAAI,KAAK,EAAE;YACP,OAAO,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,EAAE;gBACf,CAAC,GAAG,IAAI,CAAC,mBAAmB,CAAC,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,EAAE,CAAC,CAAC;aACvE;SACJ;aAAM;YACH,OAAO,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,EAAE;gBACf,CAAC,GAAG,IAAI,CAAC,mBAAmB,CAAC,CAAC,EAAE,GAAG,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC;aAClD;SACJ;QACD,IAAI,EAAE,IAAI,IAAI,EAAE;YACZ,EAAE,CAAC,QAAQ,EAAE,CAAC;SACjB;QACD,OAAO,CAAC,CAAC;KACZ;;;;;;;;;;;;;IAcO,mBAAmB,CAAC,CAAS,EAAE,GAAa,EAAE,IAAmB,EAAE,EAA4B;QACnG,IAAI,GAAG,IAAI,aAAJ,IAAI,cAAJ,IAAI,GAAI,EAAE,CAAC;QAClB,IAAI,CAAS,CAAC;QACd,IAAI,EAAE,IAAI,IAAI,EAAE;YACZ,SAAS,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG;gBACtB,KAAK,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC;oBACpB,OAAO,CAAC,GAAG,CAAC,CAAC;gBACjB,KAAK,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC;oBACpB,OAAO,IAAI,CAAC,oBAAoB,CAAC,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;gBAC7D,KAAK,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC;oBACpB,OAAO,IAAI,CAAC,oBAAoB,CAAC,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;gBAC9D;oBACI,OAAO,CAAC,GAAG,CAAC,CAAC;aACpB;SACJ;QACD,SAAS,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,GAAG;YACxB,KAAK,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC,CAAC;YACzB,KAAK,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC,CAAC;YACzB,KAAK,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC,CAAC;YACzB,KAAK,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC;gBACpB,EAAE,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;gBAC/D,CAAC,IAAI,CAAC,CAAC;gBACP,MAAM;YACV,KAAK,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC;gBACpB,EAAE,CAAC,KAAK,CAAC,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC;gBAC1E,CAAC,IAAI,CAAC,CAAC;gBACP,MAAM;YACV,KAAK,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC;gBACpB,EAAE,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,KAAK,GAAG,IAAI,CAAC,CAAC;gBACzF,CAAC,IAAI,CAAC,CAAC;gBACP,MAAM;YACV,KAAK,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC;gBACpB,EAAE,CAAC,KAAK,CAAC,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC;gBAC1E,CAAC,IAAI,CAAC,CAAC;gBACP,MAAM;YACV,KAAK,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC;gBACpB,EAAE,CAAC,KAAK,CAAC,IAAI,EAAE,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBACzF,CAAC,IAAI,CAAC,CAAC;gBACP,MAAM;YACV,KAAK,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC;gBACpB,EAAE,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;gBACtC,CAAC,IAAI,CAAC,CAAC;gBACP,MAAM;YACV,KAAK,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC;gBACpB,EAAE,CAAC,SAAS,CAAC,IAAI,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;gBACrE,CAAC,IAAI,CAAC,CAAC;gBACP,MAAM;YACV,KAAK,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC;gBACpB,EAAE,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;gBACpD,CAAC,IAAI,CAAC,CAAC;gBACP,MAAM;YACV,KAAK,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC;gBACpB,CAAC,GAAG,IAAI,CAAC,oBAAoB,CAAC,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,IAAI,EAAE,EAAE,CAAC,eAAe,CAAC,IAAI,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;gBACjG,MAAM;YACV,KAAK,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC;gBACpB,IAAI,IAAI,GAAW,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC;gBAC7C,CAAC,IAAI,CAAC,CAAC;gBACP,IAAI,IAAI,KAAK,CAAC,EAAE;oBACZ,OAAO,IAAI,CAAC,oBAAoB,CAAC,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,KAAK,EAAE,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC;iBAC5E;gBACD,SAAS,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,GAAG;oBACxB,KAAK,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC;wBACpB,IAAI,EAAE,GAAa,IAAI,KAAK,CAAC,IAAI,CAAC,CAAC;wBACnC,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,EAAE,CAAC,EAAE,EAAE;4BACvB,EAAE,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;4BAClE,CAAC,IAAI,CAAC,CAAC;yBACV;wBACD,EAAE,CAAC,KAAK,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;wBACnB,EAAE,CAAC,CAAC;wBACJ,MAAM;oBACV,KAAK,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC;wBACpB,IAAI,EAAE,GAAc,IAAI,KAAK,CAAC,IAAI,CAAC,CAAC;wBACpC,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,EAAE,CAAC,EAAE,EAAE;4BACvB,EAAE,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;4BAClE,CAAC,IAAI,CAAC,CAAC;yBACV;wBACD,EAAE,CAAC,KAAK,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;wBACnB,EAAE,CAAC,CAAC;wBACJ,MAAM;oBACV,KAAK,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC;wBACpB,IAAI,EAAE,GAAa,IAAI,KAAK,CAAC,IAAI,CAAC,CAAC;wBACnC,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,EAAE,CAAC,EAAE,EAAE;4BACvB,EAAE,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;4BAClE,CAAC,IAAI,CAAC,CAAC;yBACV;wBACD,EAAE,CAAC,KAAK,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;wBACnB,EAAE,CAAC,CAAC;wBACJ,MAAM;oBACV,KAAK,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC;wBACpB,IAAI,EAAE,GAAa,IAAI,KAAK,CAAC,IAAI,CAAC,CAAC;wBACnC,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,EAAE,CAAC,EAAE,EAAE;4BACvB,EAAE,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;4BACjF,CAAC,IAAI,CAAC,CAAC;yBACV;wBACD,EAAE,CAAC,KAAK,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;wBACnB,EAAE,CAAC,CAAC;wBACJ,MAAM;oBACV,KAAK,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC;wBACpB,IAAI,EAAE,GAAa,IAAI,KAAK,CAAC,IAAI,CAAC,CAAC;wBACnC,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,EAAE,CAAC,EAAE,EAAE;4BACvB,EAAE,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;4BAC5D,CAAC,IAAI,CAAC,CAAC;yBACV;wBACD,EAAE,CAAC,KAAK,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;wBACnB,EAAE,CAAC,CAAC;wBACJ,MAAM;oBACV,KAAK,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC;wBACpB,IAAI,EAAE,GAAW,IAAI,KAAK,CAAC,IAAI,CAAC,CAAC;wBACjC,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,EAAE,CAAC,EAAE,EAAE;4BACvB,EAAE,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;4BAC7D,CAAC,IAAI,CAAC,CAAC;yBACV;wBACD,EAAE,CAAC,KAAK,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;wBACnB,EAAE,CAAC,CAAC;wBACJ,MAAM;oBACV,KAAK,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC;wBACpB,IAAI,EAAE,GAAa,IAAI,KAAK,CAAC,IAAI,CAAC,CAAC;wBACnC,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,EAAE,CAAC,EAAE,EAAE;4BACvB,EAAE,CAAC,CAAC,CAAC,GAAG,cAAc,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;4BAC5E,CAAC,IAAI,CAAC,CAAC;yBACV;wBACD,EAAE,CAAC,KAAK,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;wBACnB,EAAE,CAAC,CAAC;wBACJ,MAAM;oBACV,KAAK,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC;wBACpB,IAAI,EAAE,GAAa,IAAI,KAAK,CAAC,IAAI,CAAC,CAAC;wBACnC,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,EAAE,CAAC,EAAE,EAAE;4BACvB,EAAE,CAAC,CAAC,CAAC,GAAG,gBAAgB,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;4BAC/E,CAAC,IAAI,CAAC,CAAC;yBACV;wBACD,EAAE,CAAC,KAAK,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;wBACnB,EAAE,CAAC,CAAC;wBACJ,MAAM;oBACV;wBACI,CAAC,GAAG,IAAI,CAAC,oBAAoB,CAAC,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,KAAK,EAAE,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC;iBAC7E;SACR;QACD,OAAO,CAAC,CAAC;KACZ;;;;;;;IAQO,gBAAgB,CAAC,KAAc;QACnC,IAAI,IAAI,GAAW,KAAK,CAAC,IAAI,CAAC;QAC9B,IAAI,MAAM,GAAU,KAAK,CAAC,KAAK,CAAC;QAChC,IAAI,KAAK,GAAW,CAAC,CAAC;QACtB,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,OAAO,CAAC,UAAU,MAAM,CAAC,EAAE;YAC3C,KAAK,QAAQ,KAAK,KAAK,CAAC,IAAI,GAAG;gBAC3B,MAAM,CAAC,KAAK,EAAE,CAAC,GAAG,OAAO,CAAC,kBAAkB,CAAC;aAChD;iBAAM;gBACH,MAAM,CAAC,KAAK,EAAE,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE,KAAK,CAAC,MAAM,CAAC,CAAC;aACnE;SACJ;QACD,IAAI,CAAC,GAAW,CAAC,CAAC;QAClB,IAAI,EAAE,QAAQ,IAAI,GAAG;YACjB,IAAI,CAAC,GAAW,CAAC,CAAC;YAClB,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,EAAE,UAAU,CAAC,CAAC,CAAC;gBACrC,KAAK,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC,CAAC;gBACzB,KAAK,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC,CAAC;gBACzB,KAAK,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC,CAAC;gBACzB,KAAK,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC,CAAC;gBACzB,KAAK,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC;oBACpB,MAAM,CAAC,KAAK,EAAE,CAAC,GAAG,OAAO,CAAC,OAAO,CAAC;oBAClC,MAAM;gBACV,KAAK,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC;oBACpB,MAAM,CAAC,KAAK,EAAE,CAAC,GAAG,OAAO,CAAC,KAAK,CAAC;oBAChC,MAAM;gBACV,KAAK,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC;oBACpB,MAAM,CAAC,KAAK,EAAE,CAAC,GAAG,OAAO,CAAC,IAAI,CAAC;oBAC/B,MAAM;gBACV,KAAK,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC;oBACpB,MAAM,CAAC,KAAK,EAAE,CAAC,GAAG,OAAO,CAAC,MAAM,CAAC;oBACjC,MAAM;gBACV,KAAK,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC;oBACpB,QAAQ,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,GAAG,CAAC,GAAG;wBAC/B,EAAE,CAAC,CAAC;qBACP;oBACD,IAAI,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,GAAG,CAAC,EAAE;wBAC1B,EAAE,CAAC,CAAC;wBACJ,QAAQ,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,GAAG,CAAC,GAAG;4BAC/B,EAAE,CAAC,CAAC;yBACP;qBACJ;oBACD,MAAM,CAAC,KAAK,EAAE,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;oBACzC,MAAM;gBACV,KAAK,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC;oBACpB,QAAQ,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,GAAG,CAAC,GAAG;wBAC/B,EAAE,CAAC,CAAC;qBACP;oBACD,MAAM,CAAC,KAAK,EAAE,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;oBAC7C,MAAM;gBACV;oBACI,MAAM,IAAI,CAAC;aAClB;SACJ;QACD,KAAK,CAAC,UAAU,GAAG,KAAK,CAAC;KAC5B;;;;;;;;;;;IAYO,SAAS,CAAC,QAAgB,EAAE,GAAY,EAAE,KAAc,EAAE,KAAc;QAC5E,IAAI,CAAC,GAAa,KAAK,CAAC,MAAM,CAAC;QAC/B,IAAI,MAAM,GAAY,KAAK,CAAC,MAAM,CAAC;QACnC,IAAI,GAAW,CAAC;QAChB,IAAI,KAAa,CAAC;QAClB,IAAI,GAAG,EAAE;YACL,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,GAAG,GAAG,CAAC;SACpC;aAAM;YACH,GAAG,GAAG,YAAY,CAAC,UAAU,CAAC;YAC9B,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;SACrB;QACD,KAAK,CAAC,SAAS,GAAG,CAAC,CAAC;QACpB,IAAI,GAAG,GAAG,YAAY,CAAC,8BAA8B,EAAE;YACnD,KAAK,GAAG,GAAG,CAAC;YACZ,KAAK,CAAC,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC;YAC5B,KAAK,CAAC,UAAU,GAAG,CAAC,CAAC;SACxB;aAAM,IAAI,GAAG,GAAG,YAAY,CAAC,QAAQ,EAAE;YACpC,KAAK,GAAG,GAAG,GAAG,YAAY,CAAC,8BAA8B,CAAC;YAC1D,QAAQ,GAAG,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC,EAAE,QAAQ,EAAE,CAAC,EAAE,MAAM,CAAC,CAAC;YACnE,KAAK,CAAC,IAAI,GAAG,OAAO,CAAC,OAAO,CAAC;YAC7B,KAAK,CAAC,UAAU,GAAG,CAAC,CAAC;SACxB;aAAM;YACH,KAAK,GAAG,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC;YACzC,QAAQ,IAAI,CAAC,CAAC;YACd,IAAI,GAAG,KAAK,YAAY,CAAC,uCAAuC,EAAE;gBAC9D,QAAQ,GAAG,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC,EAAE,QAAQ,EAAE,CAAC,EAAE,MAAM,CAAC,CAAC;gBACnE,KAAK,CAAC,IAAI,GAAG,OAAO,CAAC,OAAO,CAAC;gBAC7B,KAAK,CAAC,UAAU,GAAG,CAAC,CAAC;aACxB;iBAAM,IAAI,GAAG,IAAI,YAAY,CAAC,UAAU,IAAI,GAAG,GAAG,YAAY,CAAC,mBAAmB,EAAE;gBACjF,KAAK,CAAC,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC;gBAC5B,KAAK,CAAC,SAAS,GAAG,YAAY,CAAC,mBAAmB,GAAG,GAAG,CAAC;gBACzD,KAAK,CAAC,UAAU,IAAI,KAAK,CAAC,SAAS,CAAC;gBACpC,KAAK,CAAC,UAAU,GAAG,CAAC,CAAC;aACxB;iBAAM,IAAI,GAAG,KAAK,YAAY,CAAC,mBAAmB,EAAE;gBACjD,KAAK,CAAC,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC;gBAC5B,KAAK,CAAC,UAAU,GAAG,CAAC,CAAC;aACxB;iBAAM,IAAI,GAAG,GAAG,YAAY,CAAC,UAAU,EAAE;gBACtC,IAAI,KAAK,GAAW,KAAK,GAAG,KAAK,CAAC,UAAU,GAAG,CAAC,CAAC;gBACjD,KAAK,IAAI,CAAC,GAAW,GAAG,GAAG,YAAY,CAAC,mBAAmB,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;oBACrE,QAAQ,GAAG,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,KAAK,EAAE,KAAK,EAAE,EAAE,QAAQ,EAAE,CAAC,EAAE,MAAM,CAAC,CAAC;iBAC5E;gBACD,KAAK,CAAC,IAAI,GAAG,OAAO,CAAC,QAAQ,CAAC;gBAC9B,KAAK,CAAC,SAAS,GAAG,GAAG,GAAG,YAAY,CAAC,mBAAmB,CAAC;gBACzD,KAAK,CAAC,UAAU,IAAI,KAAK,CAAC,SAAS,CAAC;gBACpC,KAAK,CAAC,UAAU,GAAG,CAAC,CAAC;aACxB;iBAAM;gBACH,KAAK,CAAC,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC;gBAC5B,IAAI,CAAC,GAAW,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC;gBACjD,QAAQ,IAAI,CAAC,CAAC;gBACd,KAAK,CAAC,SAAS,GAAG,CAAC,CAAC;gBACpB,KAAK,CAAC,UAAU,GAAG,CAAC,CAAC;gBACrB,KAAK,IAAI,KAAK,GAAW,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;oBACpC,QAAQ,GAAG,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,KAAK,EAAE,KAAK,EAAE,EAAE,QAAQ,EAAE,CAAC,EAAE,MAAM,CAAC,CAAC;iBAC5E;gBACD,CAAC,GAAG,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC;gBACrC,QAAQ,IAAI,CAAC,CAAC;gBACd,KAAK,CAAC,UAAU,GAAG,CAAC,CAAC;gBACrB,KAAK,IAAI,KAAK,GAAW,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;oBACpC,QAAQ,GAAG,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,KAAK,EAAE,KAAK,EAAE,EAAE,QAAQ,EAAE,CAAC,EAAE,MAAM,CAAC,CAAC;iBAC5E;aACJ;SACJ;QACD,KAAK,CAAC,MAAM,IAAI,KAAK,GAAG,CAAC,CAAC;QAC1B,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;QACrC,OAAO,QAAQ,CAAC;KACnB;;;;;;;;;;;;;;;IAgBO,aAAa,CAAC,KAAY,EAAE,KAAa,EAAE,CAAS,EAAE,GAAa,EAAE,MAAe;QACxF,IAAI,IAAI,GAAW,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC;QACvC,SAAS,IAAI;YACT,KAAK,CAAC;gBACF,KAAK,CAAC,KAAK,CAAC,GAAG,OAAO,CAAC,GAAG,CAAC;gBAC3B,MAAM;YACV,KAAK,CAAC;gBACF,KAAK,CAAC,KAAK,CAAC,GAAG,OAAO,CAAC,OAAO,CAAC;gBAC/B,MAAM;YACV,KAAK,CAAC;gBACF,KAAK,CAAC,KAAK,CAAC,GAAG,OAAO,CAAC,KAAK,CAAC;gBAC7B,MAAM;YACV,KAAK,CAAC;gBACF,KAAK,CAAC,KAAK,CAAC,GAAG,OAAO,CAAC,MAAM,CAAC;gBAC9B,MAAM;YACV,KAAK,CAAC;gBACF,KAAK,CAAC,KAAK,CAAC,GAAG,OAAO,CAAC,IAAI,CAAC;gBAC5B,MAAM;YACV,KAAK,CAAC;gBACF,KAAK,CAAC,KAAK,CAAC,GAAG,OAAO,CAAC,IAAI,CAAC;gBAC5B,MAAM;YACV,KAAK,CAAC;gBACF,KAAK,CAAC,KAAK,CAAC,GAAG,OAAO,CAAC,kBAAkB,CAAC;gBAC1C,MAAM;YACV,KAAK,CAAC;gBACF,KAAK,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;gBACtC,CAAC,IAAI,CAAC,CAAC;gBACP,MAAM;YACV;gBACI,KAAK,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC;gBACjE,CAAC,IAAI,CAAC,CAAC;SACd;QACD,OAAO,CAAC,CAAC;KACZ;;;;;;;;;;;;IAaD,SAAS,CAAC,MAAc,EAAE,MAAe;QACrC,IAAI,MAAM,CAAC,MAAM,CAAC,IAAI,IAAI,EAAE;YACxB,MAAM,CAAC,MAAM,CAAC,GAAG,IAAI,KAAK,EAAE,CAAC;SAChC;QACD,OAAO,MAAM,CAAC,MAAM,CAAC,CAAC;KACzB;;;;;;IAOO,aAAa;QACjB,IAAI,CAAC,GAAW,IAAI,CAAC,MAAM,GAAG,CAAC,GAAG,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;QAC9E,KAAK,IAAI,CAAC,GAAW,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,EAAE;YACxD,KAAK,IAAI,CAAC,GAAW,IAAI,CAAC,iBAAiB,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,EAAE;gBAC5D,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC;aACjC;YACD,CAAC,IAAI,CAAC,CAAC;SACV;QACD,CAAC,IAAI,CAAC,CAAC;QACP,KAAK,IAAI,CAAC,GAAW,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,EAAE;YACxD,KAAK,IAAI,CAAC,GAAW,IAAI,CAAC,iBAAiB,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,EAAE;gBAC5D,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC;aACjC;YACD,CAAC,IAAI,CAAC,CAAC;SACV;QACD,OAAO,CAAC,GAAG,CAAC,CAAC;KAChB;;;;;;;;;;;;;;;;;;;;;;;;;;;IA4BO,aAAa,CAAC,KAAkB,EAAE,IAAmB,EAAE,GAAW,EAAE,GAAW,EAAE,GAAa,EAAE,OAAe,EAAE,MAAsB;QAC3I,KAAK,IAAI,CAAC,GAAW,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;YAC3C,KAAK,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,KAAK,IAAI,GAAG;gBAC1B,OAAO,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;aAC9D;SACJ;QACD,OAAO,IAAI,SAAS,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;KACnE;;;;;;IAOM,YAAY;QACf,OAAO,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC;KAC5B;;;;;;;;;;IAWM,OAAO,CAAC,IAAY;QACvB,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;KAC3B;;;;;;;;IASM,kBAAkB;QACrB,OAAO,IAAI,CAAC,eAAe,CAAC;KAC/B;;;;;;;;;IAUM,QAAQ,CAAC,KAAa;;QAEzB,OAAO,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC;KAChC;;;;;;;;;IAUM,iBAAiB,CAAC,KAAa;;QAElC,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC;QACjB,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC;KACzD;;;;;;;;;IAUM,SAAS,CAAC,KAAa;QAC1B,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC;QACjB,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC;KAC3C;;;;;;;;;IAUM,OAAO,CAAC,KAAa;;QAExB,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC;QACjB,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,GAAG,KAAK,EAAE,KAAK,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,GAAG,GAAG,KAAK,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,GAAG,GAAG,KAAK,CAAC,CAAC,IAAI,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC;KACjH;;;;;;;;;IAUM,QAAQ,CAAC,KAAa;QACzB,IAAI,EAAE,GAAW,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QACrC,IAAI,EAAE,GAAW,IAAI,CAAC,OAAO,CAAC,KAAK,GAAG,CAAC,CAAC,GAAG,UAAU,CAAC;QACtD,OAAO,IAAID,MAAI,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;KAC3B;;;;;;;;;;;;IAaM,QAAQ,CAAC,KAAa,EAAE,GAAa;QACxC,IAAI,IAAI,GAAW,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC;QACjD,IAAI,KAAK,KAAK,CAAC,IAAI,IAAI,KAAK,CAAC,EAAE;YAAE,OAAO,EAAE,CAAC;SAAE;QAC7C,IAAI,CAAC,GAAW,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QACnC,IAAI,CAAC,IAAI,IAAI,EAAE;YAAE,OAAO,CAAC,CAAC;SAAE;QAC5B,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QACzB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,GAAG,CAAC,EAAE,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,EAAE,GAAG,CAAC,CAAC;QACjF,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;KAC7B;;;;;;;;;;IAWO,OAAO,CAAC,KAAa,EAAE,MAAc,EAAE,GAAa;QACxD,IAAI,QAAQ,GAAW,KAAK,GAAG,MAAM,CAAC;QACtC,IAAI,CAAC,GAAe,IAAI,CAAC,GAAG,CAAC;QAC7B,IAAI,MAAM,GAAW,CAAC,CAAC;QACvB,IAAI,CAAS,CAAC;QACd,IAAI,EAAE,GAAW,CAAC,CAAC;QACnB,IAAI,EAAE,GAAW,CAAC,CAAC;QACnB,OAAO,KAAK,GAAG,QAAQ,EAAE;YACrB,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC;YACf,QAAQ,EAAE;gBACN,KAAK,CAAC;oBACF,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC;oBACZ,IAAI,CAAC,GAAG,GAAG,EAAE;wBACT,GAAG,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,CAAC;qBACrB;yBAAM,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,EAAE;wBAC3B,EAAE,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC;wBACd,EAAE,GAAG,CAAC,CAAC;qBACV;yBAAM;wBACH,EAAE,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC;wBACd,EAAE,GAAG,CAAC,CAAC;qBACV;oBACD,MAAM;gBACV,KAAK,CAAC;oBACF,GAAG,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;oBACvC,EAAE,GAAG,CAAC,CAAC;oBACP,MAAM;gBACV,KAAK,CAAC;oBACF,EAAE,IAAI,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;oBAC5B,EAAE,GAAG,CAAC,CAAC;oBACP,MAAM;aACb;SACJ;QACD,OAAO,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;KAC3E;;;;;;;;;;;;IAaM,SAAS,CAAC,KAAa,EAAE,GAAa;;QACzC,aAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC,EAAE,GAAG,CAAC,mCAAI,EAAE,CAAC;KAC9E;;;;;;;;;;;;;IAcM,SAAS,CAAC,IAAY,EAAE,GAAa;QACxC,IAAI,KAAK,GAAW,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QACrC,SAAS,IAAI,CAAC,GAAG,CAAC,KAAK,GAAG,CAAC,CAAC;YACxB,KAAK,WAAW,CAAC,GAAG;gBAChB,OAAO,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;YAC/B,KAAK,WAAW,CAAC,KAAK;gBAClB,OAAO,cAAc,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC;YAC/C,KAAK,WAAW,CAAC,IAAI;gBACjB,OAAO,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;YAChC,KAAK,WAAW,CAAC,MAAM;gBACnB,OAAO,gBAAgB,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;YAClD,KAAK,WAAW,CAAC,KAAK;gBAClB,OAAO,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,CAAC;YACzD,KAAK,WAAW,CAAC,GAAG;gBAChB,OAAO,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;YACrC,KAAK,WAAW,CAAC,KAAK;gBAClB,OAAO,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,CAAC;YACzD;gBACI,IAAI,GAAG,GAAW,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;gBACvC,IAAI,KAAK,GAAa,IAAI,CAAC,KAAK,CAAC;gBACjC,IAAI,OAAO,GAAW,KAAK,CAAC,IAAI,CAAC,iBAAiB,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC;gBAC/D,IAAI,GAAG,GAAY,IAAI,CAAC,GAAG,CAAC,OAAO,GAAG,CAAC,CAAC,KAAK,WAAW,CAAC,KAAK,CAAC;gBAC/D,IAAI,KAAK,GAAW,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC;gBACjD,OAAO,GAAG,KAAK,CAAC,IAAI,CAAC,iBAAiB,CAAC,OAAO,GAAG,CAAC,CAAC,CAAC,CAAC;gBACrD,IAAI,IAAI,GAAW,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC;gBAC/C,IAAI,IAAI,GAAW,IAAI,CAAC,QAAQ,CAAC,OAAO,GAAG,CAAC,EAAE,GAAG,CAAC,CAAC;gBACnD,OAAO,IAAI,MAAM,CAAC,GAAG,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,CAAC,CAAC;SACtD;KACJ;;AA92DD;;;AAGO,sBAAU,GAAY,IAAI,CAAC;AAElC;;;AAGO,uBAAW,GAAY,IAAI,CAAC;AAEnC;;;AAGO,kBAAM,GAAY,IAAI,CAAC;AAE9B;;;AAGO,kBAAM,GAAY,IAAI,CAAC;AAE9B;;;AAGO,kBAAM,GAAY,IAAI,CAAC;AAE9B;;;;;AAKc,qBAAS,GAAW,CAAC,CAAC;AAEpC;;;;;;;AAOc,sBAAU,GAAW,CAAC,CAAC;AAErC;;;;;;;;AAQc,uBAAW,GAAW,CAAC,CAAC;AAEtC;;;;;;;;AAQc,yBAAa,GAAW,CAAC,CAAC;AAExC;;;;;;;;;;;;;AAaO,4BAAgB,GAAW,GAAG;;ACrIzC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA;AACA;;;;;;;;;MASa,aAAa;;;;;;;;;IAkJtB,YAAY,OAAe;QACvB,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC;QACf,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC;KACxB;;;;;;;;;;;;;;IAeD,OAAO,gBAAgB,CAAC,IAAY;QAChC,OAAO,IAAI,aAAa,CAAC,IAAI,IAAI,EAAE,CAAC,CAAC;KACxC;;;;;;;;;;;IAYD,OAAO,yBAAyB,CAAC,IAAY,EAAE,UAAkB;QAC7D,OAAO,IAAI,aAAa,CAAC,CAAC,IAAI,IAAI,EAAE,KAAK,UAAU,IAAI,EAAE,CAAC,CAAC,CAAC;KAC/D;;;;;;;;;;;;;;;IAgBD,OAAO,8BAA8B,CAAC,IAAY,EAAE,UAAkB,EAAE,UAAkB;QACtF,OAAO,IAAI,aAAa,CAAC,CAAC,IAAI,IAAI,EAAE,KAAK,UAAU,IAAI,EAAE,CAAC,IAAI,UAAU,IAAI,CAAC,CAAC,CAAC,CAAC;KACnF;;;;;;;;;;IAWD,OAAO,qBAAqB,CAAC,QAAgB;QACzC,QAAQ,IAAI,KAAK,CAAC;QAClB,OAAO,IAAI,aAAa,CAAC,CAAC,aAAa,CAAC,aAAa,IAAI,EAAE,KAAK,QAAQ,IAAI,CAAC,CAAC,CAAC,CAAC;KACnF;;;;;;;;;IAUD,OAAO,2BAA2B,CAAC,UAAkB;QACjD,OAAO,IAAI,aAAa,CAAC,CAAC,aAAa,CAAC,uBAAuB,IAAI,EAAE,KAAK,UAAU,IAAI,EAAE,CAAC,CAAC,CAAC;KAChG;;;;;;;;;;IAWD,OAAO,qBAAqB,CAAC,cAAsB;QAC/C,OAAO,IAAI,aAAa,CAAC,CAAC,aAAa,CAAC,MAAM,IAAI,EAAE,KAAK,cAAc,IAAI,CAAC,CAAC,CAAC,CAAC;KAClF;;;;;;;;;;;IAYD,OAAO,oBAAoB,CAAC,kBAA0B;QAClD,OAAO,IAAI,aAAa,CAAC,CAAC,aAAa,CAAC,mBAAmB,IAAI,EAAE,KAAK,kBAAkB,IAAI,CAAC,CAAC,CAAC,CAAC;KACnG;;;;;;;;;;;;;;;;;;;;IAqBD,OAAO,wBAAwB,CAAC,IAAY,EAAE,QAAgB;QAC1D,OAAO,IAAI,aAAa,CAAC,CAAC,IAAI,IAAI,EAAE,IAAI,QAAQ,CAAC,CAAC;KACrD;;;;;;;;;;;;;;;;;;;;;;;;;;;IA4BD,OAAO;QACH,OAAO,IAAI,CAAC,KAAK,KAAK,EAAE,CAAC;KAC5B;;;;;;;;;;;IAYD,qBAAqB;QACjB,OAAO,CAAC,IAAI,CAAC,KAAK,GAAG,QAAQ,KAAK,EAAE,CAAC;KACxC;;;;;;;;;;IAWD,0BAA0B;QACtB,OAAO,CAAC,IAAI,CAAC,KAAK,GAAG,KAAK,KAAK,CAAC,CAAC;KACpC;;;;;;;;;;IAWD,iBAAiB;QACb,QAAQ,CAAC,CAAC,IAAI,CAAC,KAAK,GAAG,QAAQ,KAAK,CAAC,IAAI,CAAC,EAAE;KAC/C;;;;;;;;IASD,uBAAuB;QACnB,OAAO,CAAC,IAAI,CAAC,KAAK,GAAG,QAAQ,KAAK,EAAE,CAAC;KACxC;;;;;;;;IASD,iBAAiB;QACb,OAAO,CAAC,IAAI,CAAC,KAAK,GAAG,QAAQ,KAAK,CAAC,CAAC;KACvC;;;;;;;;;IAUD,qBAAqB;QACjB,OAAO,CAAC,IAAI,CAAC,KAAK,GAAG,QAAQ,KAAK,CAAC,CAAC;KACvC;;;;;;;;;;;;;IAcD,oBAAoB;QAChB,OAAO,IAAI,CAAC,KAAK,GAAG,GAAG,CAAC;KAC3B;;;;;;;IAQD,QAAQ;QACJ,OAAO,IAAI,CAAC,KAAK,CAAC;KACrB;;AAnZD;;;;AAIgB,kCAAoB,GAAW,CAAC,CAAC;AAEjD;;;;AAIgB,mCAAqB,GAAW,CAAC,CAAC;AAElD;;;;AAIgB,2BAAa,GAAW,EAAE,CAAC;AAE3C;;;;AAIgB,wCAA0B,GAAW,EAAE,CAAC;AAExD;;;;AAIgB,yCAA2B,GAAW,EAAE,CAAC;AAEzD;;;;AAIgB,mBAAK,GAAW,EAAE,CAAC;AAEnC;;;;AAIgB,2BAAa,GAAW,EAAE,CAAC;AAE3C;;;;AAIgB,6BAAe,GAAW,EAAE,CAAC;AAE7C;;;;AAIgB,qCAAuB,GAAW,EAAE,CAAC;AAErD;;;;AAIgB,oBAAM,GAAW,EAAE,CAAC;AAEpC;;;;AAIgB,4BAAc,GAAW,EAAE,CAAC;AAE5C;;;;AAIgB,+BAAiB,GAAW,EAAE,CAAC;AAE/C;;;;AAIgB,iCAAmB,GAAW,EAAE,CAAC;AAEjD;;;;AAIgB,wBAAU,GAAW,EAAE,CAAC;AAExC;;;;AAIgB,iBAAG,GAAW,EAAE,CAAC;AAEjC;;;;AAIgB,mCAAqB,GAAW,EAAE,CAAC;AAEnD;;;;AAIgB,8BAAgB,GAAW,EAAE,CAAC;AAE9C;;;;AAIgB,kBAAI,GAAW,EAAE,CAAC;AAElC;;;;AAIgB,kDAAoC,GAAW,EAAE,CAAC;AAElE;;;;AAIgB,6CAA+B,GAAW,EAAE,CAAC;AAE7D;;;;AAIgB,iDAAmC,GAAW,EAAE,CAAC;AAEjE;;;;AAIgB,4CAA8B,GAAW,EAAE;;;;"}