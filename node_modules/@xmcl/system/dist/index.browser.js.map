{"version":3,"file":"index.browser.js","sources":["../system.ts","../index.browser.ts"],"sourcesContent":["export abstract class FileSystem {\n    abstract readonly root: string;\n    abstract readonly sep: string;\n    abstract readonly type: \"zip\" | \"path\";\n    abstract readonly writeable: boolean;\n\n    // base methods\n\n    abstract join(...paths: string[]): string;\n\n    abstract isDirectory(name: string): Promise<boolean>;\n    abstract existsFile(name: string): Promise<boolean>;\n    abstract readFile(name: string, encoding: \"utf-8\" | \"base64\"): Promise<string>;\n    abstract readFile(name: string, encoding: undefined): Promise<Uint8Array>;\n    abstract readFile(name: string): Promise<Uint8Array>;\n    abstract readFile(name: string, encoding?: \"utf-8\" | \"base64\"): Promise<Uint8Array | string>;\n\n    /**\n     * Get the url for a file entry. If the system does not support get url. This should return an empty string.\n     */\n    getUrl(name: string): string { return \"\"; }\n\n    abstract listFiles(name: string): Promise<string[]>;\n\n    abstract cd(name: string): void;\n\n    close(): void { }\n\n    // extension methods\n\n    async missingFile(name: string) {\n        return this.existsFile(name).then((v) => !v);\n    }\n\n    async walkFiles(target: string, walker: (path: string) => void | Promise<void>) {\n        if (await this.isDirectory(target)) {\n            const childs = await this.listFiles(target);\n            for (const child of childs) {\n                await this.walkFiles(this.join(target, child), walker);\n            }\n        } else {\n            const result = walker(this.join(target));\n            if (result instanceof Promise) {\n                await result;\n            }\n        }\n    }\n}\n","import { FileSystem } from \"./system\";\nimport JSZip from \"jszip\";\n\nclass JSZipFS extends FileSystem {\n    sep: string = \"/\";\n    type: \"zip\" | \"path\" = \"zip\";\n    writeable: boolean = true;\n    root: string = \"\";\n    protected normalizePath(path: string): string {\n        if (path.startsWith(\"/\")) {\n            path = path.substring(1);\n        }\n        if (this.root !== \"\") {\n            path = [this.root, path].join(\"/\")\n        }\n        return path;\n    }\n    join(...paths: string[]): string {\n        return paths.join(\"/\");\n    }\n    isDirectory(name: string): Promise<boolean> {\n        name = this.normalizePath(name);\n        name = name.endsWith(\"/\") ? name : name + \"/\";\n        return Promise.resolve(Object.keys(this.zip.files).some((e) => e.startsWith(name)))\n    }\n    async writeFile(name: string, data: Uint8Array): Promise<void> {\n        name = this.normalizePath(name);\n        this.zip.file(name, data);\n    }\n    existsFile(name: string): Promise<boolean> {\n        name = this.normalizePath(name);\n        if (this.zip.files[name] !== undefined) { return Promise.resolve(true); }\n        return this.isDirectory(name);\n    }\n    readFile(name: any, encoding?: any): Promise<any> {\n        name = this.normalizePath(name);\n        if (!encoding) {\n            return this.zip.files[name].async(\"uint8array\");\n        }\n        if (encoding === \"utf-8\") {\n            return this.zip.files[name].async(\"text\");\n        }\n        if (encoding === \"base64\") {\n            return this.zip.files[name].async(\"base64\");\n        }\n        throw new TypeError(`Expect encoding to be utf-8/base64 or empty. Got ${encoding}.`);\n    }\n    async listFiles(name: string): Promise<string[]> {\n        if (!await this.isDirectory(name)) { return Promise.reject(\"Require a directory!\"); }\n        name = this.normalizePath(name);\n        return Promise.resolve(Object.keys(this.zip.files)\n            .filter((e) => e.startsWith(name))\n            .map((e) => e.substring(name.length))\n            .map((e) => e.startsWith(\"/\") ? e.substring(1) : e)\n            .map((e) => e.split(\"/\")[0]))\n    }\n    cd(name: string): void {\n        if (name.startsWith(\"/\")) {\n            this.root = name.substring(1);\n            return;\n        }\n        let paths = name.split(\"/\");\n        for (let path of paths) {\n            if (path === \".\") {\n                continue;\n            } else if (path === \"..\") {\n                let sub = this.root.split(\"/\");\n                if (sub.length > 0) {\n                    sub.pop();\n                    this.root = sub.join(\"/\");\n                }\n            } else {\n                if (this.root === \"\") {\n                    this.root = path;\n                } else {\n                    this.root += `/${path}`;\n                }\n            }\n        }\n    }\n\n    constructor(private zip: JSZip) { super(); }\n}\n\nexport async function openFileSystem(basePath: string | Uint8Array): Promise<FileSystem> {\n    if (typeof basePath === \"string\") { throw new Error(\"Unsupported\"); }\n    return new JSZipFS(await JSZip.loadAsync(basePath));\n}\nexport function resolveFileSystem(base: string | Uint8Array | FileSystem): Promise<FileSystem> {\n    if (typeof base === \"string\" || base instanceof Uint8Array) {\n        return openFileSystem(base);\n    } else {\n        return Promise.resolve(base);\n    }\n}\n\nexport * from \"./system\";\n"],"names":[],"mappings":"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"}